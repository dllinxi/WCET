/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define lp_yyconst const
#else
#define lp_yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN lp_yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((lp_yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE lp_yyrestart( lp_yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct lp_yy_buffer_state *YY_BUFFER_STATE;

extern int lp_yyleng;
extern FILE *lp_yyin, *lp_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		lp_yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the lp_yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define lp_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up lp_yytext. */ \
		*lp_yy_cp = lp_yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		lp_yy_c_buf_p = lp_yy_cp = lp_yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up lp_yytext again */ \
		} \
	while ( 0 )

#define unput(c) lp_yyunput( c, lp_yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int lp_yy_size_t;


struct lp_yy_buffer_state
	{
	FILE *lp_yy_input_file;

	char *lp_yy_ch_buf;		/* input buffer */
	char *lp_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	lp_yy_size_t lp_yy_buf_size;

	/* Number of characters read into lp_yy_ch_buf, not including EOB
	 * characters.
	 */
	int lp_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int lp_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int lp_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int lp_yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int lp_yy_fill_buffer;

	int lp_yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via lp_yyrestart()), so that the user can continue scanning by
	 * just pointing lp_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE lp_yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER lp_yy_current_buffer


/* lp_yy_hold_char holds the character lost when lp_yytext is formed. */
static char lp_yy_hold_char;

static int lp_yy_n_chars;		/* number of characters read into lp_yy_ch_buf */


int lp_yyleng;

/* Points to current character in buffer. */
static char *lp_yy_c_buf_p = (char *) 0;
static int lp_yy_init = 1;		/* whether we need to initialize */
static int lp_yy_start = 0;	/* start state number */

/* Flag which is used to allow lp_yywrap()'s to do buffer switches
 * instead of setting up a fresh lp_yyin.  A bit of a hack ...
 */
static int lp_yy_did_buffer_switch_on_eof;

void lp_yyrestart YY_PROTO(( FILE *input_file ));

void lp_yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void lp_yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE lp_yy_create_buffer YY_PROTO(( FILE *file, int size ));
void lp_yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void lp_yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void lp_yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER lp_yy_flush_buffer( lp_yy_current_buffer )

YY_BUFFER_STATE lp_yy_scan_buffer YY_PROTO(( char *base, lp_yy_size_t size ));
YY_BUFFER_STATE lp_yy_scan_string YY_PROTO(( lp_yyconst char *lp_yy_str ));
YY_BUFFER_STATE lp_yy_scan_bytes YY_PROTO(( lp_yyconst char *bytes, int len ));

static void *lp_yy_flex_alloc YY_PROTO(( lp_yy_size_t ));
static void *lp_yy_flex_realloc YY_PROTO(( void *, lp_yy_size_t ));
static void lp_yy_flex_free YY_PROTO(( void * ));

#define lp_yy_new_buffer lp_yy_create_buffer

#define lp_yy_set_interactive(is_interactive) \
	{ \
	if ( ! lp_yy_current_buffer ) \
		lp_yy_current_buffer = lp_yy_create_buffer( lp_yyin, YY_BUF_SIZE ); \
	lp_yy_current_buffer->lp_yy_is_interactive = is_interactive; \
	}

#define lp_yy_set_bol(at_bol) \
	{ \
	if ( ! lp_yy_current_buffer ) \
		lp_yy_current_buffer = lp_yy_create_buffer( lp_yyin, YY_BUF_SIZE ); \
	lp_yy_current_buffer->lp_yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (lp_yy_current_buffer->lp_yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *lp_yyin = (FILE *) 0, *lp_yyout = (FILE *) 0;
typedef int lp_yy_state_type;
#define YY_FLEX_LEX_COMPAT
extern int lp_yylineno;
int lp_yylineno = 1;
extern char lp_yytext[];


static lp_yy_state_type lp_yy_get_previous_state YY_PROTO(( void ));
static lp_yy_state_type lp_yy_try_NUL_trans YY_PROTO(( lp_yy_state_type current_state ));
static int lp_yy_get_next_buffer YY_PROTO(( void ));
static void lp_yy_fatal_error YY_PROTO(( lp_yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up lp_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	lp_yytext_ptr = lp_yy_bp; \
	lp_yyleng = (int) (lp_yy_cp - lp_yy_bp); \
	lp_yy_hold_char = *lp_yy_cp; \
	*lp_yy_cp = '\0'; \
	if ( lp_yyleng + lp_yy_more_offset >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	lp_yy_flex_strncpy( &lp_yytext[lp_yy_more_offset], lp_yytext_ptr, lp_yyleng + 1 ); \
	lp_yyleng += lp_yy_more_offset; \
	lp_yy_prev_more_offset = lp_yy_more_offset; \
	lp_yy_more_offset = 0; \
	lp_yy_c_buf_p = lp_yy_cp;

#define YY_NUM_RULES 31
#define YY_END_OF_BUFFER 32
static lp_yyconst short int lp_yy_acclist[157] =
    {   0,
       27,   27,   32,   30,   31,   10,   17,   30,   31,   10,
       17,   31,   26,   30,   31,   17,   30,   31,   11,   30,
       31,   30,   31,   30,   31,   14,   15,   30,   31,   25,
       30,   31,   29,   30,   31,   27,   30,   31,   27,   30,
       31,   28,   30,   31,   24,   30,   31,   24,   30,   31,
       10,   17,   30,   31,   24,   30,   31,   24,   30,   31,
       24,   30,   31,    3,   31,    4,   31,    3,    5,   31,
        3,   31,    9,   31,    7,   31,    8,    9,   31,   10,
       17,   17,   17,   15,    1,    6,   15,   14,   15,   27,
       28,   24,   23,   24,   24,   10,   17,   24,   24,   24,

       24,    2,   15,   15,   21,   24,   24,   24,   18,   24,
       19,   24,   24,   24,   20,   24,16400,   24,   13,   23,
       24,   12,   23,   24,   18,   19,   20,   22,   24,   24,
       19,   24,   20,   24,   20,   24, 8208, 8208,   13,   24,
       12,   24,   22,   20,   24,   24,   24,   24,   24,   24,
       18,   24,   24,   24,   18,16400
    } ;

static lp_yyconst short int lp_yy_accept[134] =
    {   0,
        1,    2,    3,    3,    3,    3,    3,    4,    6,   10,
       13,   16,   19,   22,   24,   26,   30,   33,   36,   39,
       42,   45,   48,   51,   55,   58,   61,   64,   66,   68,
       71,   73,   75,   77,   80,   82,   83,   84,   84,   85,
       86,   87,   88,   90,   90,   91,   92,   93,   94,   94,
       95,   96,   98,   98,   98,   98,   99,  100,  101,  102,
      103,  103,  104,  104,  105,  106,  106,  107,  108,  108,
      108,  108,  108,  109,  111,  113,  114,  115,  117,  118,
      119,  119,  121,  122,  122,  124,  125,  125,  126,  127,
      128,  130,  131,  133,  135,  137,  138,  139,  139,  140,

      141,  142,  143,  144,  144,  145,  146,  146,  146,  147,
      148,  148,  149,  149,  149,  150,  151,  151,  153,  153,
      153,  154,  155,  156,  156,  157,  157,  157,  157,  157,
      157,  157,  157
    } ;

static lp_yyconst int lp_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    6,    5,    5,    5,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   14,
       13,   13,   13,   13,   13,   13,   13,   15,   16,   17,
       18,   19,    1,    5,   20,   21,   22,   21,   23,   24,
       25,   21,   26,   21,   21,   21,   27,   28,   29,   21,
       21,   30,   31,   32,   33,   21,   21,   34,   35,   36,
        5,    1,    5,    5,    5,    1,   20,   21,   22,   21,

       23,   24,   25,   21,   26,   21,   21,   21,   27,   28,
       29,   21,   21,   30,   31,   32,   33,   21,   21,   34,
       35,   36,    5,    1,    5,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static lp_yyconst int lp_yy_meta[37] =
    {   0,
        1,    2,    2,    2,    3,    4,    5,    2,    5,    2,
        4,    4,    4,    4,    6,    5,    6,    5,    5,    3,
        3,    3,    3,    3,    3,    7,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3
    } ;

static lp_yyconst short int lp_yy_base[139] =
    {   0,
        0,   35,   35,   37,   42,   44,  304,  313,   47,   50,
      313,  273,  313,   49,   57,   54,  313,  313,  277,  313,
      276,   55,   56,   81,   63,   64,   71,  313,  313,  313,
      281,  313,  313,  313,   93,  266,  106,  247,  104,  313,
      313,  106,  110,  118,  313,  313,   87,  259,    0,   96,
      119,    0,  243,  244,  112,  122,  123,  127,  131,  313,
      247,  137,   61,   85,  313,  251,  141,  151,  246,  236,
      245,  235,  146,  155,  156,  159,  164,  169,  185,  250,
       41,  249,  165,  150,  248,  176,  239,  238,  313,  246,
      179,  182,  191,  183,  195,  211,  313,  227,  313,  201,

      313,  202,  313,  225,  235,  206,  216,  205,  209,  215,
      197,  218,  176,  158,  219,  224,  145,  187,  136,  202,
      241,  242,  313,  125,  250,   99,   94,   82,   77,   57,
       56,  313,  276,  283,  289,  294,  299,  305
    } ;

static lp_yyconst short int lp_yy_def[139] =
    {   0,
      132,    1,  133,  133,  134,  134,  132,  132,  132,  132,
      132,  135,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  136,  136,  132,  136,  136,  136,  132,  132,  132,
      132,  132,  132,  132,  132,  135,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  136,  132,  137,  136,
      136,   24,  132,  132,  132,  136,  136,  136,  136,  132,
      132,  132,  132,  132,  132,  137,  136,  136,  132,  132,
      132,  132,  136,  136,  136,  136,  136,  136,  138,  132,
      132,  132,  136,  132,  132,  136,  132,  132,  132,  132,
      136,  136,  136,  136,  136,  132,  132,  132,  132,  136,

      132,  136,  132,  132,  132,  136,  132,  132,  136,  136,
      132,  136,  132,  132,  136,  136,  132,  136,  132,  132,
      136,  136,  132,  132,  138,  132,  132,  132,  132,  132,
      132,    0,  132,  132,  132,  132,  132,  132
    } ;

static lp_yyconst short int lp_yy_nxt[350] =
    {   0,
        8,    9,   10,    9,    8,    8,   11,   12,   13,   12,
       14,   15,   16,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   22,   23,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   24,   29,   30,   29,
       30,   31,   81,   31,   33,   34,   33,   34,   35,   35,
       35,   35,   35,   35,   36,   99,   36,   36,   25,   36,
       26,   39,   39,   40,   42,   27,   43,   43,   41,   48,
       48,   49,   49,   64,   64,   50,   44,   48,   48,   49,
       49,   51,   52,   35,   35,   48,   89,   49,   36,  131,
       36,   57,   56,   58,   35,   35,   35,   64,   64,   59,

       36,   48,   36,   49,   53,  130,   54,   37,   37,   37,
       48,   55,   49,   37,  129,   37,   39,   39,   62,   62,
       42,  128,   43,   43,  127,   63,   44,   63,   44,   67,
       64,   64,   44,   48,   71,   49,   48,   48,   49,   49,
       72,   48,   81,   49,   73,   48,   68,   49,   75,   62,
       62,   84,   84,   76,   74,   82,  126,   49,   77,   44,
       48,   78,   49,  124,  101,   85,   83,   49,   91,   48,
       48,   49,   49,   48,  123,   49,   86,   92,   48,   48,
       49,   49,   95,   48,   93,   49,   96,   96,   96,  120,
       48,  100,   49,   48,   94,   49,   48,   48,   49,   49,

      107,   48,  102,   49,  119,   48,  106,   49,   95,   48,
       98,   49,   96,   96,   96,   48,   48,   49,   49,  117,
       48,   75,   49,   48,  125,   49,  109,  110,  112,   48,
      114,   49,   48,   48,   49,   49,  125,  113,   48,  115,
       49,  121,   81,   84,  115,  116,  122,  118,  105,  111,
      116,   96,   96,   96,  108,   82,   85,   49,   49,  105,
      104,  103,   65,   65,   48,   90,   89,   88,   87,   80,
       79,   70,   69,   65,   61,  132,   28,   28,   28,   28,
       28,   28,   28,   32,   32,   32,   32,   32,   32,   32,
       37,   38,   60,   46,   45,   37,   47,   47,   38,   47,

       47,   66,   66,  132,  132,   66,   97,  132,   97,   97,
       97,   97,    7,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132
    } ;

static lp_yyconst short int lp_yy_chk[350] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    3,    3,    4,
        4,    3,   81,    4,    5,    5,    6,    6,    9,    9,
        9,   10,   10,   10,    9,   81,    9,   10,    2,   10,
        2,   14,   14,   15,   16,    2,   16,   16,   15,   22,
       23,   22,   23,   63,   63,   23,   16,   25,   26,   25,
       26,   23,   24,   24,   24,   27,  131,   27,   24,  130,
       24,   26,   25,   27,   35,   35,   35,   64,   64,   27,

       35,   47,   35,   47,   24,  129,   24,   37,   37,   37,
       50,   24,   50,   37,  128,   37,   39,   39,   42,   42,
       43,  127,   43,   43,  126,   44,   39,   44,   42,   50,
       44,   44,   43,   51,   55,   51,   56,   57,   56,   57,
       55,   58,   67,   58,   56,   59,   51,   59,   58,   62,
       62,   84,   68,   58,   57,   67,  124,   67,   58,   62,
       73,   59,   73,  119,   84,   68,   67,   68,   73,   74,
       75,   74,   75,   76,  117,   76,   68,   74,   77,   83,
       77,   83,   78,   78,   76,   78,   79,   79,   79,  114,
       86,   83,   86,   91,   77,   91,   92,   94,   92,   94,

       93,  118,   86,  118,  113,   93,   92,   93,   95,   95,
       79,   95,   96,   96,   96,  100,  102,  100,  102,  111,
      106,   93,  106,  109,  120,  109,  100,  102,  106,  110,
      108,  110,  112,  115,  112,  115,  120,  107,  116,  109,
      116,  115,  121,  122,  109,  110,  116,  112,  105,  104,
      110,  125,  125,  125,   98,  121,  122,  121,  122,   90,
       88,   87,   85,   82,   80,   72,   71,   70,   69,   66,
       61,   54,   53,   48,   38,  125,  133,  133,  133,  133,
      133,  133,  133,  134,  134,  134,  134,  134,  134,  134,
      135,   36,   31,   21,   19,  135,  136,  136,   12,  136,

      136,  137,  137,    7,    0,  137,  138,    0,  138,  138,
      138,  138,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132
    } ;

static lp_yy_state_type lp_yy_state_buf[YY_BUF_SIZE + 2], *lp_yy_state_ptr;
static char *lp_yy_full_match;
static int lp_yy_lp;
static int lp_yy_looking_for_trail_begin = 0;
static int lp_yy_full_lp;
static int *lp_yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*lp_yy_cp = lp_yy_hold_char; /* undo effects of setting up lp_yytext */ \
lp_yy_cp = lp_yy_full_match; /* restore poss. backed-over text */ \
lp_yy_lp = lp_yy_full_lp; /* restore orig. accepting pos. */ \
lp_yy_state_ptr = lp_yy_full_state; /* restore orig. state */ \
lp_yy_current_state = *lp_yy_state_ptr; /* restore curr. state */ \
++lp_yy_lp; \
goto find_rule; \
}
static int lp_yy_more_offset = 0;
static int lp_yy_prev_more_offset = 0;
#define lp_yymore() (lp_yy_more_offset = lp_yy_flex_strlen( lp_yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	lp_yy_more_offset = lp_yy_prev_more_offset; \
	lp_yyleng -= lp_yy_more_offset; \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char lp_yytext[YYLMAX];
char *lp_yytext_ptr;
#define INITIAL 0
#define COMMENT 1

#define LINECOMMENT 2


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int lp_yywrap YY_PROTO(( void ));
#else
extern int lp_yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void lp_yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef lp_yytext_ptr
static void lp_yy_flex_strncpy YY_PROTO(( char *, lp_yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int lp_yy_flex_strlen YY_PROTO(( lp_yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int lp_yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int lp_yy_start_stack_ptr = 0;
static int lp_yy_start_stack_depth = 0;
static int *lp_yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void lp_yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void lp_yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int lp_yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( lp_yytext, lp_yyleng, 1, lp_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( lp_yy_current_buffer->lp_yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( lp_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( lp_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, lp_yyin )) == 0) \
		  && ferror( lp_yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "lp_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef lp_yyterminate
#define lp_yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) lp_yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int lp_yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after lp_yytext and lp_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( lp_yyleng > 0 ) \
		lp_yy_current_buffer->lp_yy_at_bol = \
				(lp_yytext[lp_yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register lp_yy_state_type lp_yy_current_state;
	register char *lp_yy_cp, *lp_yy_bp;
	register int lp_yy_act;



	if ( lp_yy_init )
		{
		lp_yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! lp_yy_start )
			lp_yy_start = 1;	/* first start state */

		if ( ! lp_yyin )
			lp_yyin = stdin;

		if ( ! lp_yyout )
			lp_yyout = stdout;

		if ( ! lp_yy_current_buffer )
			lp_yy_current_buffer =
				lp_yy_create_buffer( lp_yyin, YY_BUF_SIZE );

		lp_yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		lp_yy_cp = lp_yy_c_buf_p;

		/* Support of lp_yytext. */
		*lp_yy_cp = lp_yy_hold_char;

		/* lp_yy_bp points to the position in lp_yy_ch_buf of the start of
		 * the current run.
		 */
		lp_yy_bp = lp_yy_cp;

		lp_yy_current_state = lp_yy_start;
		lp_yy_current_state += YY_AT_BOL();
		lp_yy_state_ptr = lp_yy_state_buf;
		*lp_yy_state_ptr++ = lp_yy_current_state;
lp_yy_match:
		do
			{
			register YY_CHAR lp_yy_c = lp_yy_ec[YY_SC_TO_UI(*lp_yy_cp)];
			while ( lp_yy_chk[lp_yy_base[lp_yy_current_state] + lp_yy_c] != lp_yy_current_state )
				{
				lp_yy_current_state = (int) lp_yy_def[lp_yy_current_state];
				if ( lp_yy_current_state >= 133 )
					lp_yy_c = lp_yy_meta[(unsigned int) lp_yy_c];
				}
			lp_yy_current_state = lp_yy_nxt[lp_yy_base[lp_yy_current_state] + (unsigned int) lp_yy_c];
			*lp_yy_state_ptr++ = lp_yy_current_state;
			++lp_yy_cp;
			}
		while ( lp_yy_base[lp_yy_current_state] != 313 );

lp_yy_find_action:
		lp_yy_current_state = *--lp_yy_state_ptr;
		lp_yy_lp = lp_yy_accept[lp_yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( lp_yy_lp && lp_yy_lp < lp_yy_accept[lp_yy_current_state + 1] )
				{
				lp_yy_act = lp_yy_acclist[lp_yy_lp];
				if ( lp_yy_act & YY_TRAILING_HEAD_MASK ||
				     lp_yy_looking_for_trail_begin )
					{
					if ( lp_yy_act == lp_yy_looking_for_trail_begin )
						{
						lp_yy_looking_for_trail_begin = 0;
						lp_yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( lp_yy_act & YY_TRAILING_MASK )
					{
					lp_yy_looking_for_trail_begin = lp_yy_act & ~YY_TRAILING_MASK;
					lp_yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					lp_yy_full_match = lp_yy_cp;
					lp_yy_full_state = lp_yy_state_ptr;
					lp_yy_full_lp = lp_yy_lp;
					}
				else
					{
					lp_yy_full_match = lp_yy_cp;
					lp_yy_full_state = lp_yy_state_ptr;
					lp_yy_full_lp = lp_yy_lp;
					break;
					}
				++lp_yy_lp;
				goto find_rule;
				}
			--lp_yy_cp;
			lp_yy_current_state = *--lp_yy_state_ptr;
			lp_yy_lp = lp_yy_accept[lp_yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( lp_yy_act != YY_END_OF_BUFFER )
			{
			int lp_yyl;
			for ( lp_yyl = 0; lp_yyl < lp_yyleng; ++lp_yyl )
				if ( lp_yytext[lp_yyl] == '\n' )
					++lp_yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( lp_yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
  BEGIN COMMENT;
} /* begin skip comment */
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  BEGIN INITIAL;
} /* end skip comment */
	YY_BREAK
case 3:
YY_RULE_SETUP
{
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  BEGIN LINECOMMENT;
} /* begin skip LINECOMMENT */
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  BEGIN INITIAL;
} /* end skip LINECOMMENT */
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  BEGIN INITIAL;
} /* end skip LINECOMMENT */
	YY_BREAK
case 9:
YY_RULE_SETUP
{
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  return(COMMA);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  return(MINIMISE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
  return(MAXIMISE);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  f = atof((char *)lp_yytext);
  return(INTCONS);
} /* f contains the last float */
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  f = atof((char *)lp_yytext);
  return(CONS);
} /* f contains the last float */
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  char *ptr;

  f = DEF_INFINITE;
  Sign = 0;
  ptr = (char *)lp_yytext;
  while (isspace(*ptr)) ptr++;
  if(*ptr == '-')
    Sign = 1;
  return(INF);
} /* f contains the last float */
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  Sign = 0;
  for(x = 0; x < lp_yyleng; x++)
    if(lp_yytext[x] == '-' || lp_yytext[x] == '+')
      Sign = (Sign == (lp_yytext[x] == '+'));
  return (SIGN);
  /* Sign is TRUE if the sign-string
     represents a '-'. Otherwise Sign
     is FALSE */
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  if((!Within_int_decl) && (!Within_sec_decl) && (!Within_sos_decl) && (!Within_free_decl)) {
    Within_int_decl = TRUE;
    Within_sos_decl1 = FALSE;
  }
  return(SEC_INT);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  if((!Within_int_decl) && (!Within_sec_decl) && (!Within_sos_decl) && (!Within_free_decl)) {
    Within_sec_decl = TRUE;
    Within_sos_decl1 = FALSE;
  }
  return(SEC_SEC);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  if(!Within_sos_decl)
    SOStype0 = (short)atoi(((char *)lp_yytext) + 3);
  if((!Within_int_decl) && (!Within_sec_decl) && (!Within_sos_decl) && (!Within_free_decl))
    Within_sos_decl = TRUE;
  return(SEC_SOS);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  FREE(Last_var);
  Last_var = strdup((char *)lp_yytext);
  Last_var[strlen(Last_var) - 2] = 0;
  return(SOSDESCR);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  if((!Within_int_decl) && (!Within_sec_decl) && (!Within_sos_decl) && (!Within_free_decl)) {
    Within_free_decl = TRUE;
    Within_sos_decl1 = FALSE;
  }
  return(SEC_FREE);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  FREE(Last_var);
  Last_var = strdup((char *)lp_yytext);
  Last_var[strlen(Last_var) - 1] = 0;
  return(VARIABLECOLON);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  FREE(Last_var);
  Last_var = strdup((char *)lp_yytext);
  return(VAR);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return (COLON);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return(AR_M_OP);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return(RE_OPLE);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return(RE_OPGE);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  Within_int_decl = Within_sec_decl = Within_sos_decl = Within_free_decl = FALSE;
  check_int_sec_sos_free_decl(Within_int_decl, Within_sec_decl, Within_sos_decl, Within_free_decl);
  return(END_C);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  report(NULL, CRITICAL, "LEX ERROR : %s lineno %d\n", lp_yytext, lp_yylineno);
  return(UNDEFINED);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(LINECOMMENT):
				lp_yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int lp_yy_amount_of_matched_text = (int) (lp_yy_cp - lp_yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*lp_yy_cp = lp_yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( lp_yy_current_buffer->lp_yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed lp_yyin at a new source and called
			 * lp_yylex().  If so, then we have to assure
			 * consistency between lp_yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			lp_yy_n_chars = lp_yy_current_buffer->lp_yy_n_chars;
			lp_yy_current_buffer->lp_yy_input_file = lp_yyin;
			lp_yy_current_buffer->lp_yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for lp_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since lp_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( lp_yy_c_buf_p <= &lp_yy_current_buffer->lp_yy_ch_buf[lp_yy_n_chars] )
			{ /* This was really a NUL. */
			lp_yy_state_type lp_yy_next_state;

			lp_yy_c_buf_p = lp_yytext_ptr + lp_yy_amount_of_matched_text;

			lp_yy_current_state = lp_yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * lp_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			lp_yy_next_state = lp_yy_try_NUL_trans( lp_yy_current_state );

			lp_yy_bp = lp_yytext_ptr + YY_MORE_ADJ;

			if ( lp_yy_next_state )
				{
				/* Consume the NUL. */
				lp_yy_cp = ++lp_yy_c_buf_p;
				lp_yy_current_state = lp_yy_next_state;
				goto lp_yy_match;
				}

			else
				{
				lp_yy_cp = lp_yy_c_buf_p;
				goto lp_yy_find_action;
				}
			}

		else switch ( lp_yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				lp_yy_did_buffer_switch_on_eof = 0;

				if ( lp_yywrap() )
					{
					/* Note: because we've taken care in
					 * lp_yy_get_next_buffer() to have set up
					 * lp_yytext, we can now set up
					 * lp_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					lp_yy_c_buf_p = lp_yytext_ptr + YY_MORE_ADJ;

					lp_yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! lp_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				lp_yy_c_buf_p =
					lp_yytext_ptr + lp_yy_amount_of_matched_text;

				lp_yy_current_state = lp_yy_get_previous_state();

				lp_yy_cp = lp_yy_c_buf_p;
				lp_yy_bp = lp_yytext_ptr + YY_MORE_ADJ;
				goto lp_yy_match;

			case EOB_ACT_LAST_MATCH:
				lp_yy_c_buf_p =
				&lp_yy_current_buffer->lp_yy_ch_buf[lp_yy_n_chars];

				lp_yy_current_state = lp_yy_get_previous_state();

				lp_yy_cp = lp_yy_c_buf_p;
				lp_yy_bp = lp_yytext_ptr + YY_MORE_ADJ;
				goto lp_yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of lp_yylex */


/* lp_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int lp_yy_get_next_buffer()
	{
	register char *dest = lp_yy_current_buffer->lp_yy_ch_buf;
	register char *source = lp_yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( lp_yy_c_buf_p > &lp_yy_current_buffer->lp_yy_ch_buf[lp_yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( lp_yy_current_buffer->lp_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( lp_yy_c_buf_p - lp_yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (lp_yy_c_buf_p - lp_yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( lp_yy_current_buffer->lp_yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		lp_yy_current_buffer->lp_yy_n_chars = lp_yy_n_chars = 0;

	else
		{
		int num_to_read =
			lp_yy_current_buffer->lp_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = lp_yy_current_buffer;

			int lp_yy_c_buf_p_offset =
				(int) (lp_yy_c_buf_p - b->lp_yy_ch_buf);

			if ( b->lp_yy_is_our_buffer )
				{
				int new_size = b->lp_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->lp_yy_buf_size += b->lp_yy_buf_size / 8;
				else
					b->lp_yy_buf_size *= 2;

				b->lp_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					lp_yy_flex_realloc( (void *) b->lp_yy_ch_buf,
							 b->lp_yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->lp_yy_ch_buf = 0;

			if ( ! b->lp_yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			lp_yy_c_buf_p = &b->lp_yy_ch_buf[lp_yy_c_buf_p_offset];

			num_to_read = lp_yy_current_buffer->lp_yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&lp_yy_current_buffer->lp_yy_ch_buf[number_to_move]),
			lp_yy_n_chars, num_to_read );

		lp_yy_current_buffer->lp_yy_n_chars = lp_yy_n_chars;
		}

	if ( lp_yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			lp_yyrestart( lp_yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			lp_yy_current_buffer->lp_yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	lp_yy_n_chars += number_to_move;
	lp_yy_current_buffer->lp_yy_ch_buf[lp_yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	lp_yy_current_buffer->lp_yy_ch_buf[lp_yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	lp_yytext_ptr = &lp_yy_current_buffer->lp_yy_ch_buf[0];

	return ret_val;
	}


/* lp_yy_get_previous_state - get the state just before the EOB char was reached */

static lp_yy_state_type lp_yy_get_previous_state()
	{
	register lp_yy_state_type lp_yy_current_state;
	register char *lp_yy_cp;

	lp_yy_current_state = lp_yy_start;
	lp_yy_current_state += YY_AT_BOL();
	lp_yy_state_ptr = lp_yy_state_buf;
	*lp_yy_state_ptr++ = lp_yy_current_state;

	for ( lp_yy_cp = lp_yytext_ptr + YY_MORE_ADJ; lp_yy_cp < lp_yy_c_buf_p; ++lp_yy_cp )
		{
		register YY_CHAR lp_yy_c = (*lp_yy_cp ? lp_yy_ec[YY_SC_TO_UI(*lp_yy_cp)] : 1);
		while ( lp_yy_chk[lp_yy_base[lp_yy_current_state] + lp_yy_c] != lp_yy_current_state )
			{
			lp_yy_current_state = (int) lp_yy_def[lp_yy_current_state];
			if ( lp_yy_current_state >= 133 )
				lp_yy_c = lp_yy_meta[(unsigned int) lp_yy_c];
			}
		lp_yy_current_state = lp_yy_nxt[lp_yy_base[lp_yy_current_state] + (unsigned int) lp_yy_c];
		*lp_yy_state_ptr++ = lp_yy_current_state;
		}

	return lp_yy_current_state;
	}


/* lp_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = lp_yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static lp_yy_state_type lp_yy_try_NUL_trans( lp_yy_state_type lp_yy_current_state )
#else
static lp_yy_state_type lp_yy_try_NUL_trans( lp_yy_current_state )
lp_yy_state_type lp_yy_current_state;
#endif
	{
	register int lp_yy_is_jam;

	register YY_CHAR lp_yy_c = 1;
	while ( lp_yy_chk[lp_yy_base[lp_yy_current_state] + lp_yy_c] != lp_yy_current_state )
		{
		lp_yy_current_state = (int) lp_yy_def[lp_yy_current_state];
		if ( lp_yy_current_state >= 133 )
			lp_yy_c = lp_yy_meta[(unsigned int) lp_yy_c];
		}
	lp_yy_current_state = lp_yy_nxt[lp_yy_base[lp_yy_current_state] + (unsigned int) lp_yy_c];
	lp_yy_is_jam = (lp_yy_current_state == 132);
	if ( ! lp_yy_is_jam )
		*lp_yy_state_ptr++ = lp_yy_current_state;

	return lp_yy_is_jam ? 0 : lp_yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void lp_yyunput( int c, register char *lp_yy_bp )
#else
static void lp_yyunput( c, lp_yy_bp )
int c;
register char *lp_yy_bp;
#endif
	{
	register char *lp_yy_cp = lp_yy_c_buf_p;

	/* undo effects of setting up lp_yytext */
	*lp_yy_cp = lp_yy_hold_char;

	if ( lp_yy_cp < lp_yy_current_buffer->lp_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = lp_yy_n_chars + 2;
		register char *dest = &lp_yy_current_buffer->lp_yy_ch_buf[
					lp_yy_current_buffer->lp_yy_buf_size + 2];
		register char *source =
				&lp_yy_current_buffer->lp_yy_ch_buf[number_to_move];

		while ( source > lp_yy_current_buffer->lp_yy_ch_buf )
			*--dest = *--source;

		lp_yy_cp += (int) (dest - source);
		lp_yy_bp += (int) (dest - source);
		lp_yy_current_buffer->lp_yy_n_chars =
			lp_yy_n_chars = lp_yy_current_buffer->lp_yy_buf_size;

		if ( lp_yy_cp < lp_yy_current_buffer->lp_yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--lp_yy_cp = (char) c;

	if ( c == '\n' )
		--lp_yylineno;

	lp_yytext_ptr = lp_yy_bp;
	lp_yy_hold_char = *lp_yy_cp;
	lp_yy_c_buf_p = lp_yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int lp_yyinput()
#else
static int input()
#endif
	{
	int c;

	*lp_yy_c_buf_p = lp_yy_hold_char;

	if ( *lp_yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* lp_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( lp_yy_c_buf_p < &lp_yy_current_buffer->lp_yy_ch_buf[lp_yy_n_chars] )
			/* This was really a NUL. */
			*lp_yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = lp_yy_c_buf_p - lp_yytext_ptr;
			++lp_yy_c_buf_p;

			switch ( lp_yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because lp_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					lp_yyrestart( lp_yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( lp_yywrap() )
						return EOF;

					if ( ! lp_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return lp_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					lp_yy_c_buf_p = lp_yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) lp_yy_c_buf_p;	/* cast for 8-bit char's */
	*lp_yy_c_buf_p = '\0';	/* preserve lp_yytext */
	lp_yy_hold_char = *++lp_yy_c_buf_p;

	lp_yy_current_buffer->lp_yy_at_bol = (c == '\n');
	if ( lp_yy_current_buffer->lp_yy_at_bol )
		++lp_yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void lp_yyrestart( FILE *input_file )
#else
void lp_yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! lp_yy_current_buffer )
		lp_yy_current_buffer = lp_yy_create_buffer( lp_yyin, YY_BUF_SIZE );

	lp_yy_init_buffer( lp_yy_current_buffer, input_file );
	lp_yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void lp_yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void lp_yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( lp_yy_current_buffer == new_buffer )
		return;

	if ( lp_yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*lp_yy_c_buf_p = lp_yy_hold_char;
		lp_yy_current_buffer->lp_yy_buf_pos = lp_yy_c_buf_p;
		lp_yy_current_buffer->lp_yy_n_chars = lp_yy_n_chars;
		}

	lp_yy_current_buffer = new_buffer;
	lp_yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (lp_yywrap()) processing, but the only time this flag
	 * is looked at is after lp_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	lp_yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void lp_yy_load_buffer_state( void )
#else
void lp_yy_load_buffer_state()
#endif
	{
	lp_yy_n_chars = lp_yy_current_buffer->lp_yy_n_chars;
	lp_yytext_ptr = lp_yy_c_buf_p = lp_yy_current_buffer->lp_yy_buf_pos;
	lp_yyin = lp_yy_current_buffer->lp_yy_input_file;
	lp_yy_hold_char = *lp_yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE lp_yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE lp_yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) lp_yy_flex_alloc( sizeof( struct lp_yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lp_yy_create_buffer()" );

	b->lp_yy_buf_size = size;

	/* lp_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->lp_yy_ch_buf = (char *) lp_yy_flex_alloc( b->lp_yy_buf_size + 2 );
	if ( ! b->lp_yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in lp_yy_create_buffer()" );

	b->lp_yy_is_our_buffer = 1;

	lp_yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void lp_yy_delete_buffer( YY_BUFFER_STATE b )
#else
void lp_yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == lp_yy_current_buffer )
		lp_yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->lp_yy_is_our_buffer )
		lp_yy_flex_free( (void *) b->lp_yy_ch_buf );

	lp_yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void lp_yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void lp_yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	lp_yy_flush_buffer( b );

	b->lp_yy_input_file = file;
	b->lp_yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->lp_yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->lp_yy_is_interactive = 0;
#else
	b->lp_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void lp_yy_flush_buffer( YY_BUFFER_STATE b )
#else
void lp_yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->lp_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->lp_yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->lp_yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->lp_yy_buf_pos = &b->lp_yy_ch_buf[0];

	b->lp_yy_at_bol = 1;
	b->lp_yy_buffer_status = YY_BUFFER_NEW;

	if ( b == lp_yy_current_buffer )
		lp_yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE lp_yy_scan_buffer( char *base, lp_yy_size_t size )
#else
YY_BUFFER_STATE lp_yy_scan_buffer( base, size )
char *base;
lp_yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) lp_yy_flex_alloc( sizeof( struct lp_yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lp_yy_scan_buffer()" );

	b->lp_yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->lp_yy_buf_pos = b->lp_yy_ch_buf = base;
	b->lp_yy_is_our_buffer = 0;
	b->lp_yy_input_file = 0;
	b->lp_yy_n_chars = b->lp_yy_buf_size;
	b->lp_yy_is_interactive = 0;
	b->lp_yy_at_bol = 1;
	b->lp_yy_fill_buffer = 0;
	b->lp_yy_buffer_status = YY_BUFFER_NEW;

	lp_yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE lp_yy_scan_string( lp_yyconst char *lp_yy_str )
#else
YY_BUFFER_STATE lp_yy_scan_string( lp_yy_str )
lp_yyconst char *lp_yy_str;
#endif
	{
	int len;
	for ( len = 0; lp_yy_str[len]; ++len )
		;

	return lp_yy_scan_bytes( lp_yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE lp_yy_scan_bytes( lp_yyconst char *bytes, int len )
#else
YY_BUFFER_STATE lp_yy_scan_bytes( bytes, len )
lp_yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	lp_yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) lp_yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in lp_yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = lp_yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in lp_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->lp_yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void lp_yy_push_state( int new_state )
#else
static void lp_yy_push_state( new_state )
int new_state;
#endif
	{
	if ( lp_yy_start_stack_ptr >= lp_yy_start_stack_depth )
		{
		lp_yy_size_t new_size;

		lp_yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = lp_yy_start_stack_depth * sizeof( int );

		if ( ! lp_yy_start_stack )
			lp_yy_start_stack = (int *) lp_yy_flex_alloc( new_size );

		else
			lp_yy_start_stack = (int *) lp_yy_flex_realloc(
					(void *) lp_yy_start_stack, new_size );

		if ( ! lp_yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	lp_yy_start_stack[lp_yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void lp_yy_pop_state()
	{
	if ( --lp_yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(lp_yy_start_stack[lp_yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int lp_yy_top_state()
	{
	return lp_yy_start_stack[lp_yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void lp_yy_fatal_error( lp_yyconst char msg[] )
#else
static void lp_yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine lp_yyless() so it works in section 3 code. */

#undef lp_yyless
#define lp_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up lp_yytext. */ \
		lp_yytext[lp_yyleng] = lp_yy_hold_char; \
		lp_yy_c_buf_p = lp_yytext + n; \
		lp_yy_hold_char = *lp_yy_c_buf_p; \
		*lp_yy_c_buf_p = '\0'; \
		lp_yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef lp_yytext_ptr
#ifdef YY_USE_PROTOS
static void lp_yy_flex_strncpy( char *s1, lp_yyconst char *s2, int n )
#else
static void lp_yy_flex_strncpy( s1, s2, n )
char *s1;
lp_yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int lp_yy_flex_strlen( lp_yyconst char *s )
#else
static int lp_yy_flex_strlen( s )
lp_yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *lp_yy_flex_alloc( lp_yy_size_t size )
#else
static void *lp_yy_flex_alloc( size )
lp_yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *lp_yy_flex_realloc( void *ptr, lp_yy_size_t size )
#else
static void *lp_yy_flex_realloc( ptr, size )
void *ptr;
lp_yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void lp_yy_flex_free( void *ptr )
#else
static void lp_yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	lp_yylex();
	return 0;
	}
#endif

