
// ========================================================================= //
// 1. Definitions                                                            //
// ========================================================================= //

let proc = "toto"
let bit_order = "uppermost" // Be careful ; this is not the convention used in PPC manuals.
let gliss_isize = "32"

// ------------------------------------------------------------------------- //
// 1.1 Constants                                                             //
// ------------------------------------------------------------------------- //

let REGS = 5

// 1.1.1 CR indexes (int)

let LT = 3
let GT = 2
let EQ = 1
let SO = 0

// 1.1.2 CR indexes (float)
let FX = 3
let FEX= 2
let VX = 1
let OX = 0

// 1.1.3 XER indexes
let SO_XER = 31
let OV_XER = 30
let CA_XER = 29

// 1.1.4 MSR indexes
let MSR_POW = 18
let MSR_ILE = 16
let MSR_EE = 15
let MSR_PR = 14
let MSR_FP = 13
let MSR_ME = 12
let MSR_FE0 = 11
let MSR_SE = 10
let MSR_BE = 9
let MSR_FE1 = 8
let MSR_IP = 6
let MSR_IR = 5
let MSR_DR = 4
let MSR_RI = 1
let MSR_LE = 0




// ------------------------------------------------------------------------- //
// 1.2 Types                                                                 //
// ------------------------------------------------------------------------- //
type u1		= card ( 1 )
type u2		= card(2)
type u4		= card ( 4 )
type u8		= card ( 8 )
type u16	= card(16)
type u32	= card ( 32 )
type u64	= card ( 64 )

type s2		= int(2)
type s4		= int ( 4 )
type s8		= int ( 8 )
type s16	= int(16)
type s32	= int ( 32 )
type s64	= int ( 64 )

type flot      = float ( 52 , 12 )
type flots     = float ( 23 , 9 )
type xflot     = float ( 64 , 16 )
type sflot     = float ( 31 , 9 )

// ------------------------------------------------------------------------- //
// 1.3  Memory and registers                                                 //
// ------------------------------------------------------------------------- //

// 1.3.1 GEP registers

reg PIA     [ 1 , s32 ]	ppc = 1

reg CIA     [ 1 , s32 ]	pc = 1
reg NIA     [ 1 , s32 ]	npc = 1

// 1.3.2 UISA model registers

mem M		[ 32 , u8 ]
reg R4		[ 8 , u4 ]
reg R4s		[ 8, s4]
reg R8		[8, u8]
reg R8s		[8, s8]
reg R16		[16, u16]
reg R16s	[16, s16]
reg R32s	[ 2 ** REGS , s32 ]
reg R32		[ 2 ** REGS , u32 ]
reg FPR		[ 2 ** REGS , flot ]

// some "bigger" aliases
reg R32_01 [1, u64]	alias = R32[0]
reg R32_23 [1, u64]	alias = R32[2]
reg R32_s01 [1, s64]	alias = R32[0]
reg R32_s23 [1, s64]	alias = R32[2]
reg R32s_01 [1, u64]	alias = R32s[0]
reg R32s_23 [1, u64]	alias = R32s[2]
reg R32s_s01 [1, s64]	alias = R32s[0]
reg R32s_s23 [1, s64]	alias = R32s[2]

reg R16_0123 [1, u64]	alias = R16[0]
reg R16_4567 [1, u64]	alias = R16[4]
reg R16s_0123 [1, s64]	alias = R16s[0]
reg R16s_4567 [1, s64]	alias = R16s[4]
reg R4_0123 [1, u16]	alias = R4[0]
reg R4_4567 [1, u16]	alias = R4[4]
reg R4s_0123 [1, s16]	alias = R4s[0]
reg R4s_4567 [1, s16]	alias = R4s[4]


// ------------------------------------------------------------------------- //
// 1.4  Internal variables and aliases for subparts                          //
// ------------------------------------------------------------------------- //


var v8       [ 1 , u8 ]
var vs8      [ 1 , s8 ]
var v8_1     [ 1 , u8 ]
var vs8_1    [ 1 , s8 ]

reg v8_a	[ 1, u4]	alias = v8[0]
reg v8_b	[ 1, u4]	alias = v8[4]
reg vs8_a	[ 1, s4]	alias = vs8[0]
reg vs8_b	[ 1, s4]	alias = vs8[4]
reg v8_1_a	[ 1, u4]	alias = v8_1[0]
reg v8_1_b	[ 1, u4]	alias = v8_1[4]
reg vs8_1_a	[ 1, s4]	alias = vs8_1[0]
reg vs8_1_b	[ 1, s4]	alias = vs8_1[4]


var v4       [ 1 , u4 ]
var vs4      [ 1 , s4 ]
var v4_1     [ 1 , u4 ]
var vs4_1    [ 1 , s4 ]

reg v4_a	[ 1, u2]	alias = v4[0]
reg v4_b	[ 1, u2]	alias = v4[2]
reg vs4_a	[ 1, s2]	alias = vs4[0]
reg vs4_b	[ 1, s2]	alias = vs4[2]
reg v4_1_a	[ 1, u2]	alias = v4_1[0]
reg v4_1_b	[ 1, u2]	alias = v4_1[2]
reg vs4_1_a	[ 1, s2]	alias = vs4_1[0]
reg vs4_1_b	[ 1, s2]	alias = vs4_1[2]


var v16    [ 1 , u16 ]
var vs16   [ 1 , s16 ]
var v16_1    [ 1 , u16 ]
var vs16_1   [ 1 , s16 ]

reg v16_a	[ 1, u8]	alias = v16[0]
reg v16_b	[ 1, u8]	alias = v16[8]
reg vs16_a	[ 1, s8]	alias = vs16[0]
reg vs16_b	[ 1, s8]	alias = vs16[8]
reg v16_1_a	[ 1, u8]	alias = v16_1[0]
reg v16_1_b	[ 1, u8]	alias = v16_1[8]
reg vs16_1_a	[ 1, s8]	alias = vs16_1[0]
reg vs16_1_b	[ 1, s8]	alias = vs16_1[8]


var v32      [ 1 , u32 ]
var vs32     [ 1 , s32 ]

reg v32_a	[ 1, u16]	alias = v32[0]
reg v32_b	[ 1, u16]	alias = v32[16]
reg vs32_a	[ 1, s16]	alias = vs32[0]
reg vs32_b	[ 1, s16]	alias = vs32[16]
reg v32_0	[1, u8]		alias = v32<7..0>
reg v32_1	[1, u8]		alias = v32<15..8>
reg v32_2	[1, u8]		alias = v32<23..16>
reg v32_3	[1, u8]		alias = v32<31..24>
reg vs32_0	[1, s8]		alias = vs32[0]
reg vs32_1	[1, s8]		alias = vs32[8]
reg vs32_2	[1, s8]		alias = vs32[16]
reg vs32_3	[1, s8]		alias = vs32[24]


var vs64   [ 1 , s64 ]
var v64    [ 1 , u64 ]

reg v64_a	[ 1, u32]	alias = v64[0]
reg v64_b	[ 1, u32]	alias = v64[32]
reg vs64_a	[ 1, s32]	alias = vs64[0]
reg vs64_b	[ 1, s32]	alias = vs64[32]

reg v64_01	[1, u16]	alias = v64[0]
reg v64_23	[1, u16]	alias = v64[16]
reg v64_45	[1, u16]	alias = v64[32]
reg v64_67	[1, u16]	alias = v64[48]

reg vs64_01	[1, s16]	alias = vs64[0]
reg vs64_23	[1, s16]	alias = vs64[16]
reg vs64_45	[1, s16]	alias = vs64[32]
reg vs64_67	[1, s16]	alias = vs64[48]

reg v64_0	[1, u8]		alias = v64[0]
reg v64_1	[1, u8]		alias = v64[8]
reg v64_2	[1, u8]		alias = v64[16]
reg v64_3	[1, u8]		alias = v64[24]
reg v64_4	[1, u8]		alias = v64[32]
reg v64_5	[1, u8]		alias = v64[40]
reg v64_6	[1, u8]		alias = v64[48]
reg v64_7	[1, u8]		alias = v64[56]

reg vs64_0	[1, s8]		alias = vs64[0]
reg vs64_1	[1, s8]		alias = vs64[8]
reg vs64_2	[1, s8]		alias = vs64[16]
reg vs64_3	[1, s8]		alias = vs64[24]
reg vs64_4	[1, s8]		alias = vs64[32]
reg vs64_5	[1, s8]		alias = vs64[40]
reg vs64_6	[1, s8]		alias = vs64[48]
reg vs64_7	[1, s8]		alias = vs64[56]






// ------------------------------------------------------------------------- //
// 1.5 Addressing Modes                                                      //
// ------------------------------------------------------------------------- //




// juste pour tester
mode _A = _B | _C | _D

mode _B(n:int(6)) = n
	syntax = format("B%d", n)
	image  = format("00%6b", n)

mode _C(n:int(6)) = n
	syntax = format("C%d", n)
	image  = format("01%6b", n)

mode _D = _E | _F

mode _E(n:int(6)) = n
	syntax = format("E%d", n)
	image  = format("10%6b", n)

mode _F(n:int(6)) = n
	syntax = format("F%d", n)
	image  = format("11%6b", n)



// ------------------------------------------------------------------------- //
// 1.6 Macros                                                                //
// ------------------------------------------------------------------------- //






// ========================================================================= //
//  2. Instructions                                                          //
// ========================================================================= //

op instruction ( x : allinstr)
  syntax = x.syntax
  image = x.image
  action = { x.action ; }

op allinstr = opA | opB | tmp_test | aliased_index

op tmp_test(p: card(8))
	syntax = format("test %d", p)
	image = "00000000 00000000 00000000 00000000"
// !!BUG!! format("10010001 %5b", p) -> p : card(32)
	action = {
		v32 = if p < 8 then p else 0 endif ;
	}

op opA(x: card(5), y : card(5), z : card(5))
	syntax = format("opA %d,%d,%d", x, y, z)
	image = "00000000 00000000 00000000 00000001"
	action = {

	// test 1, aliased registers refering to parts of a bigger register
		v32 = 0x12345678;
		R32s[5] = v32_0;
		R32s[6] = v32_1;
		R32s[7] = v32_2;
		R32s[8] = v32_3;
		v32_0 = 0xAA;
		v32_1 = 0xBB;
		v32_2 = 0xCC;
		v32_3 = 0xDD;

//		R32s[9] = v32;
//		R32_01 = 0x1234567890ABCDEF;
//		R4_0123 = 0xABCD;
	}

op opB()
	syntax = "opB"
	image = "00000000 00000000 00000000 00000010"
	action = {
	}





op init ()
   action = {
	R32[0] = 0x12345678;
           }


op aliased_index()
	syntax = "aliased_index"
	image = "00000000 00000000 00000000 00000011"
	action = {
		R32[v32_b] = 0;
	}
