/* Generated by gep (117/07/07 15:08:28) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_PPC_INCLUDE_PPC_DECODE_TABLE_H
#define GLISS_PPC_INCLUDE_PPC_DECODE_TABLE_H

#if defined(__cplusplus)
extern  "C"
{
#endif

#include <assert.h>
#include <ppc/api.h>
#include <ppc/macros.h>
#include <ppc/gen_int.h>

#include <ppc/mem.h>
#include <ppc/grt.h>
#include <ppc/error.h>
#include <ppc/gen_int.h>
#include <ppc/loader.h>
#include <ppc/syscall.h>
#include <ppc/sysparm.h>
#include <ppc/code.h>
#include <ppc/exception.h>
#include <ppc/fpi.h>
#include <ppc/env.h>
#include <ppc/vea.h>


/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, "%s\n", (e))

/* hack : Enable cache if gep option is on 
(without having to  move decode.c to templates) */


/* decoder macros */
#define __EXTRACT_32(mask, offset_mask, inst)	  ( (uint32_t)((inst) & (mask)) >> (offset_mask))
#define __EXTS_32(mask, offset_mask, inst, n)    (((int32_t)__EXTRACT_32(mask, offset_mask, inst) << (32 - (n))) >> (32 - (n)))
/* decoded parameters should be 64 bit max */
#define __EXTRACT_CISC(mask, inst)	extract_mask(inst, mask)
#define __EXTS_CISC(mask, inst, n)	(((int64_t)__EXTRACT_CISC(mask, inst) << (64 - (n))) >> (64 - (n)))


static ppc_inst_t *ppc_instr_UNKNOWN_decode(code_t *code_inst)
{
	ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_UNKNOWN;

	return inst;
}

static ppc_inst_t *ppc_instr_WRTEE_D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0X8000}; /* 00000000000000001000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_WRTEE_D;

	/* put other parameters */
	/* complex decoding */
	PPC_WRTEE_D_x_x_E = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_WRTEE_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_WRTEE_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_WRTEE_RD_x_x_rS = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_TLBWE_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_TLBWE;

	return inst;
}

static ppc_inst_t *ppc_instr_TLBSYNC_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_TLBSYNC;

	return inst;
}

static ppc_inst_t *ppc_instr_TLBSX_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_TLBSX_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_TLBSX_RD__RD_x_x_rB = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_TLBSX_RD__RD_x_x_rA = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_TLBRE_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_TLBRE;

	return inst;
}

static ppc_inst_t *ppc_instr_TLBIVAX_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_TLBIVAX_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_TLBIVAX_RD__RD_x_x_rB = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_TLBIVAX_RD__RD_x_x_rA_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MSYNC_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_MSYNC;

	return inst;
}

static ppc_inst_t *ppc_instr_MTDCR_D__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTDCR_D__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTDCR_D__RD_x_x_rD = (0 | __EXTRACT_CISC(&mask0, code_inst->mask))
;
	PPC_MTDCR_D__RD_x_x_DCRN = ((0 | ((__EXTRACT_CISC(&mask1, code_inst->mask) & 31) << 0)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 31) << 5))
;

	return inst;

}

static ppc_inst_t *ppc_instr_MFDCR__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFDCR__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_MFDCR__RD__D_x_x_DCRN = ((0 | ((__EXTRACT_CISC(&mask1, code_inst->mask) & 31) << 0)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 31) << 5))
;
	PPC_MFDCR__RD__D_x_x_rD = (0 | __EXTRACT_CISC(&mask0, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_MBAR_D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MBAR_D;

	/* put other parameters */
	/* complex decoding */
	PPC_MBAR_D_x_x_MO = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ICBT_D__RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ICBT_D__RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ICBT_D__RD__RD_x_x_rA_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ICBT_D__RD__RD_x_x_CT = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ICBT_D__RD__RD_x_x_rB = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_XOR__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_XOR__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_XOR__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_XOR__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_XOR__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_XOR_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_XOR_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_XOR_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_XOR_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_XOR_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ICBI_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ICBI_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ICBI_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ICBI_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBZ_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBZ_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBZ_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DCBZ_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBTST_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBTST_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBTST_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DCBTST_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBT_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBT_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBT_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DCBT_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBST_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBST_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBST_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DCBST_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBI_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBI_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBI_RD__RD_x_x_rb_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DCBI_RD__RD_x_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBF_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBF_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBF_RD__RD_x_x_rb_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DCBF_RD__RD_x_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBA_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBA_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBA_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DCBA_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_TW_D_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_TW_D_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_TW_D_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_TW_D_RD_RD_x_x_to = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_TW_D_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MFCR_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFCR_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MFCR_RD_x_x_rd = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFZEO__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFZEO__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFZEO__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFZEO__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFZEO_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFZEO_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFZEO_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFZEO_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFZE__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFZE__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFZE__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFZE__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFZE_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFZE_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFZE_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFZE_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFMEO__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFMEO__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFMEO__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFMEO__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFMEO_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFMEO_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFMEO_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFMEO_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFME__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFME__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFME__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFME__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFME_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFME_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFME_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFME_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFEO__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFEO__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFEO__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFEO__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFEO__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFEO_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFEO_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFEO_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFEO_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFEO_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFE__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFE__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFE__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFE__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFE__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFE_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFE_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFE_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFE_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFE_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFCO__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFCO__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFCO__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFCO__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFCO__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFCO_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFCO_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFCO_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFCO_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFCO_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFC__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFC__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFC__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFC__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFC__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFC_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFC_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFC_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFC_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFC_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFO__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFO__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFO__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFO__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFO__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFO_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFO_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFO_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBFO_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBFO_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBF__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBF__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBF__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBF__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBF__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBF_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBF_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBF_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SUBF_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SUBF_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STWCX__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWCX__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STWCX__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STWCX__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STWCX__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STWBRX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWBRX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STWBRX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STWBRX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STWBRX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STSWI_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STSWI_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_STSWI_RD_RD_D_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STSWI_RD_RD_D_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STSWI_RD_RD_D_x_x_NB_NB = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STSWX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STSWX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STSWX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STSWX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STSWX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STHBRX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STHBRX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STHBRX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STHBRX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STHBRX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STWUX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWUX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STWUX_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STWUX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STWUX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STWX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STWX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STWX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STWX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STHUX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STHUX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STHUX_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STHUX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STHUX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STHX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STHX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STHX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STHX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STHX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STBUX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STBUX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STBUX_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STBUX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STBUX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_STBX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STBX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STBX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_STBX_RD_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_STBX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SRW__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRW__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SRW__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SRW__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SRW__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SRW_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRW_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SRW_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SRW_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SRW_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SRAWI__RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRAWI__RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_SRAWI__RD_RD_D_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SRAWI__RD_RD_D_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SRAWI__RD_RD_D_x_x_sh = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SRAWI_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRAWI_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_SRAWI_RD_RD_D_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SRAWI_RD_RD_D_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SRAWI_RD_RD_D_x_x_sh = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SRAW__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRAW__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SRAW__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SRAW__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SRAW__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SRAW_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRAW_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SRAW_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SRAW_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SRAW_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SLW__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SLW__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SLW__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SLW__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SLW__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SLW_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SLW_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SLW_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SLW_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SLW_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ORC__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ORC__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ORC__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ORC__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ORC__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ORC_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ORC_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ORC_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ORC_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ORC_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_OR__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_OR__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_OR__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_OR__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_OR__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_OR_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_OR_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_OR_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_OR_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_OR_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MTSPR_D_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0XFF800}; /* 00000000000011111111100000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTSPR_D_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTSPR_D_RD_x_x_rs = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MTSPR_D_RD_x_x_spr = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MTMSR_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTMSR_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTMSR_RD_x_x_rs_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MFSPR_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XFF800}; /* 00000000000011111111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFSPR_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_MFSPR_RD_D_x_x_spr = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MFSPR_RD_D_x_x_rd_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MFMSR_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFMSR_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MFMSR_RD_x_x_rd_r = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_NOR__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NOR__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_NOR__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_NOR__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_NOR__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_NOR_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NOR_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_NOR_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_NOR_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_NOR_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_NEGO__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NEGO__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_NEGO__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_NEGO__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_NEGO_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NEGO_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_NEGO_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_NEGO_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_NEG__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NEG__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_NEG__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_NEG__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_NEG_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NEG_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_NEG_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_NEG_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_NAND__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NAND__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_NAND__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_NAND__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_NAND__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_NAND_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NAND_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_NAND_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_NAND_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_NAND_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLWO__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLWO__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLWO__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MULLWO__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_MULLWO__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLWO_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLWO_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLWO_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MULLWO_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_MULLWO_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLW__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLW__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLW__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MULLW__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_MULLW__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLW_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLW_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLW_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MULLW_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_MULLW_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MULHWU__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULHWU__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MULHWU__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MULHWU__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_MULHWU__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MULHWU_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULHWU_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MULHWU_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MULHWU_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_MULHWU_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MULHW__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULHW__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MULHW__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MULHW__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_MULHW__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MULHW_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULHW_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MULHW_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MULHW_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_MULHW_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MTSPR_S_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XFF800}; /* 00000000000011111111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTSPR_S_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTSPR_S_RD_x_x_spr = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MTSPR_S_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MCRXR_CRFD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3800000}; /* 00000011100000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MCRXR_CRFD;

	/* put other parameters */
	/* complex decoding */
	PPC_MCRXR_CRFD_x_x_crfd = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MTCRF_D_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XFF000}; /* 00000000000011111111000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTCRF_D_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTCRF_D_RD_x_x_crm = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MTCRF_D_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MFSPR_RD_S_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XFF800}; /* 00000000000011111111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFSPR_RD_S;

	/* put other parameters */
	/* complex decoding */
	PPC_MFSPR_RD_S_x_x_spr = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_MFSPR_RD_S_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LWARX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWARX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LWARX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LWARX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LWARX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LWBRX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWBRX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LWBRX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LWBRX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LWBRX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LWZUX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWZUX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LWZUX_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LWZUX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LWZUX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LWZX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWZX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LWZX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LWZX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LWZX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LHZUX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHZUX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LHZUX_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LHZUX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LHZUX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LHZX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHZX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LHZX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LHZX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LHZX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LHBRX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHBRX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LHBRX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LHBRX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LHBRX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LHAUX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHAUX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LHAUX_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LHAUX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LHAUX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LHAX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHAX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LHAX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LHAX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LHAX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LBZUX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LBZUX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LBZUX_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LBZUX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LBZUX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_LBZX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LBZX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LBZX_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_LBZX_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_LBZX_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ISEL_RD__RD__R5B__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0X7C0}; /* 00000000000000000000011111000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ISEL_RD__RD__R5B__D;

	/* put other parameters */
	/* complex decoding */
	PPC_ISEL_RD__RD__R5B__D_x_x_rB = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ISEL_RD__RD__R5B__D_x_x_crb = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ISEL_RD__RD__R5B__D_x_x_rD = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_ISEL_RD__RD__R5B__D_x_x_rA_r = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_EXTSH__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EXTSH__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_EXTSH__RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_EXTSH__RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_EXTSH_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EXTSH_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_EXTSH_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_EXTSH_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_EXTSB__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EXTSB__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_EXTSB__RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_EXTSB__RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_EXTSB_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EXTSB_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_EXTSB_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_EXTSB_RD_RD_x_x_rs = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_EQV__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EQV__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_EQV__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_EQV__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_EQV__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_EQV_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EQV_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_EQV_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_EQV_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_EQV_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWUO__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWUO__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWUO__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DIVWUO__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_DIVWUO__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWUO_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWUO_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWUO_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DIVWUO_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_DIVWUO_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWU__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWU__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWU__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DIVWU__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_DIVWU__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWU_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWU_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWU_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DIVWU_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_DIVWU_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWO__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWO__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWO__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DIVWO__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_DIVWO__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWO_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWO_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWO_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DIVWO_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_DIVWO_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVW__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVW__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVW__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DIVW__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_DIVW__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVW_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVW_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVW_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_DIVW_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_DIVW_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_CNTLZW__RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CNTLZW__RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_CNTLZW__RD__RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_CNTLZW__RD__RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_CNTLZW_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CNTLZW_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_CNTLZW_RD__RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_CNTLZW_RD__RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_CMPL_D_D_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X3800000}; /* 00000011100000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CMPL_D_D_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_CMPL_D_D_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_CMPL_D_D_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_CMPL_D_D_RD_RD_x_x_crfd = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_CMPL_D_D_RD_RD_x_x_l = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_CMP_D_D_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X3800000}; /* 00000011100000000000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X200000}; /* 00000000001000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CMP_D_D_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_CMP_D_D_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_CMP_D_D_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_CMP_D_D_RD_RD_x_x_crfd = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_CMP_D_D_RD_RD_x_x_l = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ANDC__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ANDC__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ANDC__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ANDC__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ANDC__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ANDC_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ANDC_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ANDC_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ANDC_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ANDC_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_AND__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_AND__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_AND__RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_AND__RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_AND__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_AND_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_AND_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_AND_RD_RD_RD_x_x_ra = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_AND_RD_RD_RD_x_x_rs_r = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_AND_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDZEO__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDZEO__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDZEO__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDZEO__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDZEO_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDZEO_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDZEO_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDZEO_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDZE__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDZE__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDZE__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDZE__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDZE_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDZE_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDZE_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDZE_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDMEO__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDMEO__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDMEO__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDMEO__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDMEO_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDMEO_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDMEO_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDMEO_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDME__RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDME__RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDME__RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDME__RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDME_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDME_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDME_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDME_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDEO__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDEO__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDEO__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDEO__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDEO__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDEO_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDEO_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDEO_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDEO_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDEO_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDE__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDE__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDE__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDE__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDE__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDE_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDE_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDE_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDE_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDE_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDCO__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDCO__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDCO__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDCO__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDCO__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDCO_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDCO_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDCO_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDCO_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDCO_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDC__RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDC__RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDC__RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDC__RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDC__RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDC_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDC_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDC_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDC_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDC_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDSS_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0X1}; /* 00000000000000000000000000000001 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDSS_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDSS_RD_RD_RD_x_x_Rc = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_ADDSS_RD_RD_RD_x_x_Oe = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_ADDSS_RD_RD_RD_x_x_rb_r = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_ADDSS_RD_RD_RD_x_x_rd = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_ADDSS_RD_RD_RD_x_x_ra_r = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_XORIS_RD__RD__X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask5 = {tab_mask5, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_XORIS_RD__RD__X;

	/* put other parameters */
	/* complex decoding */
	PPC_E_XORIS_RD__RD__X_x_x_rA_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_XORIS_RD__RD__X_x_x_rS_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_XORIS_RD__RD__X_x_x_F = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_XORIS_RD__RD__X_x_x_SCL = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_XORIS_RD__RD__X_x_x_Rc = __EXTRACT_CISC(&mask4, code_inst->mask);
	PPC_E_XORIS_RD__RD__X_x_x_UI8 = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_SUBFICS_RD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask5 = {tab_mask5, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_SUBFICS_RD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_SUBFICS_RD__RD__D_x_x_rD_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_SUBFICS_RD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_SUBFICS_RD__RD__D_x_x_F = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_SUBFICS_RD__RD__D_x_x_SCL = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_SUBFICS_RD__RD__D_x_x_Rc = __EXTRACT_CISC(&mask4, code_inst->mask);
	PPC_E_SUBFICS_RD__RD__D_x_x_UI8 = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_STMW_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_STMW_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_STMW_RD__D_LP_RD_RP__x_x_D8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_STMW_RD__D_LP_RD_RP__x_x_rS = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_STMW_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_STWU_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_STWU_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_STWU_RD__D_LP_RD_RP__x_x_D8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_STWU_RD__D_LP_RD_RP__x_x_rS = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_STWU_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_STW_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_STW_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_STW_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_STW_RD__D_LP_RD_RP__x_x_rS = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_STW_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_STHU_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_STHU_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_STHU_RD__D_LP_RD_RP__x_x_D8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_STHU_RD__D_LP_RD_RP__x_x_rS = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_STHU_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_STH_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_STH_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_STH_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_STH_RD__D_LP_RD_RP__x_x_rS = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_STH_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_STBU_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_STBU_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_STBU_RD__D_LP_RD_RP__x_x_D8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_STBU_RD__D_LP_RD_RP__x_x_rS = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_STBU_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_STB_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_STB_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_STB_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_STB_RD__D_LP_RD_RP__x_x_rS = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_STB_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_SRWIS_RD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0X1}; /* 00000000000000000000000000000001 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_SRWIS_RD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_SRWIS_RD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_SRWIS_RD__RD__D_x_x_rS_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_SRWIS_RD__RD__D_x_x_Rc = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_SRWIS_RD__RD__D_x_x_SH = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_SLWIS_RD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0X1}; /* 00000000000000000000000000000001 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_SLWIS_RD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_SLWIS_RD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_SLWIS_RD__RD__D_x_x_rS_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_SLWIS_RD__RD__D_x_x_Rc = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_SLWIS_RD__RD__D_x_x_SH = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_RLWINM_RD__RD__D__D__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X3E}; /* 00000000000000000000000000111110 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0X7C0}; /* 00000000000000000000011111000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_RLWINM_RD__RD__D__D__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_RLWINM_RD__RD__D__D__D_x_x_rA_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_RLWINM_RD__RD__D__D__D_x_x_rS_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_RLWINM_RD__RD__D__D__D_x_x_SH = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_RLWINM_RD__RD__D__D__D_x_x_ME = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_RLWINM_RD__RD__D__D__D_x_x_MB = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_RLWIMI_RD__RD__D__D__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0X3E}; /* 00000000000000000000000000111110 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0X7C0}; /* 00000000000000000000011111000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_RLWIMI_RD__RD__D__D__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_RLWIMI_RD__RD__D__D__D_x_x_rA_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_RLWIMI_RD__RD__D__D__D_x_x_rS_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_RLWIMI_RD__RD__D__D__D_x_x_SH = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_RLWIMI_RD__RD__D__D__D_x_x_ME = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_RLWIMI_RD__RD__D__D__D_x_x_MB = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_RLWIS_RD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0X1}; /* 00000000000000000000000000000001 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_RLWIS_RD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_RLWIS_RD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_RLWIS_RD__RD__D_x_x_rS_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_RLWIS_RD__RD__D_x_x_Rc = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_RLWIS_RD__RD__D_x_x_SH = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_RLWS_RD__RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {     0X1}; /* 00000000000000000000000000000001 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_RLWS_RD__RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_RLWS_RD__RD__RD_x_x_rA_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_RLWS_RD__RD__RD_x_x_rS_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_RLWS_RD__RD__RD_x_x_Rc = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_RLWS_RD__RD__RD_x_x_rB_idx = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_ORIS_RD__RD__X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask5 = {tab_mask5, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_ORIS_RD__RD__X;

	/* put other parameters */
	/* complex decoding */
	PPC_E_ORIS_RD__RD__X_x_x_rA_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_ORIS_RD__RD__X_x_x_rS_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_ORIS_RD__RD__X_x_x_F = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_ORIS_RD__RD__X_x_x_SCL = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_ORIS_RD__RD__X_x_x_Rc = __EXTRACT_CISC(&mask4, code_inst->mask);
	PPC_E_ORIS_RD__RD__X_x_x_UI8 = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_OR2IS_RD__X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_OR2IS_RD__X;

	/* put other parameters */
	/* complex decoding */
	PPC_E_OR2IS_RD__X_x_x_UI = ((0 | ((__EXTRACT_CISC(&mask1, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_OR2IS_RD__X_x_x_rD_idx = (0 | __EXTRACT_CISC(&mask0, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_OR2I_RD__X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_OR2I_RD__X;

	/* put other parameters */
	/* complex decoding */
	PPC_E_OR2I_RD__X_x_x_UI = ((0 | ((__EXTRACT_CISC(&mask1, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_OR2I_RD__X_x_x_rD_idx = (0 | __EXTRACT_CISC(&mask0, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_MULL2I_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_MULL2I_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_MULL2I_RD__D_x_x_SI = ((0 | ((__EXTRACT_CISC(&mask0, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_MULL2I_RD__D_x_x_rA_idx = (0 | __EXTRACT_CISC(&mask1, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_MULLI_RD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_MULLI_RD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_MULLI_RD__RD__D_x_x_rD_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_MULLI_RD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_MULLI_RD__RD__D_x_x_F = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_MULLI_RD__RD__D_x_x_UI8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_MULLI_RD__RD__D_x_x_SCL = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_MCRF_CRD__CRD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1C0000}; /* 00000000000111000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3800000}; /* 00000011100000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_MCRF_CRD__CRD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_MCRF_CRD__CRD_x_x_crS = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_MCRF_CRD__CRD_x_x_crD = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LMW_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LMW_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LMW_RD__D_LP_RD_RP__x_x_D8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LMW_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LMW_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LWZU_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LWZU_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LWZU_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LWZU_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LWZU_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LWZ_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LWZ_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LWZ_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LWZ_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LWZ_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LIS_RD__X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LIS_RD__X;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LIS_RD__X_x_x_UI = ((0 | ((__EXTRACT_CISC(&mask1, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_LIS_RD__X_x_x_rD_idx = (0 | __EXTRACT_CISC(&mask0, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_LI_RD__X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0X7800}; /* 00000000000000000111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LI_RD__X;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LI_RD__X_x_x_LI20 = (((0 | ((__EXTRACT_CISC(&mask1, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 15) << 16)) | ((__EXTRACT_CISC(&mask3, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_LI_RD__X_x_x_rD_idx = (0 | __EXTRACT_CISC(&mask0, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_LHZU_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LHZU_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LHZU_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LHZU_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LHZU_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LHZ_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LHZ_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LHZ_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LHZ_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LHZ_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LHAU_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LHAU_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LHAU_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LHAU_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LHAU_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LHA_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LHA_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LHA_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LHA_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LHA_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LBZU_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LBZU_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LBZU_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LBZU_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LBZU_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_LBZ_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_LBZ_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_LBZ_RD__D_LP_RD_RP__x_x_D = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_LBZ_RD__D_LP_RD_RP__x_x_rD = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_LBZ_RD__D_LP_RD_RP__x_x_rA_r = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CRXOR_CRBD__CRBD__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CRXOR_CRBD__CRBD__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CRXOR_CRBD__CRBD__CRBD_x_x_crbA_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CRXOR_CRBD__CRBD__CRBD_x_x_crbD_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CRXOR_CRBD__CRBD__CRBD_x_x_crbB_i = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CRORC_CRBD__CRBD__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CRORC_CRBD__CRBD__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CRORC_CRBD__CRBD__CRBD_x_x_crbA_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CRORC_CRBD__CRBD__CRBD_x_x_crbD_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CRORC_CRBD__CRBD__CRBD_x_x_crbB_i = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CROR_CRBD__CRBD__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CROR_CRBD__CRBD__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CROR_CRBD__CRBD__CRBD_x_x_crbA_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CROR_CRBD__CRBD__CRBD_x_x_crbD_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CROR_CRBD__CRBD__CRBD_x_x_crbB_i = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CRNOR_CRBD__CRBD__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CRNOR_CRBD__CRBD__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CRNOR_CRBD__CRBD__CRBD_x_x_crbA_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CRNOR_CRBD__CRBD__CRBD_x_x_crbD_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CRNOR_CRBD__CRBD__CRBD_x_x_crbB_i = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CRNAND_CRBD__CRBD__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CRNAND_CRBD__CRBD__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CRNAND_CRBD__CRBD__CRBD_x_x_crbA_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CRNAND_CRBD__CRBD__CRBD_x_x_crbD_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CRNAND_CRBD__CRBD__CRBD_x_x_crbB_i = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CREQV_CRBD__CRBD__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CREQV_CRBD__CRBD__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CREQV_CRBD__CRBD__CRBD_x_x_crbA_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CREQV_CRBD__CRBD__CRBD_x_x_crbD_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CREQV_CRBD__CRBD__CRBD_x_x_crbB_i = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CRANDC_CRBD__CRBD__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CRANDC_CRBD__CRBD__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CRANDC_CRBD__CRBD__CRBD_x_x_crbA_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CRANDC_CRBD__CRBD__CRBD_x_x_crbD_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CRANDC_CRBD__CRBD__CRBD_x_x_crbB_i = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CRAND_CRBD__CRBD__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CRAND_CRBD__CRBD__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CRAND_CRBD__CRBD__CRBD_x_x_crbA_i = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CRAND_CRBD__CRBD__CRBD_x_x_crbD_i = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CRAND_CRBD__CRBD__CRBD_x_x_crbB_i = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CMPLI_CRD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X600000}; /* 00000000011000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CMPLI_CRD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CMPLI_CRD__RD__D_x_x_crD32 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CMPLI_CRD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CMPLI_CRD__RD__D_x_x_F = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_CMPLI_CRD__RD__D_x_x_UI8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_CMPLI_CRD__RD__D_x_x_SCL = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CMPL16I_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CMPL16I_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CMPL16I_RD__D_x_x_UI = ((0 | ((__EXTRACT_CISC(&mask0, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_CMPL16I_RD__D_x_x_rA_idx = (0 | __EXTRACT_CISC(&mask1, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_CMPI_CRD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X600000}; /* 00000000011000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask4 = {tab_mask4, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CMPI_CRD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CMPI_CRD__RD__D_x_x_crD32 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CMPI_CRD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CMPI_CRD__RD__D_x_x_F = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_CMPI_CRD__RD__D_x_x_UI8 = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_CMPI_CRD__RD__D_x_x_SCL = __EXTRACT_CISC(&mask4, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CMPHL16I_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CMPHL16I_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CMPHL16I_RD__D_x_x_UI = ((0 | ((__EXTRACT_CISC(&mask0, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_CMPHL16I_RD__D_x_x_rA_idx = (0 | __EXTRACT_CISC(&mask1, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_CMPHL_CRD__RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3800000}; /* 00000011100000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CMPHL_CRD__RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CMPHL_CRD__RD__RD_x_x_crD = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CMPHL_CRD__RD__RD_x_x_rB_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CMPHL_CRD__RD__RD_x_x_rA_idx = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CMPH16I_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CMPH16I_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CMPH16I_RD__D_x_x_SI = ((0 | ((__EXTRACT_CISC(&mask0, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_CMPH16I_RD__D_x_x_rA_idx = (0 | __EXTRACT_CISC(&mask1, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_CMPH_CRD__RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3800000}; /* 00000011100000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XF800}; /* 00000000000000001111100000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CMPH_CRD__RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CMPH_CRD__RD__RD_x_x_crD = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_CMPH_CRD__RD__RD_x_x_rB_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_CMPH_CRD__RD__RD_x_x_rA_idx = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_CMP16I_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_CMP16I_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_CMP16I_RD__D_x_x_SI = ((0 | ((__EXTRACT_CISC(&mask0, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_CMP16I_RD__D_x_x_rA_idx = (0 | __EXTRACT_CISC(&mask1, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_BCS_X__X_08X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0X1}; /* 00000000000000000000000000000001 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XFFFE}; /* 00000000000000001111111111111110 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 00000000000011110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {0X300000}; /* 00000000001100000000000000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_BCS_X__X_08X;

	/* put other parameters */
	/* complex decoding */
	PPC_E_BCS_X__X_08X_x_x_LK = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_BCS_X__X_08X_x_x_BD15 = __EXTS_CISC(&mask1, code_inst->mask, 15);
	PPC_E_BCS_X__X_08X_x_x_BI32 = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_BCS_X__X_08X_x_x_BO32 = __EXTRACT_CISC(&mask3, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_BS_08X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {     0X1}; /* 00000000000000000000000000000001 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1FFFFFE}; /* 00000001111111111111111111111110 */
	static mask_t mask1 = {tab_mask1, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_BS_08X;

	/* put other parameters */
	/* complex decoding */
	PPC_E_BS_08X_x_x_LK = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_BS_08X_x_x_BD24 = __EXTS_CISC(&mask1, code_inst->mask, 24);

	return inst;

}

static ppc_inst_t *ppc_instr_E_ADDICS_RD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_ADDICS_RD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_ADDICS_RD__RD__D_x_x_rS_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_x_x_Rc = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_x_x_F = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_x_x_UI8 = __EXTRACT_CISC(&mask4, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_x_x_SCL = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_AND2IS__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_AND2IS__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_AND2IS__RD__D_x_x_UI = ((0 | ((__EXTRACT_CISC(&mask1, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_AND2IS__RD__D_x_x_rD_idx = (0 | __EXTRACT_CISC(&mask0, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_AND2I__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_AND2I__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_AND2I__RD__D_x_x_UI = ((0 | ((__EXTRACT_CISC(&mask1, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_AND2I__RD__D_x_x_rD_idx = (0 | __EXTRACT_CISC(&mask0, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_ADDICS_RD__RD__D_0_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_ADDICS_RD__RD__D_0;

	/* put other parameters */
	/* complex decoding */
	PPC_E_ADDICS_RD__RD__D_0_x_x_rD_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_0_x_x_rA_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_0_x_x_Rc = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_0_x_x_F = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_0_x_x_UI8 = __EXTRACT_CISC(&mask4, code_inst->mask);
	PPC_E_ADDICS_RD__RD__D_0_x_x_SCL = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_ADDIS_RD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X800}; /* 00000000000000000000100000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0X400}; /* 00000000000000000000010000000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0XFF}; /* 00000000000000000000000011111111 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {   0X300}; /* 00000000000000000000001100000000 */
	static mask_t mask5 = {tab_mask5, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_ADDIS_RD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_ADDIS_RD__RD__D_x_x_rD_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_ADDIS_RD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_ADDIS_RD__RD__D_x_x_Rc = __EXTRACT_CISC(&mask2, code_inst->mask);
	PPC_E_ADDIS_RD__RD__D_x_x_F = __EXTRACT_CISC(&mask3, code_inst->mask);
	PPC_E_ADDIS_RD__RD__D_x_x_UI8 = __EXTRACT_CISC(&mask4, code_inst->mask);
	PPC_E_ADDIS_RD__RD__D_x_x_SCL = __EXTRACT_CISC(&mask5, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_ADD2IS_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_ADD2IS_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_ADD2IS_RD__D_x_x_SI = ((0 | ((__EXTRACT_CISC(&mask0, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_ADD2IS_RD__D_x_x_rA_idx = (0 | __EXTRACT_CISC(&mask1, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_ADD2I__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {   0X7FF}; /* 00000000000000000000011111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_ADD2I__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_ADD2I__RD__D_x_x_SI = ((0 | ((__EXTRACT_CISC(&mask0, code_inst->mask) & 31) << 11)) | ((__EXTRACT_CISC(&mask2, code_inst->mask) & 2047LU) << 0))
;
	PPC_E_ADD2I__RD__D_x_x_rA_idx = (0 | __EXTRACT_CISC(&mask1, code_inst->mask))
;

	return inst;

}

static ppc_inst_t *ppc_instr_E_ADD16I_RD__RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3E00000}; /* 00000011111000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {0X1F0000}; /* 00000000000111110000000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_ADD16I_RD__RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_E_ADD16I_RD__RD__D_x_x_rD_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_ADD16I_RD__RD__D_x_x_SI = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_ADD16I_RD__RD__D_x_x_rA_idx = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SUBIS_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SUBIS_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SUBIS_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SUBIS_RD__D_x_x_Rc = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SE_SUBIS_RD__D_x_x_OIM5 = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SUBF_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SUBF_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SUBF_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SUBF_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SUB_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SUB_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SUB_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SUB_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_STW_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_STW_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_STW_RD__D_LP_RD_RP__x_x_rZ_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_STW_RD__D_LP_RD_RP__x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SE_STW_RD__D_LP_RD_RP__x_x_SD4 = __EXTS_CISC(&mask2, code_inst->mask, 4);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_STH_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_STH_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_STH_RD__D_LP_RD_RP__x_x_rZ_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_STH_RD__D_LP_RD_RP__x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SE_STH_RD__D_LP_RD_RP__x_x_SD4 = __EXTS_CISC(&mask2, code_inst->mask, 4);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_STB_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_STB_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_STB_RD__D_LP_RD_RP__x_x_rZ_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_STB_RD__D_LP_RD_RP__x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SE_STB_RD__D_LP_RD_RP__x_x_SD4 = __EXTS_CISC(&mask2, code_inst->mask, 4);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SRWI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SRWI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SRWI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SRWI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SRW_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SRW_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SRW_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SRW_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SRAWI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SRAWI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SRAWI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SRAWI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SRAW_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SRAW_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SRAW_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SRAW_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SLWI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SLWI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SLWI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SLWI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SLW_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_SLW_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_SLW_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_SLW_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_SC_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_SE_SC;

	return inst;
}

static ppc_inst_t *ppc_instr_SE_RFI_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_SE_RFI;

	return inst;
}

static ppc_inst_t *ppc_instr_SE_RFDI_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_SE_RFDI;

	return inst;
}

static ppc_inst_t *ppc_instr_SE_RFCI_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_SE_RFCI;

	return inst;
}

static ppc_inst_t *ppc_instr_SE_OR_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_OR_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_OR_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_OR_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_NOT_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_NOT_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_NOT_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_NEG_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_NEG_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_NEG_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_MULLW_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_MULLW_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_MULLW_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_MULLW_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_MTLR_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_MTLR_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_MTLR_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_MTCTR_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_MTCTR_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_MTCTR_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_MTAR_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_MTAR_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_MTAR_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_MTAR_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_MR_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_MR_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_MR_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_MR_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_MFLR_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_MFLR_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_MFLR_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_MFCTR_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_MFCTR_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_MFCTR_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_MFAR_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_MFAR_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_MFAR_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_MFAR_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_LI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X7F00000}; /* 0000011111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_LI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_LI_RD__D_x_x_UI7 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_LI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_LWZ_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_LWZ_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_LWZ_RD__D_LP_RD_RP__x_x_rZ_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_LWZ_RD__D_LP_RD_RP__x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SE_LWZ_RD__D_LP_RD_RP__x_x_SD4 = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_LHZ_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_LHZ_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_LHZ_RD__D_LP_RD_RP__x_x_rZ_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_LHZ_RD__D_LP_RD_RP__x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SE_LHZ_RD__D_LP_RD_RP__x_x_SD4 = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_LBZ_RD__D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_LBZ_RD__D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_LBZ_RD__D_LP_RD_RP__x_x_rZ_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_LBZ_RD__D_LP_RD_RP__x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SE_LBZ_RD__D_LP_RD_RP__x_x_SD4 = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_EXTZH_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_EXTZH_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_EXTZH_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_EXTZB_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_EXTZB_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_EXTZB_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_EXTSH_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_EXTSH_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_EXTSH_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_EXTSB_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_EXTSB_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_EXTSB_RD_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_CMPLI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_CMPLI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_CMPLI_RD__D_x_x_OIM5 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_CMPLI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_CMPL_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_CMPL_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_CMPL_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_CMPL_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_CMPI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_CMPI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_CMPI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_CMPI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_CMPHL_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_CMPHL_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_CMPHL_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_CMPHL_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_CMPH_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_CMPH_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_CMPH_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_CMPH_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_CMP_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_CMP_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_CMP_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_CMP_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_BTSTI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_BTSTI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_BTSTI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_BTSTI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_BSETI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_BSETI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_BSETI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_BSETI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_BMSKI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_BMSKI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_BMSKI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_BMSKI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_BLRS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X10000}; /* 0000000000000001 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BLRS;

	/* put other parameters */
	/* complex decoding */
	PPC_BLRS_x_x_LK = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_BGENI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BGENI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_BGENI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_BGENI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_BCTRS_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X10000}; /* 0000000000000001 */
	static mask_t mask0 = {tab_mask0, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_BCTRS;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_BCTRS_x_x_LK = __EXTRACT_CISC(&mask0, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_BCLRI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BCLRI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_BCLRI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_BCLRI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_BC_X__X__08X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X3000000}; /* 0000001100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X4000000}; /* 0000010000000000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_BC_X__X__08X;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_BC_X__X__08X_x_x_BD8 = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_BC_X__X__08X_x_x_BI16 = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_SE_BC_X__X__08X_x_x_BO16 = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_BS_08X_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XFF0000}; /* 0000000011111111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_BS_08X;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_BS_08X_x_x_LK = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_BS_08X_x_x_BD8 = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_ANDC_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_ANDC_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_ANDC_RD__RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_ANDC_RD__RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_ANDI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_ANDI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_ANDI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_ANDI_RD__D_x_x_UI5 = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_E_ANDS_RD__RD__decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_E_ANDS_RD__RD_;

	/* put other parameters */
	/* complex decoding */
	PPC_E_ANDS_RD__RD__x_x_Rc = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_E_ANDS_RD__RD__x_x_rY_idx = __EXTRACT_CISC(&mask1, code_inst->mask);
	PPC_E_ANDS_RD__RD__x_x_rX_idx = __EXTRACT_CISC(&mask2, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_ADDI_RD__D_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_ADDI_RD__D;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_ADDI_RD__D_x_x_rX_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_ADDI_RD__D_x_x_OIM5 = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_SE_ADD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SE_ADD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_SE_ADD_RD_RD_x_x_rY_idx = __EXTRACT_CISC(&mask0, code_inst->mask);
	PPC_SE_ADD_RD_RD_x_x_rX_idx = __EXTRACT_CISC(&mask1, code_inst->mask);

	return inst;

}

static ppc_inst_t *ppc_instr_MFAPIDI_RD__RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFAPIDI_RD__RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MFAPIDI_RD__RD_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MFAPIDI_RD__RD_x_x_rd_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_TLBSYNC_0_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_TLBSYNC_0;

	return inst;
}

static ppc_inst_t *ppc_instr_TLBIE_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_TLBIE_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_TLBIE_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_TLBIA_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_TLBIA;

	return inst;
}

static ppc_inst_t *ppc_instr_RFI_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_RFI;

	return inst;
}

static ppc_inst_t *ppc_instr_MTSRIN_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTSRIN_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTSRIN_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_MTSRIN_RD_RD_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTSR_D_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTSR_D_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTSR_D_RD_x_x_x_rd_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MTSR_D_RD_x_x_x_sr = __EXTRACT_32(0x000F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFSRIN_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFSRIN_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_MFSRIN_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_MFSRIN_RD_RD_x_x_x_rd_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFSR_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFSR_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_MFSR_RD_D_x_x_x_sr = __EXTRACT_32(0x000F0000, 16, code_inst->u32);
	PPC_MFSR_RD_D_x_x_x_rd_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTSPR_D_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTSPR_D_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MTSPR_D_RD_0_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MTSPR_D_RD_0_x_x_x_spr = __EXTRACT_32(0x000FF800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTMSR_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTMSR_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MTMSR_RD_0_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFSPR_RD_D_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFSPR_RD_D_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MFSPR_RD_D_0_x_x_x_spr = __EXTRACT_32(0x000FF800, 11, code_inst->u32);
	PPC_MFSPR_RD_D_0_x_x_x_rd_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFMSR_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFMSR_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MFMSR_RD_0_x_x_x_rd_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFTB_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFTB_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_MFTB_RD_D_x_x_tbr = __EXTRACT_32(0x001FF800, 11, code_inst->u32);
	PPC_MFTB_RD_D_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ISYNC_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_ISYNC;

	return inst;
}

static ppc_inst_t *ppc_instr_EIEIO_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_EIEIO;

	return inst;
}

static ppc_inst_t *ppc_instr_ECOWX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ECOWX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ECOWX_RD_RD_RD_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ECOWX_RD_RD_RD_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ECOWX_RD_RD_RD_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ECIWX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ECIWX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_ECIWX_RD_RD_RD_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ECIWX_RD_RD_RD_x_x_rd_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ECIWX_RD_RD_RD_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ICBI_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ICBI_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ICBI_RD_RD_0_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_ICBI_RD_RD_0_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBZ_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBZ_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBZ_RD_RD_0_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_DCBZ_RD_RD_0_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBTST_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBTST_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBTST_RD_RD_0_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_DCBTST_RD_RD_0_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBT_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBT_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBT_RD_RD_0_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_DCBT_RD_RD_0_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBST_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBST_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBST_RD_RD_0_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_DCBST_RD_RD_0_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBI_RD__RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBI_RD__RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBI_RD__RD_0_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_DCBI_RD__RD_0_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBF_RD__RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBF_RD__RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBF_RD__RD_0_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_DCBF_RD__RD_0_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DCBA_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DCBA_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DCBA_RD_RD_0_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_DCBA_RD_RD_0_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTFSFI__CRFD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTFSFI__CRFD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_MTFSFI__CRFD_D_x_x_x_imm = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	PPC_MTFSFI__CRFD_D_x_x_x_crf = __EXTRACT_32(0x03800000, 23, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTFSFI_CRFD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTFSFI_CRFD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_MTFSFI_CRFD_D_x_x_x_imm = __EXTRACT_32(0x0000F000, 12, code_inst->u32);
	PPC_MTFSFI_CRFD_D_x_x_x_crf = __EXTRACT_32(0x03800000, 23, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTFSF__D_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTFSF__D_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTFSF__D_FRD_x_x_x_frb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_MTFSF__D_FRD_x_x_x_fm = __EXTRACT_32(0x01FE0000, 17, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTFSF_D_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTFSF_D_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTFSF_D_FRD_x_x_x_frb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_MTFSF_D_FRD_x_x_x_fm = __EXTRACT_32(0x01FE0000, 17, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTFSB1__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTFSB1__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTFSB1__CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTFSB1_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTFSB1_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTFSB1_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTFSB0__CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTFSB0__CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTFSB0__CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTFSB0_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTFSB0_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_MTFSB0_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFFS__FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFFS__FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_MFFS__FRD_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFFS_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFFS_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_MFFS_FRD_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MCRFS_CRFD_CRFD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MCRFS_CRFD_CRFD;

	/* put other parameters */
	/* complex decoding */
	PPC_MCRFS_CRFD_CRFD_x_x_x_crfs = __EXTRACT_32(0x001C0000, 18, code_inst->u32);
	PPC_MCRFS_CRFD_CRFD_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FCTIWZ__FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FCTIWZ__FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FCTIWZ__FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FCTIWZ__FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FCTIWZ_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FCTIWZ_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FCTIWZ_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FCTIWZ_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FCTIW__FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FCTIW__FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FCTIW__FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FCTIW__FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FCTIW_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FCTIW_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FCTIW_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FCTIW_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FRSP__FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FRSP__FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FRSP__FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FRSP__FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FRSP_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FRSP_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FRSP_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FRSP_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNABS__FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNABS__FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNABS__FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FNABS__FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNABS_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNABS_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNABS_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FNABS_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FABS__FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FABS__FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FABS__FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FABS__FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FABS_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FABS_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FABS_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FABS_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNEG__FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNEG__FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNEG__FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FNEG__FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNEG_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNEG_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNEG_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FNEG_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMR__FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMR__FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMR__FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FMR__FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMR_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMR_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMR_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FMR_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FCMPU_CRFD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FCMPU_CRFD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FCMPU_CRFD_FRD_FRD_x_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);
	PPC_FCMPU_CRFD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FCMPU_CRFD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FCMPO_CRFD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FCMPO_CRFD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FCMPO_CRFD_FRD_FRD_x_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);
	PPC_FCMPO_CRFD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FCMPO_CRFD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNMSUBS__FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNMSUBS__FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNMSUBS__FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FNMSUBS__FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FNMSUBS__FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FNMSUBS__FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNMSUBS_FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNMSUBS_FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNMSUBS_FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FNMSUBS_FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FNMSUBS_FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FNMSUBS_FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNMSUB__FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNMSUB__FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNMSUB__FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FNMSUB__FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FNMSUB__FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FNMSUB__FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNMSUB_FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNMSUB_FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNMSUB_FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FNMSUB_FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FNMSUB_FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FNMSUB_FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMSUBS__FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMSUBS__FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMSUBS__FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMSUBS__FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FMSUBS__FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMSUBS__FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMSUBS_FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMSUBS_FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMSUBS_FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMSUBS_FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FMSUBS_FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMSUBS_FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMSUB__FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMSUB__FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMSUB__FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMSUB__FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FMSUB__FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMSUB__FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMSUB_FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMSUB_FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMSUB_FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMSUB_FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FMSUB_FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMSUB_FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNMADDS__FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNMADDS__FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNMADDS__FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FNMADDS__FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FNMADDS__FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FNMADDS__FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNMADDS_FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNMADDS_FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNMADDS_FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FNMADDS_FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FNMADDS_FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FNMADDS_FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNMADD__FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNMADD__FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNMADD__FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FNMADD__FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FNMADD__FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FNMADD__FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FNMADD_FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FNMADD_FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FNMADD_FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FNMADD_FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FNMADD_FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FNMADD_FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMADDS__FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMADDS__FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMADDS__FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMADDS__FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FMADDS__FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMADDS__FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMADDS_FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMADDS_FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMADDS_FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMADDS_FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FMADDS_FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMADDS_FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMADD__FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMADD__FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMADD__FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMADD__FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FMADD__FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMADD__FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMADD_FRD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMADD_FRD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMADD_FRD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMADD_FRD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_FMADD_FRD_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMADD_FRD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FDIVS__FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FDIVS__FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FDIVS__FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FDIVS__FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FDIVS__FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FDIVS_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FDIVS_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FDIVS_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FDIVS_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FDIVS_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FDIV__FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FDIV__FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FDIV__FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FDIV__FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FDIV__FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FDIV_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FDIV_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FDIV_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FDIV_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FDIV_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMULS__FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMULS__FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMULS__FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMULS__FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMULS__FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMULS_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMULS_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMULS_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMULS_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMULS_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMUL__FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMUL__FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMUL__FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMUL__FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMUL__FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FMUL_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FMUL_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FMUL_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FMUL_FRD_FRD_FRD_x_x_x_x_frc = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_FMUL_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FSUBS__FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FSUBS__FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FSUBS__FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FSUBS__FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FSUBS__FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FSUBS_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FSUBS_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FSUBS_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FSUBS_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FSUBS_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FSUB__FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FSUB__FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FSUB__FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FSUB__FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FSUB__FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FSUB_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FSUB_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FSUB_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FSUB_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FSUB_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FADDS__FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FADDS__FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FADDS__FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FADDS__FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FADDS__FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FADDS_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FADDS_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FADDS_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FADDS_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FADDS_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FADD__FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FADD__FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FADD__FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FADD__FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FADD__FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_FADD_FRD_FRD_FRD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_FADD_FRD_FRD_FRD;

	/* put other parameters */
	/* complex decoding */
	PPC_FADD_FRD_FRD_FRD_x_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_FADD_FRD_FRD_FRD_x_x_x_x_frb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_FADD_FRD_FRD_FRD_x_x_x_x_fra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STFSUX_FRD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STFSUX_FRD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STFSUX_FRD_RD_RD_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STFSUX_FRD_RD_RD_x_x_x_frs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STFSUX_FRD_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STFSU_FRD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STFSU_FRD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STFSU_FRD_D_LP_RD_RP__x_x_x_frs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STFSU_FRD_D_LP_RD_RP__x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_STFSU_FRD_D_LP_RD_RP__x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STFSX_FRD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STFSX_FRD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STFSX_FRD_RD_RD_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STFSX_FRD_RD_RD_x_x_x_frs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STFSX_FRD_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STFS_FRD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STFS_FRD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STFS_FRD_D_LP_RD_RP__x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STFS_FRD_D_LP_RD_RP__x_x_x_frs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STFS_FRD_D_LP_RD_RP__x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STFDUX_FRD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STFDUX_FRD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STFDUX_FRD_RD_RD_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STFDUX_FRD_RD_RD_x_x_x_frs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STFDUX_FRD_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STFDU_FRD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STFDU_FRD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STFDU_FRD_D_LP_RD_RP__x_x_x_frs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STFDU_FRD_D_LP_RD_RP__x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_STFDU_FRD_D_LP_RD_RP__x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STFDX_FRD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STFDX_FRD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_STFDX_FRD_RD_RD_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STFDX_FRD_RD_RD_x_x_x_frs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STFDX_FRD_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STFD_FRD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STFD_FRD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STFD_FRD_D_LP_RD_RP__x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STFD_FRD_D_LP_RD_RP__x_x_x_frs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STFD_FRD_D_LP_RD_RP__x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LFSUX_FRD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LFSUX_FRD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LFSUX_FRD_RD_RD_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LFSUX_FRD_RD_RD_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LFSUX_FRD_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LFSU_FRD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LFSU_FRD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LFSU_FRD_D_LP_RD_RP__x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LFSU_FRD_D_LP_RD_RP__x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_LFSU_FRD_D_LP_RD_RP__x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LFSX_FRD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LFSX_FRD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LFSX_FRD_RD_RD_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LFSX_FRD_RD_RD_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LFSX_FRD_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LFS_FRD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LFS_FRD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LFS_FRD_D_LP_RD_RP__x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LFS_FRD_D_LP_RD_RP__x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LFS_FRD_D_LP_RD_RP__x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LFDUX_FRD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LFDUX_FRD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LFDUX_FRD_RD_RD_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LFDUX_FRD_RD_RD_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LFDUX_FRD_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LFDU_FRD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LFDU_FRD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LFDU_FRD_D_LP_RD_RP__x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LFDU_FRD_D_LP_RD_RP__x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_LFDU_FRD_D_LP_RD_RP__x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LFDX_FRD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LFDX_FRD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LFDX_FRD_RD_RD_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LFDX_FRD_RD_RD_x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LFDX_FRD_RD_RD_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LFD_FRD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LFD_FRD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LFD_FRD_D_LP_RD_RP__x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LFD_FRD_D_LP_RD_RP__x_x_x_frd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LFD_FRD_D_LP_RD_RP__x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_TWI_D_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_TWI_D_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_TWI_D_RD_D_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_TWI_D_RD_D_x_x_x_to = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_TWI_D_RD_D_x_x_x_b_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_TW_D_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_TW_D_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_TW_D_RD_RD_0_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_TW_D_RD_RD_0_x_x_x_to = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_TW_D_RD_RD_0_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SYNC_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_SYNC;

	return inst;
}

static ppc_inst_t *ppc_instr_STWCX__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWCX__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STWCX__RD_RD_RD_0_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STWCX__RD_RD_RD_0_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STWCX__RD_RD_RD_0_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LWARX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWARX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LWARX_RD_RD_RD_0_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LWARX_RD_RD_RD_0_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LWARX_RD_RD_RD_0_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFSPR_RD_S_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFSPR_RD_S_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MFSPR_RD_S_0_x_x_x_spr = __EXTRACT_32(0x000FF800, 11, code_inst->u32);
	PPC_MFSPR_RD_S_0_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTSPR_S_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTSPR_S_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MTSPR_S_RD_0_x_x_x_spr = __EXTRACT_32(0x000FF800, 11, code_inst->u32);
	PPC_MTSPR_S_RD_0_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MFCR_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MFCR_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MFCR_RD_0_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ISEL_RD__RD__R5B__D_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ISEL_RD__RD__R5B__D_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ISEL_RD__RD__R5B__D_0_x_x_x_rB = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_ISEL_RD__RD__R5B__D_0_x_x_x_crb = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_ISEL_RD__RD__R5B__D_0_x_x_x_rD = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ISEL_RD__RD__R5B__D_0_x_x_x_rA_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MCRXR_CRFD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MCRXR_CRFD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MCRXR_CRFD_0_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MTCRF_D_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MTCRF_D_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MTCRF_D_RD_0_x_x_x_crm = __EXTRACT_32(0x000FF000, 12, code_inst->u32);
	PPC_MTCRF_D_RD_0_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MCRF_CRFD_CRFD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MCRF_CRFD_CRFD;

	/* put other parameters */
	/* complex decoding */
	PPC_MCRF_CRFD_CRFD_x_x_x_crfs = __EXTRACT_32(0x001C0000, 18, code_inst->u32);
	PPC_MCRF_CRFD_CRFD_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CRORC_CRBD_CRBD_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CRORC_CRBD_CRBD_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_CRORC_CRBD_CRBD_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_CRORC_CRBD_CRBD_CRBD_x_x_x_crbb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CRORC_CRBD_CRBD_CRBD_x_x_x_crba = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CRANDC_CRBD_CRBD_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CRANDC_CRBD_CRBD_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_CRANDC_CRBD_CRBD_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_CRANDC_CRBD_CRBD_CRBD_x_x_x_crbb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CRANDC_CRBD_CRBD_CRBD_x_x_x_crba = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CREQV_CRBD_CRBD_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CREQV_CRBD_CRBD_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_CREQV_CRBD_CRBD_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_CREQV_CRBD_CRBD_CRBD_x_x_x_crbb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CREQV_CRBD_CRBD_CRBD_x_x_x_crba = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CRNOR_CRBD_CRBD_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CRNOR_CRBD_CRBD_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_CRNOR_CRBD_CRBD_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_CRNOR_CRBD_CRBD_CRBD_x_x_x_crbb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CRNOR_CRBD_CRBD_CRBD_x_x_x_crba = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CRNAND_CRBD_CRBD_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CRNAND_CRBD_CRBD_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_CRNAND_CRBD_CRBD_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_CRNAND_CRBD_CRBD_CRBD_x_x_x_crbb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CRNAND_CRBD_CRBD_CRBD_x_x_x_crba = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CRXOR_CRBD_CRBD_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CRXOR_CRBD_CRBD_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_CRXOR_CRBD_CRBD_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_CRXOR_CRBD_CRBD_CRBD_x_x_x_crbb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CRXOR_CRBD_CRBD_CRBD_x_x_x_crba = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CROR_CRBD_CRBD_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CROR_CRBD_CRBD_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_CROR_CRBD_CRBD_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_CROR_CRBD_CRBD_CRBD_x_x_x_crbb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CROR_CRBD_CRBD_CRBD_x_x_x_crba = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CRAND_CRBD_CRBD_CRBD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CRAND_CRBD_CRBD_CRBD;

	/* put other parameters */
	/* complex decoding */
	PPC_CRAND_CRBD_CRBD_CRBD_x_x_x_crbd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_CRAND_CRBD_CRBD_CRBD_x_x_x_crbb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CRAND_CRBD_CRBD_CRBD_x_x_x_crba = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SRAW__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRAW__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SRAW__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SRAW__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SRAW__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SRAW_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRAW_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SRAW_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SRAW_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SRAW_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SRAWI__RD_RD_D_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRAWI__RD_RD_D_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SRAWI__RD_RD_D_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SRAWI__RD_RD_D_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SRAWI__RD_RD_D_0_x_x_x_x_sh = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SRAWI_RD_RD_D_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRAWI_RD_RD_D_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SRAWI_RD_RD_D_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SRAWI_RD_RD_D_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SRAWI_RD_RD_D_0_x_x_x_x_sh = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SRW__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRW__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SRW__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SRW__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SRW__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SRW_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SRW_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SRW_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SRW_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SRW_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SLW__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SLW__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SLW__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SLW__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SLW__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SLW_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SLW_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SLW_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SLW_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SLW_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_RLWIMI__RD_RD_D_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_RLWIMI__RD_RD_D_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_RLWIMI__RD_RD_D_D_D_x_x_x_x_mb = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_RLWIMI__RD_RD_D_D_D_x_x_x_x_me = __EXTRACT_32(0x0000003E, 1, code_inst->u32);
	PPC_RLWIMI__RD_RD_D_D_D_x_x_x_x_sh = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_RLWIMI__RD_RD_D_D_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_RLWIMI__RD_RD_D_D_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_RLWIMI_RD_RD_D_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_RLWIMI_RD_RD_D_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_RLWIMI_RD_RD_D_D_D_x_x_x_x_mb = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_RLWIMI_RD_RD_D_D_D_x_x_x_x_me = __EXTRACT_32(0x0000003E, 1, code_inst->u32);
	PPC_RLWIMI_RD_RD_D_D_D_x_x_x_x_sh = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_RLWIMI_RD_RD_D_D_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_RLWIMI_RD_RD_D_D_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_RLWNM__RD_RD_RD_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_RLWNM__RD_RD_RD_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_RLWNM__RD_RD_RD_D_D_x_x_x_x_mb = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_RLWNM__RD_RD_RD_D_D_x_x_x_x_me = __EXTRACT_32(0x0000003E, 1, code_inst->u32);
	PPC_RLWNM__RD_RD_RD_D_D_x_x_x_x_rb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_RLWNM__RD_RD_RD_D_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_RLWNM__RD_RD_RD_D_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_RLWNM_RD_RD_RD_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_RLWNM_RD_RD_RD_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_RLWNM_RD_RD_RD_D_D_x_x_x_x_mb = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_RLWNM_RD_RD_RD_D_D_x_x_x_x_me = __EXTRACT_32(0x0000003E, 1, code_inst->u32);
	PPC_RLWNM_RD_RD_RD_D_D_x_x_x_x_rb = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_RLWNM_RD_RD_RD_D_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_RLWNM_RD_RD_RD_D_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_RLWINM__RD_RD_D_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_RLWINM__RD_RD_D_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_RLWINM__RD_RD_D_D_D_x_x_x_x_mb = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_RLWINM__RD_RD_D_D_D_x_x_x_x_me = __EXTRACT_32(0x0000003E, 1, code_inst->u32);
	PPC_RLWINM__RD_RD_D_D_D_x_x_x_x_sh = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_RLWINM__RD_RD_D_D_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_RLWINM__RD_RD_D_D_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_RLWINM_RD_RD_D_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_RLWINM_RD_RD_D_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_RLWINM_RD_RD_D_D_D_x_x_x_x_mb = __EXTRACT_32(0x000007C0, 6, code_inst->u32);
	PPC_RLWINM_RD_RD_D_D_D_x_x_x_x_me = __EXTRACT_32(0x0000003E, 1, code_inst->u32);
	PPC_RLWINM_RD_RD_D_D_D_x_x_x_x_sh = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_RLWINM_RD_RD_D_D_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_RLWINM_RD_RD_D_D_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CNTLZW__RD__RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CNTLZW__RD__RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_CNTLZW__RD__RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_CNTLZW__RD__RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CNTLZW_RD__RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CNTLZW_RD__RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_CNTLZW_RD__RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_CNTLZW_RD__RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_EXTSH__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EXTSH__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_EXTSH__RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_EXTSH__RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_EXTSH_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EXTSH_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_EXTSH_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_EXTSH_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_EXTSB__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EXTSB__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_EXTSB__RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_EXTSB__RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_EXTSB_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EXTSB_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_EXTSB_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_EXTSB_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_EQV__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EQV__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_EQV__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_EQV__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_EQV__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_EQV_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_EQV_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_EQV_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_EQV_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_EQV_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_NAND__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NAND__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_NAND__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_NAND__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_NAND__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_NAND_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NAND_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_NAND_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_NAND_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_NAND_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_NOR__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NOR__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_NOR__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_NOR__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_NOR__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_NOR_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NOR_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_NOR_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_NOR_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_NOR_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_XORIS_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_XORIS_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_XORIS_RD_RD_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_XORIS_RD_RD_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_XORIS_RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_XORI_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_XORI_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_XORI_RD_RD_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_XORI_RD_RD_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_XORI_RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_XOR__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_XOR__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_XOR__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_XOR__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_XOR__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_XOR_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_XOR_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_XOR_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_XOR_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_XOR_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ANDC__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ANDC__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ANDC__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ANDC__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ANDC__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ANDC_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ANDC_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ANDC_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ANDC_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ANDC_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ANDIS__RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ANDIS__RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_ANDIS__RD_RD_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ANDIS__RD_RD_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ANDIS__RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ANDI__RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ANDI__RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_ANDI__RD_RD_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ANDI__RD_RD_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ANDI__RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_AND__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_AND__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_AND__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_AND__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_AND__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_AND_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_AND_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_AND_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_AND_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_AND_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ORC__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ORC__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ORC__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ORC__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ORC__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ORC_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ORC_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ORC_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ORC_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ORC_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ORIS_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ORIS_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_ORIS_RD_RD_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ORIS_RD_RD_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ORIS_RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ORI_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ORI_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_ORI_RD_RD_D_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ORI_RD_RD_D_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ORI_RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_OR__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_OR__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_OR__RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_OR__RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_OR__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_OR_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_OR_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_OR_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_OR_RD_RD_RD_0_x_x_x_x_rs_r = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_OR_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CMPL_D_D_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CMPL_D_D_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_CMPL_D_D_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_CMPL_D_D_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CMPL_D_D_RD_RD_0_x_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);
	PPC_CMPL_D_D_RD_RD_0_x_x_x_x_l = __EXTRACT_32(0x00200000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CMPLI_D_D_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CMPLI_D_D_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_CMPLI_D_D_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_CMPLI_D_D_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_CMPLI_D_D_RD_D_x_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);
	PPC_CMPLI_D_D_RD_D_x_x_x_x_l = __EXTRACT_32(0x00200000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CMP_D_D_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CMP_D_D_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_CMP_D_D_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_CMP_D_D_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_CMP_D_D_RD_RD_0_x_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);
	PPC_CMP_D_D_RD_RD_0_x_x_x_x_l = __EXTRACT_32(0x00200000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_CMPI_D_D_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_CMPI_D_D_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_CMPI_D_D_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_CMPI_D_D_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_CMPI_D_D_RD_D_x_x_x_x_crfd = __EXTRACT_32(0x03800000, 23, code_inst->u32);
	PPC_CMPI_D_D_RD_D_x_x_x_x_l = __EXTRACT_32(0x00200000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_NEGO__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NEGO__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_NEGO__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_NEGO__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_NEGO_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NEGO_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_NEGO_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_NEGO_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_NEG__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NEG__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_NEG__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_NEG__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_NEG_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_NEG_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_NEG_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_NEG_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWUO__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWUO__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWUO__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_DIVWUO__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_DIVWUO__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWUO_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWUO_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWUO_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_DIVWUO_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_DIVWUO_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWU__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWU__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWU__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_DIVWU__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_DIVWU__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWU_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWU_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWU_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_DIVWU_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_DIVWU_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWO__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWO__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWO__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_DIVWO__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_DIVWO__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVWO_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVWO_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVWO_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_DIVWO_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_DIVWO_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVW__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVW__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVW__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_DIVW__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_DIVW__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_DIVW_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_DIVW_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_DIVW_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_DIVW_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_DIVW_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULHWU__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULHWU__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MULHWU__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULHWU__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULHWU__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULHWU_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULHWU_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MULHWU_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULHWU_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULHWU_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULHW__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULHW__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MULHW__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULHW__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULHW__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULHW_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULHW_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MULHW_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULHW_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULHW_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLI_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLI_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLI_RD_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULLI_RD_RD_D_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULLI_RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLWO__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLWO__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLWO__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULLWO__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULLWO__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLWO_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLWO_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLWO_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULLWO_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULLWO_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLW__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLW__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLW__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULLW__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULLW__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_MULLW_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_MULLW_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_MULLW_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_MULLW_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_MULLW_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFZEO__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFZEO__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFZEO__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFZEO__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFZEO_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFZEO_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFZEO_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFZEO_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFZE__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFZE__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFZE__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFZE__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFZE_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFZE_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFZE_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFZE_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFMEO__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFMEO__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFMEO__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFMEO__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFMEO_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFMEO_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFMEO_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFMEO_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFME__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFME__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFME__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFME__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFME_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFME_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFME_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFME_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFEO__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFEO__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFEO__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFEO__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFEO__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFEO_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFEO_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFEO_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFEO_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFEO_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFE__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFE__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFE__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFE__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFE__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFE_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFE_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFE_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFE_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFE_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFCO__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFCO__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFCO__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFCO__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFCO__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFCO_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFCO_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFCO_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFCO_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFCO_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFC__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFC__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFC__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFC__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFC__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFC_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFC_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFC_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFC_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFC_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFIC_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFIC_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFIC_RD_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFIC_RD_RD_D_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFIC_RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFO__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFO__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFO__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFO__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFO__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBFO_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBFO_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBFO_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBFO_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBFO_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBF__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBF__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBF__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBF__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBF__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SUBF_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_SUBF_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_SUBF_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_SUBF_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_SUBF_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDZEO__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDZEO__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDZEO__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDZEO__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDZEO_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDZEO_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDZEO_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDZEO_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDZE__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDZE__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDZE__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDZE__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDZE_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDZE_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDZE_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDZE_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDMEO__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDMEO__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDMEO__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDMEO__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDMEO_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDMEO_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDMEO_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDMEO_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDME__RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDME__RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDME__RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDME__RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDME_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDME_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDME_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDME_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDEO__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDEO__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDEO__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDEO__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDEO__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDEO_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDEO_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDEO_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDEO_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDEO_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDE__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDE__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDE__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDE__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDE__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDE_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDE_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDE_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDE_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDE_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDCO__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDCO__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDCO__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDCO__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDCO__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDCO_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDCO_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDCO_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDCO_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDCO_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDC__RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDC__RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDC__RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDC__RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDC__RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDC_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDC_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDC_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDC_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDC_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDIC__RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDIC__RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDIC__RD_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDIC__RD_RD_D_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDIC__RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDIC_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDIC_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDIC_RD_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDIC_RD_RD_D_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDIC_RD_RD_D_x_x_x_x_imm_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDIS_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDIS_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDIS_RD_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDIS_RD_RD_D_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDIS_RD_RD_D_x_x_x_x_da_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDI_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDI_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDI_RD_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_ADDI_RD_RD_D_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDI_RD_RD_D_x_x_x_x_da_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_ADDSS_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_ADDSS_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_ADDSS_RD_RD_RD_0_x_x_x_x_Rc = __EXTRACT_32(0x00000001, 0, code_inst->u32);
	PPC_ADDSS_RD_RD_RD_0_x_x_x_x_Oe = __EXTRACT_32(0x00000400, 10, code_inst->u32);
	PPC_ADDSS_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);
	PPC_ADDSS_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_ADDSS_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STSWX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STSWX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STSWX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STSWX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STSWX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STSWI_RD_RD_D_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STSWI_RD_RD_D_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STSWI_RD_RD_D_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STSWI_RD_RD_D_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STSWI_RD_RD_D_0_x_x_x_x_NB_NB = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STMW_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STMW_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STMW_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STMW_RD_D_LP_RD_RP__x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STMW_RD_D_LP_RD_RP__x_x_x_x_d_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STWBRX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWBRX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STWBRX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STWBRX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STWBRX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STHBRX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STHBRX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STHBRX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STHBRX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STHBRX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STWUX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWUX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STWUX_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STWUX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STWUX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STWU_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWU_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STWU_RD_D_LP_RD_RP__x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STWU_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_STWU_RD_D_LP_RD_RP__x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STWX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STWX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STWX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STWX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STWX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STW_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STW_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STW_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STW_RD_D_LP_RD_RP__x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STW_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STHUX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STHUX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STHUX_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STHUX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STHUX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STHU_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STHU_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STHU_RD_D_LP_RD_RP__x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STHU_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_STHU_RD_D_LP_RD_RP__x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STHX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STHX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STHX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STHX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STHX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STH_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STH_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STH_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STH_RD_D_LP_RD_RP__x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STH_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STBUX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STBUX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STBUX_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STBUX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STBUX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STBU_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STBU_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STBU_RD_D_LP_RD_RP__x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STBU_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_STBU_RD_D_LP_RD_RP__x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STBX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STBX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_STBX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STBX_RD_RD_RD_0_x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STBX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_STB_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_STB_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_STB_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_STB_RD_D_LP_RD_RP__x_x_x_x_rs = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_STB_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LSWX_RD_RD_RD_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LSWX_RD_RD_RD;

	/* put other parameters */
	/* complex decoding */
	PPC_LSWX_RD_RD_RD_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LSWX_RD_RD_RD_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LSWX_RD_RD_RD_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LSWI_RD_RD_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LSWI_RD_RD_D;

	/* put other parameters */
	/* complex decoding */
	PPC_LSWI_RD_RD_D_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LSWI_RD_RD_D_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LSWI_RD_RD_D_x_x_x_x_NB_NB = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LMW_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LMW_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LMW_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LMW_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LMW_RD_D_LP_RD_RP__x_x_x_x_d_n = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LWBRX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWBRX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LWBRX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LWBRX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LWBRX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHBRX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHBRX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LHBRX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LHBRX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHBRX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LWZUX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWZUX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LWZUX_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LWZUX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LWZUX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LWZU_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWZU_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LWZU_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LWZU_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_LWZU_RD_D_LP_RD_RP__x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LWZX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWZX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LWZX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LWZX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LWZX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LWZ_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LWZ_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LWZ_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LWZ_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LWZ_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHAUX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHAUX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LHAUX_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LHAUX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHAUX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHAU_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHAU_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LHAU_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHAU_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_LHAU_RD_D_LP_RD_RP__x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHAX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHAX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LHAX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LHAX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHAX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHA_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHA_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LHA_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LHA_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHA_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHZUX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHZUX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LHZUX_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LHZUX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHZUX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHZU_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHZU_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LHZU_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHZU_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_LHZU_RD_D_LP_RD_RP__x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHZX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHZX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LHZX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LHZX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHZX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LHZ_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LHZ_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LHZ_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LHZ_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LHZ_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LBZUX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LBZUX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LBZUX_RD_RD_RD_0_x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LBZUX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LBZUX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LBZU_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LBZU_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LBZU_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LBZU_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);
	PPC_LBZU_RD_D_LP_RD_RP__x_x_x_x_ra = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LBZX_RD_RD_RD_0_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LBZX_RD_RD_RD_0;

	/* put other parameters */
	/* complex decoding */
	PPC_LBZX_RD_RD_RD_0_x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LBZX_RD_RD_RD_0_x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LBZX_RD_RD_RD_0_x_x_x_x_rb_r = __EXTRACT_32(0x0000F800, 11, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_LBZ_RD_D_LP_RD_RP__decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_LBZ_RD_D_LP_RD_RP_;

	/* put other parameters */
	/* complex decoding */
	PPC_LBZ_RD_D_LP_RD_RP__x_x_x_x_ra_r = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_LBZ_RD_D_LP_RD_RP__x_x_x_x_rd = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_LBZ_RD_D_LP_RD_RP__x_x_x_x_d_d = __EXTRACT_32(0x0000FFFF, 0, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_SC_decode(code_t *code_inst) {

ppc_inst_t *inst = malloc(sizeof(ppc_inst_t));
	
	
	inst->ident = PPC_SC;

	return inst;
}

static ppc_inst_t *ppc_instr_BCLRL_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BCLRL_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BCLRL_D_D_x_x_x_BI = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_BCLRL_D_D_x_x_x_BO = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_BCLR_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BCLR_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BCLR_D_D_x_x_x_BI = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_BCLR_D_D_x_x_x_BO = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_BCCTRL_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BCCTRL_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BCCTRL_D_D_x_x_x_BI = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_BCCTRL_D_D_x_x_x_BO = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_BCCTR_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BCCTR_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BCCTR_D_D_x_x_x_BI = __EXTRACT_32(0x001F0000, 16, code_inst->u32);
	PPC_BCCTR_D_D_x_x_x_BO = __EXTRACT_32(0x03E00000, 21, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_BCLA_D_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BCLA_D_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BCLA_D_D_D_x_x_x_BO = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_BCLA_D_D_D_x_x_x_BD_n = __EXTS_32(0x0000FFFC, 2, code_inst->u32, 14);
	PPC_BCLA_D_D_D_x_x_x_BI = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_BCL_D_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BCL_D_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BCL_D_D_D_x_x_x_BO = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_BCL_D_D_D_x_x_x_BD_n = __EXTS_32(0x0000FFFC, 2, code_inst->u32, 14);
	PPC_BCL_D_D_D_x_x_x_BI = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_BCA_D_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BCA_D_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BCA_D_D_D_x_x_x_BO = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_BCA_D_D_D_x_x_x_BD_n = __EXTS_32(0x0000FFFC, 2, code_inst->u32, 14);
	PPC_BCA_D_D_D_x_x_x_BI = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_BC_D_D_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BC_D_D_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BC_D_D_D_x_x_x_BO = __EXTRACT_32(0x03E00000, 21, code_inst->u32);
	PPC_BC_D_D_D_x_x_x_BD_n = __EXTS_32(0x0000FFFC, 2, code_inst->u32, 14);
	PPC_BC_D_D_D_x_x_x_BI = __EXTRACT_32(0x001F0000, 16, code_inst->u32);

	return inst;

}

static ppc_inst_t *ppc_instr_BLA_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BLA_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BLA_D_x_x_BRANCH_ADDR_n = __EXTS_32(0x03FFFFFC, 2, code_inst->u32, 24);

	return inst;

}

static ppc_inst_t *ppc_instr_BL_0X08X_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BL_0X08X;

	/* put other parameters */
	/* complex decoding */
	PPC_BL_0X08X_x_x_BRANCH_ADDR_n = __EXTS_32(0x03FFFFFC, 2, code_inst->u32, 24);

	return inst;

}

static ppc_inst_t *ppc_instr_BA_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_BA_D;

	/* put other parameters */
	/* complex decoding */
	PPC_BA_D_x_x_BRANCH_ADDR_n = __EXTS_32(0x03FFFFFC, 2, code_inst->u32, 24);

	return inst;

}

static ppc_inst_t *ppc_instr_B_D_decode(code_t *code_inst) {

	/* complex decoding */
	
	ppc_inst_t *inst = (ppc_inst_t *)malloc(sizeof(ppc_inst_t));
	inst->ident = PPC_B_D;

	/* put other parameters */
	/* complex decoding */
	PPC_B_D_x_x_BRANCH_ADDR_n = __EXTS_32(0x03FFFFFC, 2, code_inst->u32, 24);

	return inst;

}




typedef ppc_inst_t *ppc_decode_function_t(code_t *code_inst);

static ppc_decode_function_t *ppc_decode_table[] =
{
	ppc_instr_UNKNOWN_decode,
	ppc_instr_WRTEE_D_decode,
	ppc_instr_WRTEE_RD_decode,
	ppc_instr_TLBWE_decode,
	ppc_instr_TLBSYNC_decode,
	ppc_instr_TLBSX_RD__RD_decode,
	ppc_instr_TLBRE_decode,
	ppc_instr_TLBIVAX_RD__RD_decode,
	ppc_instr_MSYNC_decode,
	ppc_instr_MTDCR_D__RD_decode,
	ppc_instr_MFDCR__RD__D_decode,
	ppc_instr_MBAR_D_decode,
	ppc_instr_ICBT_D__RD__RD_decode,
	ppc_instr_XOR__RD_RD_RD_decode,
	ppc_instr_XOR_RD_RD_RD_decode,
	ppc_instr_ICBI_RD_RD_decode,
	ppc_instr_DCBZ_RD_RD_decode,
	ppc_instr_DCBTST_RD_RD_decode,
	ppc_instr_DCBT_RD_RD_decode,
	ppc_instr_DCBST_RD_RD_decode,
	ppc_instr_DCBI_RD__RD_decode,
	ppc_instr_DCBF_RD__RD_decode,
	ppc_instr_DCBA_RD_RD_decode,
	ppc_instr_TW_D_RD_RD_decode,
	ppc_instr_MFCR_RD_decode,
	ppc_instr_SUBFZEO__RD_RD_decode,
	ppc_instr_SUBFZEO_RD_RD_decode,
	ppc_instr_SUBFZE__RD_RD_decode,
	ppc_instr_SUBFZE_RD_RD_decode,
	ppc_instr_SUBFMEO__RD_RD_decode,
	ppc_instr_SUBFMEO_RD_RD_decode,
	ppc_instr_SUBFME__RD_RD_decode,
	ppc_instr_SUBFME_RD_RD_decode,
	ppc_instr_SUBFEO__RD_RD_RD_decode,
	ppc_instr_SUBFEO_RD_RD_RD_decode,
	ppc_instr_SUBFE__RD_RD_RD_decode,
	ppc_instr_SUBFE_RD_RD_RD_decode,
	ppc_instr_SUBFCO__RD_RD_RD_decode,
	ppc_instr_SUBFCO_RD_RD_RD_decode,
	ppc_instr_SUBFC__RD_RD_RD_decode,
	ppc_instr_SUBFC_RD_RD_RD_decode,
	ppc_instr_SUBFO__RD_RD_RD_decode,
	ppc_instr_SUBFO_RD_RD_RD_decode,
	ppc_instr_SUBF__RD_RD_RD_decode,
	ppc_instr_SUBF_RD_RD_RD_decode,
	ppc_instr_STWCX__RD_RD_RD_decode,
	ppc_instr_STWBRX_RD_RD_RD_decode,
	ppc_instr_STSWI_RD_RD_D_decode,
	ppc_instr_STSWX_RD_RD_RD_decode,
	ppc_instr_STHBRX_RD_RD_RD_decode,
	ppc_instr_STWUX_RD_RD_RD_decode,
	ppc_instr_STWX_RD_RD_RD_decode,
	ppc_instr_STHUX_RD_RD_RD_decode,
	ppc_instr_STHX_RD_RD_RD_decode,
	ppc_instr_STBUX_RD_RD_RD_decode,
	ppc_instr_STBX_RD_RD_RD_decode,
	ppc_instr_SRW__RD_RD_RD_decode,
	ppc_instr_SRW_RD_RD_RD_decode,
	ppc_instr_SRAWI__RD_RD_D_decode,
	ppc_instr_SRAWI_RD_RD_D_decode,
	ppc_instr_SRAW__RD_RD_RD_decode,
	ppc_instr_SRAW_RD_RD_RD_decode,
	ppc_instr_SLW__RD_RD_RD_decode,
	ppc_instr_SLW_RD_RD_RD_decode,
	ppc_instr_ORC__RD_RD_RD_decode,
	ppc_instr_ORC_RD_RD_RD_decode,
	ppc_instr_OR__RD_RD_RD_decode,
	ppc_instr_OR_RD_RD_RD_decode,
	ppc_instr_MTSPR_D_RD_decode,
	ppc_instr_MTMSR_RD_decode,
	ppc_instr_MFSPR_RD_D_decode,
	ppc_instr_MFMSR_RD_decode,
	ppc_instr_NOR__RD_RD_RD_decode,
	ppc_instr_NOR_RD_RD_RD_decode,
	ppc_instr_NEGO__RD_RD_decode,
	ppc_instr_NEGO_RD_RD_decode,
	ppc_instr_NEG__RD_RD_decode,
	ppc_instr_NEG_RD_RD_decode,
	ppc_instr_NAND__RD_RD_RD_decode,
	ppc_instr_NAND_RD_RD_RD_decode,
	ppc_instr_MULLWO__RD_RD_RD_decode,
	ppc_instr_MULLWO_RD_RD_RD_decode,
	ppc_instr_MULLW__RD_RD_RD_decode,
	ppc_instr_MULLW_RD_RD_RD_decode,
	ppc_instr_MULHWU__RD_RD_RD_decode,
	ppc_instr_MULHWU_RD_RD_RD_decode,
	ppc_instr_MULHW__RD_RD_RD_decode,
	ppc_instr_MULHW_RD_RD_RD_decode,
	ppc_instr_MTSPR_S_RD_decode,
	ppc_instr_MCRXR_CRFD_decode,
	ppc_instr_MTCRF_D_RD_decode,
	ppc_instr_MFSPR_RD_S_decode,
	ppc_instr_LWARX_RD_RD_RD_decode,
	ppc_instr_LWBRX_RD_RD_RD_decode,
	ppc_instr_LWZUX_RD_RD_RD_decode,
	ppc_instr_LWZX_RD_RD_RD_decode,
	ppc_instr_LHZUX_RD_RD_RD_decode,
	ppc_instr_LHZX_RD_RD_RD_decode,
	ppc_instr_LHBRX_RD_RD_RD_decode,
	ppc_instr_LHAUX_RD_RD_RD_decode,
	ppc_instr_LHAX_RD_RD_RD_decode,
	ppc_instr_LBZUX_RD_RD_RD_decode,
	ppc_instr_LBZX_RD_RD_RD_decode,
	ppc_instr_ISEL_RD__RD__R5B__D_decode,
	ppc_instr_EXTSH__RD_RD_decode,
	ppc_instr_EXTSH_RD_RD_decode,
	ppc_instr_EXTSB__RD_RD_decode,
	ppc_instr_EXTSB_RD_RD_decode,
	ppc_instr_EQV__RD_RD_RD_decode,
	ppc_instr_EQV_RD_RD_RD_decode,
	ppc_instr_DIVWUO__RD_RD_RD_decode,
	ppc_instr_DIVWUO_RD_RD_RD_decode,
	ppc_instr_DIVWU__RD_RD_RD_decode,
	ppc_instr_DIVWU_RD_RD_RD_decode,
	ppc_instr_DIVWO__RD_RD_RD_decode,
	ppc_instr_DIVWO_RD_RD_RD_decode,
	ppc_instr_DIVW__RD_RD_RD_decode,
	ppc_instr_DIVW_RD_RD_RD_decode,
	ppc_instr_CNTLZW__RD__RD_decode,
	ppc_instr_CNTLZW_RD__RD_decode,
	ppc_instr_CMPL_D_D_RD_RD_decode,
	ppc_instr_CMP_D_D_RD_RD_decode,
	ppc_instr_ANDC__RD_RD_RD_decode,
	ppc_instr_ANDC_RD_RD_RD_decode,
	ppc_instr_AND__RD_RD_RD_decode,
	ppc_instr_AND_RD_RD_RD_decode,
	ppc_instr_ADDZEO__RD_RD_decode,
	ppc_instr_ADDZEO_RD_RD_decode,
	ppc_instr_ADDZE__RD_RD_decode,
	ppc_instr_ADDZE_RD_RD_decode,
	ppc_instr_ADDMEO__RD_RD_decode,
	ppc_instr_ADDMEO_RD_RD_decode,
	ppc_instr_ADDME__RD_RD_decode,
	ppc_instr_ADDME_RD_RD_decode,
	ppc_instr_ADDEO__RD_RD_RD_decode,
	ppc_instr_ADDEO_RD_RD_RD_decode,
	ppc_instr_ADDE__RD_RD_RD_decode,
	ppc_instr_ADDE_RD_RD_RD_decode,
	ppc_instr_ADDCO__RD_RD_RD_decode,
	ppc_instr_ADDCO_RD_RD_RD_decode,
	ppc_instr_ADDC__RD_RD_RD_decode,
	ppc_instr_ADDC_RD_RD_RD_decode,
	ppc_instr_ADDSS_RD_RD_RD_decode,
	ppc_instr_E_XORIS_RD__RD__X_decode,
	ppc_instr_E_SUBFICS_RD__RD__D_decode,
	ppc_instr_E_STMW_RD__D_LP_RD_RP__decode,
	ppc_instr_E_STWU_RD__D_LP_RD_RP__decode,
	ppc_instr_E_STW_RD__D_LP_RD_RP__decode,
	ppc_instr_E_STHU_RD__D_LP_RD_RP__decode,
	ppc_instr_E_STH_RD__D_LP_RD_RP__decode,
	ppc_instr_E_STBU_RD__D_LP_RD_RP__decode,
	ppc_instr_E_STB_RD__D_LP_RD_RP__decode,
	ppc_instr_E_SRWIS_RD__RD__D_decode,
	ppc_instr_E_SLWIS_RD__RD__D_decode,
	ppc_instr_E_RLWINM_RD__RD__D__D__D_decode,
	ppc_instr_E_RLWIMI_RD__RD__D__D__D_decode,
	ppc_instr_E_RLWIS_RD__RD__D_decode,
	ppc_instr_E_RLWS_RD__RD__RD_decode,
	ppc_instr_E_ORIS_RD__RD__X_decode,
	ppc_instr_E_OR2IS_RD__X_decode,
	ppc_instr_E_OR2I_RD__X_decode,
	ppc_instr_E_MULL2I_RD__D_decode,
	ppc_instr_E_MULLI_RD__RD__D_decode,
	ppc_instr_E_MCRF_CRD__CRD_decode,
	ppc_instr_E_LMW_RD__D_LP_RD_RP__decode,
	ppc_instr_E_LWZU_RD__D_LP_RD_RP__decode,
	ppc_instr_E_LWZ_RD__D_LP_RD_RP__decode,
	ppc_instr_E_LIS_RD__X_decode,
	ppc_instr_E_LI_RD__X_decode,
	ppc_instr_E_LHZU_RD__D_LP_RD_RP__decode,
	ppc_instr_E_LHZ_RD__D_LP_RD_RP__decode,
	ppc_instr_E_LHAU_RD__D_LP_RD_RP__decode,
	ppc_instr_E_LHA_RD__D_LP_RD_RP__decode,
	ppc_instr_E_LBZU_RD__D_LP_RD_RP__decode,
	ppc_instr_E_LBZ_RD__D_LP_RD_RP__decode,
	ppc_instr_E_CRXOR_CRBD__CRBD__CRBD_decode,
	ppc_instr_E_CRORC_CRBD__CRBD__CRBD_decode,
	ppc_instr_E_CROR_CRBD__CRBD__CRBD_decode,
	ppc_instr_E_CRNOR_CRBD__CRBD__CRBD_decode,
	ppc_instr_E_CRNAND_CRBD__CRBD__CRBD_decode,
	ppc_instr_E_CREQV_CRBD__CRBD__CRBD_decode,
	ppc_instr_E_CRANDC_CRBD__CRBD__CRBD_decode,
	ppc_instr_E_CRAND_CRBD__CRBD__CRBD_decode,
	ppc_instr_E_CMPLI_CRD__RD__D_decode,
	ppc_instr_E_CMPL16I_RD__D_decode,
	ppc_instr_E_CMPI_CRD__RD__D_decode,
	ppc_instr_E_CMPHL16I_RD__D_decode,
	ppc_instr_E_CMPHL_CRD__RD__RD_decode,
	ppc_instr_E_CMPH16I_RD__D_decode,
	ppc_instr_E_CMPH_CRD__RD__RD_decode,
	ppc_instr_E_CMP16I_RD__D_decode,
	ppc_instr_E_BCS_X__X_08X_decode,
	ppc_instr_E_BS_08X_decode,
	ppc_instr_E_ADDICS_RD__RD__D_decode,
	ppc_instr_E_AND2IS__RD__D_decode,
	ppc_instr_E_AND2I__RD__D_decode,
	ppc_instr_E_ADDICS_RD__RD__D_0_decode,
	ppc_instr_E_ADDIS_RD__RD__D_decode,
	ppc_instr_E_ADD2IS_RD__D_decode,
	ppc_instr_E_ADD2I__RD__D_decode,
	ppc_instr_E_ADD16I_RD__RD__D_decode,
	ppc_instr_SE_SUBIS_RD__D_decode,
	ppc_instr_SE_SUBF_RD__RD_decode,
	ppc_instr_SE_SUB_RD__RD_decode,
	ppc_instr_SE_STW_RD__D_LP_RD_RP__decode,
	ppc_instr_SE_STH_RD__D_LP_RD_RP__decode,
	ppc_instr_SE_STB_RD__D_LP_RD_RP__decode,
	ppc_instr_SE_SRWI_RD__D_decode,
	ppc_instr_SE_SRW_RD__RD_decode,
	ppc_instr_SE_SRAWI_RD__D_decode,
	ppc_instr_SE_SRAW_RD__RD_decode,
	ppc_instr_SE_SLWI_RD__D_decode,
	ppc_instr_SE_SLW_RD__RD_decode,
	ppc_instr_SE_SC_decode,
	ppc_instr_SE_RFI_decode,
	ppc_instr_SE_RFDI_decode,
	ppc_instr_SE_RFCI_decode,
	ppc_instr_SE_OR_RD__RD_decode,
	ppc_instr_SE_NOT_RD_decode,
	ppc_instr_SE_NEG_RD_decode,
	ppc_instr_SE_MULLW_RD__RD_decode,
	ppc_instr_SE_MTLR_RD_decode,
	ppc_instr_SE_MTCTR_RD_decode,
	ppc_instr_SE_MTAR_RD__RD_decode,
	ppc_instr_SE_MR_RD__RD_decode,
	ppc_instr_SE_MFLR_RD_decode,
	ppc_instr_SE_MFCTR_RD_decode,
	ppc_instr_SE_MFAR_RD__RD_decode,
	ppc_instr_SE_LI_RD__D_decode,
	ppc_instr_SE_LWZ_RD__D_LP_RD_RP__decode,
	ppc_instr_SE_LHZ_RD__D_LP_RD_RP__decode,
	ppc_instr_SE_LBZ_RD__D_LP_RD_RP__decode,
	ppc_instr_SE_EXTZH_RD_decode,
	ppc_instr_SE_EXTZB_RD_decode,
	ppc_instr_SE_EXTSH_RD_decode,
	ppc_instr_SE_EXTSB_RD_decode,
	ppc_instr_SE_CMPLI_RD__D_decode,
	ppc_instr_SE_CMPL_RD__RD_decode,
	ppc_instr_SE_CMPI_RD__D_decode,
	ppc_instr_SE_CMPHL_RD__RD_decode,
	ppc_instr_SE_CMPH_RD__RD_decode,
	ppc_instr_SE_CMP_RD__RD_decode,
	ppc_instr_SE_BTSTI_RD__D_decode,
	ppc_instr_SE_BSETI_RD__D_decode,
	ppc_instr_SE_BMSKI_RD__D_decode,
	ppc_instr_BLRS_decode,
	ppc_instr_BGENI_RD__D_decode,
	ppc_instr_SE_BCTRS_decode,
	ppc_instr_BCLRI_RD__D_decode,
	ppc_instr_SE_BC_X__X__08X_decode,
	ppc_instr_SE_BS_08X_decode,
	ppc_instr_SE_ANDC_RD__RD_decode,
	ppc_instr_SE_ANDI_RD__D_decode,
	ppc_instr_E_ANDS_RD__RD__decode,
	ppc_instr_SE_ADDI_RD__D_decode,
	ppc_instr_SE_ADD_RD_RD_decode,
	ppc_instr_MFAPIDI_RD__RD_decode,
	ppc_instr_TLBSYNC_0_decode,
	ppc_instr_TLBIE_RD_decode,
	ppc_instr_TLBIA_decode,
	ppc_instr_RFI_decode,
	ppc_instr_MTSRIN_RD_RD_decode,
	ppc_instr_MTSR_D_RD_decode,
	ppc_instr_MFSRIN_RD_RD_decode,
	ppc_instr_MFSR_RD_D_decode,
	ppc_instr_MTSPR_D_RD_0_decode,
	ppc_instr_MTMSR_RD_0_decode,
	ppc_instr_MFSPR_RD_D_0_decode,
	ppc_instr_MFMSR_RD_0_decode,
	ppc_instr_MFTB_RD_D_decode,
	ppc_instr_ISYNC_decode,
	ppc_instr_EIEIO_decode,
	ppc_instr_ECOWX_RD_RD_RD_decode,
	ppc_instr_ECIWX_RD_RD_RD_decode,
	ppc_instr_ICBI_RD_RD_0_decode,
	ppc_instr_DCBZ_RD_RD_0_decode,
	ppc_instr_DCBTST_RD_RD_0_decode,
	ppc_instr_DCBT_RD_RD_0_decode,
	ppc_instr_DCBST_RD_RD_0_decode,
	ppc_instr_DCBI_RD__RD_0_decode,
	ppc_instr_DCBF_RD__RD_0_decode,
	ppc_instr_DCBA_RD_RD_0_decode,
	ppc_instr_MTFSFI__CRFD_D_decode,
	ppc_instr_MTFSFI_CRFD_D_decode,
	ppc_instr_MTFSF__D_FRD_decode,
	ppc_instr_MTFSF_D_FRD_decode,
	ppc_instr_MTFSB1__CRBD_decode,
	ppc_instr_MTFSB1_CRBD_decode,
	ppc_instr_MTFSB0__CRBD_decode,
	ppc_instr_MTFSB0_CRBD_decode,
	ppc_instr_MFFS__FRD_decode,
	ppc_instr_MFFS_FRD_decode,
	ppc_instr_MCRFS_CRFD_CRFD_decode,
	ppc_instr_FCTIWZ__FRD_FRD_decode,
	ppc_instr_FCTIWZ_FRD_FRD_decode,
	ppc_instr_FCTIW__FRD_FRD_decode,
	ppc_instr_FCTIW_FRD_FRD_decode,
	ppc_instr_FRSP__FRD_FRD_decode,
	ppc_instr_FRSP_FRD_FRD_decode,
	ppc_instr_FNABS__FRD_FRD_decode,
	ppc_instr_FNABS_FRD_FRD_decode,
	ppc_instr_FABS__FRD_FRD_decode,
	ppc_instr_FABS_FRD_FRD_decode,
	ppc_instr_FNEG__FRD_FRD_decode,
	ppc_instr_FNEG_FRD_FRD_decode,
	ppc_instr_FMR__FRD_FRD_decode,
	ppc_instr_FMR_FRD_FRD_decode,
	ppc_instr_FCMPU_CRFD_FRD_FRD_decode,
	ppc_instr_FCMPO_CRFD_FRD_FRD_decode,
	ppc_instr_FNMSUBS__FRD_FRD_FRD_FRD_decode,
	ppc_instr_FNMSUBS_FRD_FRD_FRD_FRD_decode,
	ppc_instr_FNMSUB__FRD_FRD_FRD_FRD_decode,
	ppc_instr_FNMSUB_FRD_FRD_FRD_FRD_decode,
	ppc_instr_FMSUBS__FRD_FRD_FRD_FRD_decode,
	ppc_instr_FMSUBS_FRD_FRD_FRD_FRD_decode,
	ppc_instr_FMSUB__FRD_FRD_FRD_FRD_decode,
	ppc_instr_FMSUB_FRD_FRD_FRD_FRD_decode,
	ppc_instr_FNMADDS__FRD_FRD_FRD_FRD_decode,
	ppc_instr_FNMADDS_FRD_FRD_FRD_FRD_decode,
	ppc_instr_FNMADD__FRD_FRD_FRD_FRD_decode,
	ppc_instr_FNMADD_FRD_FRD_FRD_FRD_decode,
	ppc_instr_FMADDS__FRD_FRD_FRD_FRD_decode,
	ppc_instr_FMADDS_FRD_FRD_FRD_FRD_decode,
	ppc_instr_FMADD__FRD_FRD_FRD_FRD_decode,
	ppc_instr_FMADD_FRD_FRD_FRD_FRD_decode,
	ppc_instr_FDIVS__FRD_FRD_FRD_decode,
	ppc_instr_FDIVS_FRD_FRD_FRD_decode,
	ppc_instr_FDIV__FRD_FRD_FRD_decode,
	ppc_instr_FDIV_FRD_FRD_FRD_decode,
	ppc_instr_FMULS__FRD_FRD_FRD_decode,
	ppc_instr_FMULS_FRD_FRD_FRD_decode,
	ppc_instr_FMUL__FRD_FRD_FRD_decode,
	ppc_instr_FMUL_FRD_FRD_FRD_decode,
	ppc_instr_FSUBS__FRD_FRD_FRD_decode,
	ppc_instr_FSUBS_FRD_FRD_FRD_decode,
	ppc_instr_FSUB__FRD_FRD_FRD_decode,
	ppc_instr_FSUB_FRD_FRD_FRD_decode,
	ppc_instr_FADDS__FRD_FRD_FRD_decode,
	ppc_instr_FADDS_FRD_FRD_FRD_decode,
	ppc_instr_FADD__FRD_FRD_FRD_decode,
	ppc_instr_FADD_FRD_FRD_FRD_decode,
	ppc_instr_STFSUX_FRD_RD_RD_decode,
	ppc_instr_STFSU_FRD_D_LP_RD_RP__decode,
	ppc_instr_STFSX_FRD_RD_RD_decode,
	ppc_instr_STFS_FRD_D_LP_RD_RP__decode,
	ppc_instr_STFDUX_FRD_RD_RD_decode,
	ppc_instr_STFDU_FRD_D_LP_RD_RP__decode,
	ppc_instr_STFDX_FRD_RD_RD_decode,
	ppc_instr_STFD_FRD_D_LP_RD_RP__decode,
	ppc_instr_LFSUX_FRD_RD_RD_decode,
	ppc_instr_LFSU_FRD_D_LP_RD_RP__decode,
	ppc_instr_LFSX_FRD_RD_RD_decode,
	ppc_instr_LFS_FRD_D_LP_RD_RP__decode,
	ppc_instr_LFDUX_FRD_RD_RD_decode,
	ppc_instr_LFDU_FRD_D_LP_RD_RP__decode,
	ppc_instr_LFDX_FRD_RD_RD_decode,
	ppc_instr_LFD_FRD_D_LP_RD_RP__decode,
	ppc_instr_TWI_D_RD_D_decode,
	ppc_instr_TW_D_RD_RD_0_decode,
	ppc_instr_SYNC_decode,
	ppc_instr_STWCX__RD_RD_RD_0_decode,
	ppc_instr_LWARX_RD_RD_RD_0_decode,
	ppc_instr_MFSPR_RD_S_0_decode,
	ppc_instr_MTSPR_S_RD_0_decode,
	ppc_instr_MFCR_RD_0_decode,
	ppc_instr_ISEL_RD__RD__R5B__D_0_decode,
	ppc_instr_MCRXR_CRFD_0_decode,
	ppc_instr_MTCRF_D_RD_0_decode,
	ppc_instr_MCRF_CRFD_CRFD_decode,
	ppc_instr_CRORC_CRBD_CRBD_CRBD_decode,
	ppc_instr_CRANDC_CRBD_CRBD_CRBD_decode,
	ppc_instr_CREQV_CRBD_CRBD_CRBD_decode,
	ppc_instr_CRNOR_CRBD_CRBD_CRBD_decode,
	ppc_instr_CRNAND_CRBD_CRBD_CRBD_decode,
	ppc_instr_CRXOR_CRBD_CRBD_CRBD_decode,
	ppc_instr_CROR_CRBD_CRBD_CRBD_decode,
	ppc_instr_CRAND_CRBD_CRBD_CRBD_decode,
	ppc_instr_SRAW__RD_RD_RD_0_decode,
	ppc_instr_SRAW_RD_RD_RD_0_decode,
	ppc_instr_SRAWI__RD_RD_D_0_decode,
	ppc_instr_SRAWI_RD_RD_D_0_decode,
	ppc_instr_SRW__RD_RD_RD_0_decode,
	ppc_instr_SRW_RD_RD_RD_0_decode,
	ppc_instr_SLW__RD_RD_RD_0_decode,
	ppc_instr_SLW_RD_RD_RD_0_decode,
	ppc_instr_RLWIMI__RD_RD_D_D_D_decode,
	ppc_instr_RLWIMI_RD_RD_D_D_D_decode,
	ppc_instr_RLWNM__RD_RD_RD_D_D_decode,
	ppc_instr_RLWNM_RD_RD_RD_D_D_decode,
	ppc_instr_RLWINM__RD_RD_D_D_D_decode,
	ppc_instr_RLWINM_RD_RD_D_D_D_decode,
	ppc_instr_CNTLZW__RD__RD_0_decode,
	ppc_instr_CNTLZW_RD__RD_0_decode,
	ppc_instr_EXTSH__RD_RD_0_decode,
	ppc_instr_EXTSH_RD_RD_0_decode,
	ppc_instr_EXTSB__RD_RD_0_decode,
	ppc_instr_EXTSB_RD_RD_0_decode,
	ppc_instr_EQV__RD_RD_RD_0_decode,
	ppc_instr_EQV_RD_RD_RD_0_decode,
	ppc_instr_NAND__RD_RD_RD_0_decode,
	ppc_instr_NAND_RD_RD_RD_0_decode,
	ppc_instr_NOR__RD_RD_RD_0_decode,
	ppc_instr_NOR_RD_RD_RD_0_decode,
	ppc_instr_XORIS_RD_RD_D_decode,
	ppc_instr_XORI_RD_RD_D_decode,
	ppc_instr_XOR__RD_RD_RD_0_decode,
	ppc_instr_XOR_RD_RD_RD_0_decode,
	ppc_instr_ANDC__RD_RD_RD_0_decode,
	ppc_instr_ANDC_RD_RD_RD_0_decode,
	ppc_instr_ANDIS__RD_RD_D_decode,
	ppc_instr_ANDI__RD_RD_D_decode,
	ppc_instr_AND__RD_RD_RD_0_decode,
	ppc_instr_AND_RD_RD_RD_0_decode,
	ppc_instr_ORC__RD_RD_RD_0_decode,
	ppc_instr_ORC_RD_RD_RD_0_decode,
	ppc_instr_ORIS_RD_RD_D_decode,
	ppc_instr_ORI_RD_RD_D_decode,
	ppc_instr_OR__RD_RD_RD_0_decode,
	ppc_instr_OR_RD_RD_RD_0_decode,
	ppc_instr_CMPL_D_D_RD_RD_0_decode,
	ppc_instr_CMPLI_D_D_RD_D_decode,
	ppc_instr_CMP_D_D_RD_RD_0_decode,
	ppc_instr_CMPI_D_D_RD_D_decode,
	ppc_instr_NEGO__RD_RD_0_decode,
	ppc_instr_NEGO_RD_RD_0_decode,
	ppc_instr_NEG__RD_RD_0_decode,
	ppc_instr_NEG_RD_RD_0_decode,
	ppc_instr_DIVWUO__RD_RD_RD_0_decode,
	ppc_instr_DIVWUO_RD_RD_RD_0_decode,
	ppc_instr_DIVWU__RD_RD_RD_0_decode,
	ppc_instr_DIVWU_RD_RD_RD_0_decode,
	ppc_instr_DIVWO__RD_RD_RD_0_decode,
	ppc_instr_DIVWO_RD_RD_RD_0_decode,
	ppc_instr_DIVW__RD_RD_RD_0_decode,
	ppc_instr_DIVW_RD_RD_RD_0_decode,
	ppc_instr_MULHWU__RD_RD_RD_0_decode,
	ppc_instr_MULHWU_RD_RD_RD_0_decode,
	ppc_instr_MULHW__RD_RD_RD_0_decode,
	ppc_instr_MULHW_RD_RD_RD_0_decode,
	ppc_instr_MULLI_RD_RD_D_decode,
	ppc_instr_MULLWO__RD_RD_RD_0_decode,
	ppc_instr_MULLWO_RD_RD_RD_0_decode,
	ppc_instr_MULLW__RD_RD_RD_0_decode,
	ppc_instr_MULLW_RD_RD_RD_0_decode,
	ppc_instr_SUBFZEO__RD_RD_0_decode,
	ppc_instr_SUBFZEO_RD_RD_0_decode,
	ppc_instr_SUBFZE__RD_RD_0_decode,
	ppc_instr_SUBFZE_RD_RD_0_decode,
	ppc_instr_SUBFMEO__RD_RD_0_decode,
	ppc_instr_SUBFMEO_RD_RD_0_decode,
	ppc_instr_SUBFME__RD_RD_0_decode,
	ppc_instr_SUBFME_RD_RD_0_decode,
	ppc_instr_SUBFEO__RD_RD_RD_0_decode,
	ppc_instr_SUBFEO_RD_RD_RD_0_decode,
	ppc_instr_SUBFE__RD_RD_RD_0_decode,
	ppc_instr_SUBFE_RD_RD_RD_0_decode,
	ppc_instr_SUBFCO__RD_RD_RD_0_decode,
	ppc_instr_SUBFCO_RD_RD_RD_0_decode,
	ppc_instr_SUBFC__RD_RD_RD_0_decode,
	ppc_instr_SUBFC_RD_RD_RD_0_decode,
	ppc_instr_SUBFIC_RD_RD_D_decode,
	ppc_instr_SUBFO__RD_RD_RD_0_decode,
	ppc_instr_SUBFO_RD_RD_RD_0_decode,
	ppc_instr_SUBF__RD_RD_RD_0_decode,
	ppc_instr_SUBF_RD_RD_RD_0_decode,
	ppc_instr_ADDZEO__RD_RD_0_decode,
	ppc_instr_ADDZEO_RD_RD_0_decode,
	ppc_instr_ADDZE__RD_RD_0_decode,
	ppc_instr_ADDZE_RD_RD_0_decode,
	ppc_instr_ADDMEO__RD_RD_0_decode,
	ppc_instr_ADDMEO_RD_RD_0_decode,
	ppc_instr_ADDME__RD_RD_0_decode,
	ppc_instr_ADDME_RD_RD_0_decode,
	ppc_instr_ADDEO__RD_RD_RD_0_decode,
	ppc_instr_ADDEO_RD_RD_RD_0_decode,
	ppc_instr_ADDE__RD_RD_RD_0_decode,
	ppc_instr_ADDE_RD_RD_RD_0_decode,
	ppc_instr_ADDCO__RD_RD_RD_0_decode,
	ppc_instr_ADDCO_RD_RD_RD_0_decode,
	ppc_instr_ADDC__RD_RD_RD_0_decode,
	ppc_instr_ADDC_RD_RD_RD_0_decode,
	ppc_instr_ADDIC__RD_RD_D_decode,
	ppc_instr_ADDIC_RD_RD_D_decode,
	ppc_instr_ADDIS_RD_RD_D_decode,
	ppc_instr_ADDI_RD_RD_D_decode,
	ppc_instr_ADDSS_RD_RD_RD_0_decode,
	ppc_instr_STSWX_RD_RD_RD_0_decode,
	ppc_instr_STSWI_RD_RD_D_0_decode,
	ppc_instr_STMW_RD_D_LP_RD_RP__decode,
	ppc_instr_STWBRX_RD_RD_RD_0_decode,
	ppc_instr_STHBRX_RD_RD_RD_0_decode,
	ppc_instr_STWUX_RD_RD_RD_0_decode,
	ppc_instr_STWU_RD_D_LP_RD_RP__decode,
	ppc_instr_STWX_RD_RD_RD_0_decode,
	ppc_instr_STW_RD_D_LP_RD_RP__decode,
	ppc_instr_STHUX_RD_RD_RD_0_decode,
	ppc_instr_STHU_RD_D_LP_RD_RP__decode,
	ppc_instr_STHX_RD_RD_RD_0_decode,
	ppc_instr_STH_RD_D_LP_RD_RP__decode,
	ppc_instr_STBUX_RD_RD_RD_0_decode,
	ppc_instr_STBU_RD_D_LP_RD_RP__decode,
	ppc_instr_STBX_RD_RD_RD_0_decode,
	ppc_instr_STB_RD_D_LP_RD_RP__decode,
	ppc_instr_LSWX_RD_RD_RD_decode,
	ppc_instr_LSWI_RD_RD_D_decode,
	ppc_instr_LMW_RD_D_LP_RD_RP__decode,
	ppc_instr_LWBRX_RD_RD_RD_0_decode,
	ppc_instr_LHBRX_RD_RD_RD_0_decode,
	ppc_instr_LWZUX_RD_RD_RD_0_decode,
	ppc_instr_LWZU_RD_D_LP_RD_RP__decode,
	ppc_instr_LWZX_RD_RD_RD_0_decode,
	ppc_instr_LWZ_RD_D_LP_RD_RP__decode,
	ppc_instr_LHAUX_RD_RD_RD_0_decode,
	ppc_instr_LHAU_RD_D_LP_RD_RP__decode,
	ppc_instr_LHAX_RD_RD_RD_0_decode,
	ppc_instr_LHA_RD_D_LP_RD_RP__decode,
	ppc_instr_LHZUX_RD_RD_RD_0_decode,
	ppc_instr_LHZU_RD_D_LP_RD_RP__decode,
	ppc_instr_LHZX_RD_RD_RD_0_decode,
	ppc_instr_LHZ_RD_D_LP_RD_RP__decode,
	ppc_instr_LBZUX_RD_RD_RD_0_decode,
	ppc_instr_LBZU_RD_D_LP_RD_RP__decode,
	ppc_instr_LBZX_RD_RD_RD_0_decode,
	ppc_instr_LBZ_RD_D_LP_RD_RP__decode,
	ppc_instr_SC_decode,
	ppc_instr_BCLRL_D_D_decode,
	ppc_instr_BCLR_D_D_decode,
	ppc_instr_BCCTRL_D_D_decode,
	ppc_instr_BCCTR_D_D_decode,
	ppc_instr_BCLA_D_D_D_decode,
	ppc_instr_BCL_D_D_D_decode,
	ppc_instr_BCA_D_D_D_decode,
	ppc_instr_BC_D_D_D_decode,
	ppc_instr_BLA_D_decode,
	ppc_instr_BL_0X08X_decode,
	ppc_instr_BA_D_decode,
	ppc_instr_B_D_decode
};

/* free a dynamically allocated instruction, we try not to free an already freed or NULL pointer */
void ppc_free_inst(ppc_inst_t *inst) {
	assert(inst);
	// NB : inst->instrinput is allocate with the same malloc which allocate an instr

	    /* finally free it */
	free(inst);
	}

#if defined(__cplusplus)
}
#endif

#endif /* GLISS_PPC_INCLUDE_PPC_DECODE_TABLE_H */
