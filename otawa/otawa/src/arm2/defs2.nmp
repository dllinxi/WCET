type word = card(32)

canon word "_GPR"(word)
canon word "_CPSR"()
canon word "sem::set"(word, word)
canon word "sem::seti"(word, word)
canon word "sem::shl"(word, word, word)
canon word "sem::shr"(word, word, word)
canon word "sem::asr"(word, word, word)
canon word "sem::add"(word, word, word)
canon word "sem::sub"(word, word, word)
canon word "sem::cmp"(word, word, word)
canon word "sem::mul"(word, word, word)
canon word "sem::mulh"(word, word, word)
canon word "sem::_and"(word, word, word)
canon word "sem::_not"(word, word)
canon word "sem::_xor"(word, word, word)
canon word "sem::_or"(word, word, word)
canon word "sem::neg"(word, word)
canon word "sem::_if"(word, word, word)
canon word "sem::scratch"(word)
canon word "sem::load"(word, word, word)
canon word "sem::store"(word, word, word)
canon word "sem::trap"()
canon word "sem::cont"()
canon word "sem::branch"(word)
canon "block.add"(word)


canon card(32) "sem::ANY_COND"
canon card(32) "sem::EQ"
canon card(32) "sem::NE"
canon card(32) "sem::LT"
canon card(32) "sem::LE"
canon card(32) "sem::GT"
canon card(32) "sem::GE"
canon card(32) "sem::ULT"
canon card(32) "sem::ULE"
canon card(32) "sem::UGT"
canon card(32) "sem::UGE"


var ii[1, s32]
var cnt[1, u32]


// ****** mode extends ******

extend REG_INDEX
	i = R(r)
	use_pc = r == 15

// mode shiftedRegister = immShift | regShift
// result in t1

extend immShift
	otawa_sem = {
		if shiftAmt == 0 then _set(t1, r.i); else
			seti(t1, shiftAmt);
			switch (shiftKind) {
			case LSL: shl(t1, r.i, t1);
			case LSR: shr(t1, r.i, t1);
			case ASR: asr(t1, r.i, t1);
			case ROR: scratch(t1); if shiftAmt == 0 then scratch(_CPSR); endif;
			};
		endif;
	}
	use_pc = r.use_pc

extend regShift
	otawa_sem = {
		switch(shiftKind) {
		case LSL: shl(t1, r.i, shiftAmt.i);
		case LSR: shr(t1, r.i, shiftAmt.i);
		case ASR: asr(t1, r.i, shiftAmt.i);
		case ROR: scratch(t1);
		};
	}
	use_pc = r.use_pc

extend rotatedImmediate
	v = extu(v) >>> (extu(rotate) << 1)


// condition extension
extend condition
	otawa_ever = value == 14
	otawa_never = value == 15
	otawa_cond =
		switch(value) {
		case 0:		"sem::EQ"
		case 1:		"sem::NE"
		case 2:		"sem::UGE"
		case 3:		"sem::ULT"
		case 8:		"sem::UGT"
		case 9:		"sem::ULE"
		case 10:	"sem::GE"
		case 11:	"sem::LT"
		case 12:	"sem::GT"
		case 13:	"sem::LE"
		default:	"sem::ANY_COND"
	}


// load-store shifted operand (produce result in t1)
extend loadstoreSpecifiedShift
	otawa_sem = {
		if shiftAmt == 0 then
			_set(t1, r.i);
		else
			seti(t1, shiftAmt);
			switch(shiftKind) {
			case LSL:	shl(t1, r.i, t1);
			case LSR:	shr(t1, r.i, t1);
			case ASR:	asr(t1, r.i, t1);
			case ROR:	scratch(t1);
			};
		endif;
	}
	use_pc = r.use_pc


extend setBon
	value = 1

extend setBoff
	value = 0


// thumb modes
extend REG_THUMB_INDEX
	i = R(ro)
	hi = R(ro + 8)
