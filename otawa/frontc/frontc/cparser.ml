type token =
  | IDENT of (string)
  | CST_CHAR of (string)
  | CST_INT of (string)
  | CST_FLOAT of (string)
  | CST_STRING of (string)
  | NAMED_TYPE of (string)
  | GNU_ATTRS of (Cabs.gnu_attrs)
  | EOF
  | CHAR
  | INT
  | DOUBLE
  | FLOAT
  | VOID
  | ENUM
  | STRUCT
  | TYPEDEF
  | UNION
  | SIGNED
  | UNSIGNED
  | LONG
  | SHORT
  | VOLATILE
  | EXTERN
  | STATIC
  | CONST
  | AUTO
  | REGISTER
  | RESTRICT
  | SIZEOF
  | ASM
  | EQ of (string * int)
  | PLUS_EQ of (string * int)
  | MINUS_EQ of (string * int)
  | STAR_EQ of (string * int)
  | SLASH_EQ of (string * int)
  | PERCENT_EQ of (string * int)
  | AND_EQ of (string * int)
  | PIPE_EQ of (string * int)
  | CIRC_EQ of (string * int)
  | INF_INF_EQ of (string * int)
  | SUP_SUP_EQ of (string * int)
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | TILDE
  | AND
  | PIPE
  | CIRC
  | EXCLAM
  | AND_AND
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS
  | MINUS_MINUS
  | RPAREN of (string * int)
  | LPAREN of (string * int)
  | RBRACE of (string * int)
  | LBRACE of (string * int)
  | LBRACKET of (string * int)
  | RBRACKET of (string * int)
  | COLON of (string * int)
  | SEMICOLON of (string * int)
  | COMMA of (string * int)
  | ELLIPSIS of (string * int)
  | QUEST of (string * int)
  | BREAK of (string * int)
  | CONTINUE of (string * int)
  | GOTO of (string * int)
  | RETURN of (string * int)
  | SWITCH of (string * int)
  | CASE of (string * int)
  | DEFAULT of (string * int)
  | WHILE of (string * int)
  | DO of (string * int)
  | FOR of (string * int)
  | IF of (string * int)
  | ELSE of (string * int)
  | ATTRIBUTE
  | EXTENSION
  | INLINE

open Parsing;;
let _ = parse_error;;
# 35 "cparser.mly"
open Cabs
let version = "Cparser V3.0b 10.9.99 Hugues Cassï¿½"

let parse_error _ =
	Clexer.display_error "Syntax error" (Parsing.symbol_start ()) (Parsing.symbol_end ())

let fatal _ =
	Clexer.display_error "fatal error" (Parsing.symbol_start ()) (Parsing.symbol_end ())


(** Modifiers. *)
type modifier =
	| BASE_SIZE of size					(** size modifier *)
	| BASE_SIGN of sign					(** sign modifier *)
	| BASE_STORAGE of storage			(** storage modifier *)
	| BASE_VOLATILE						(** "volatile" modifier. *)
	| BASE_CONST						(** "const" modifier. *)
	| BASE_GNU_ATTR of Cabs.gnu_attrs	(** GNU attribute. *)


(** Apply a modifier on a type.
	@param typ	Type to apply modifier to.
	@param sto	Storage to apply modifier to.
	@param modi	Modifier to apply.
	@return		(type, storage) after the modifier application. *)
let apply_mod (typ, sto) modi =
	let rec mod_root typ =
		match (typ, modi) with
		| (NO_TYPE, BASE_SIGN sign) -> INT (NO_SIZE, sign)
		| (NO_TYPE, BASE_SIZE size) -> INT (size, NO_SIGN)
		| (CHAR NO_SIGN, BASE_SIGN sign) -> CHAR sign
		| (INT (NO_SIZE, sign), BASE_SIZE size) -> INT (size, sign)
		| (INT (LONG, sign), BASE_SIZE LONG) -> INT (LONG_LONG, sign)
		| (INT (size, NO_SIGN), BASE_SIGN sign) -> INT (size, sign)
		| (BITFIELD (t, exp), BASE_SIGN sign) -> BITFIELD (t, exp)
		| (FLOAT false, BASE_SIZE LONG) -> FLOAT true
		| (DOUBLE false, BASE_SIZE LONG) -> DOUBLE true
		| (PTR typ, _) -> PTR (mod_root typ)
		| (CONST typ, _) -> CONST (mod_root typ)
		| (VOLATILE typ, _) -> VOLATILE (mod_root typ)
		| (GNU_TYPE (attrs, typ), _) -> GNU_TYPE (attrs, mod_root typ)
		| (TYPE_LINE (f, l, t), _) -> TYPE_LINE (f, l, mod_root t)
		| _ -> raise BadModifier in
	let check_access typ =
		match typ with
		(* hmm... "const" and "volatile" together seems to be valid *)
		PROTO _ | OLD_PROTO _ (*| CONST _ | VOLATILE _*) -> false
		| _ -> true in
	match modi with
	  BASE_SIGN _ -> (mod_root typ, sto)
	| BASE_SIZE _ -> (mod_root typ, sto)
	| BASE_CONST ->
		if (check_access typ) then (CONST typ, sto)
		else raise BadModifier
	| BASE_VOLATILE ->
		if (check_access typ) then (VOLATILE typ, sto)
		else raise BadModifier
	| BASE_STORAGE sto' ->
		if sto = NO_STORAGE then (typ, sto')
		else raise BadModifier
	| BASE_GNU_ATTR attrs ->
		(GNU_TYPE (attrs, typ), sto)


(** Apply a list of modifier to a type.
	@param mods		Modifiers to apply.
	@param fty		(type, storage) to modify.
	@return			(type, storage) result. *)
let apply_mods mods fty =
	List.fold_left apply_mod fty mods


(** Complete the basic part of a composed type. Usually basic type (scalar, named type,
	struct, etc) are built separately from composed type (pointer, array, etc)
	with an empty basic type that must be replaced by an actual basic type.
	@param tst		Basic type to set.
	@param tin		Composed type to set the basic type in.
	@return			Composed type with basic type replaced. *)
let set_type tst tin =
	let rec set typ =
		match typ with
		| NO_TYPE -> tst
		| PTR typ -> PTR (set typ)
		| RESTRICT_PTR typ -> RESTRICT_PTR (set typ)
		| ARRAY (typ, dim) -> ARRAY (set typ, dim)
		| PROTO (typ, pars, ell) -> PROTO (set typ, pars, ell)
		| OLD_PROTO (typ, pars, ell) -> OLD_PROTO (set typ, pars, ell)
		| CONST typ -> CONST (set typ)
		| VOLATILE typ -> VOLATILE (set typ)
		| TYPE_LINE (f, l, t) -> TYPE_LINE (f, l, set t)
		| BITFIELD (_, exp) -> BITFIELD (tst, exp)
		| _ -> raise BadType in
	set tin


(** Smooth a list of expressions as a comma list (if required).
	@param lst	List of expressions.
	@return		Smoothed list.
*)
let smooth_expression lst =
	match lst with
		| [] -> NOTHING
		| [expr] -> expr
		| _ -> COMMA (List.rev lst)
let list_expression expr =
	match expr with
		COMMA lst -> lst
		| NOTHING -> []
		| _ -> [expr]


(** Set the base type of a name tuple.
	@param typ		Base type to set.
	@param id		Identifier.
	@param typ'		Name type.
	@param attr		Attributes of the name.
	@param exp		Initial expression of the type.
	@return			Name with the basic type replaced. *)
let set_name (typ : base_type) (id, typ', attr, exp) =
	(id, set_type typ typ', attr, exp)


(** Set the (type, storage) to a name group.
	@param typ	Type to set.
	@param sto	Storage to set.
	@param lst	List of names.
	@return		Name list with type and storage replaced. *)
let set_name_group (typ, sto) (lst : name list)
: name_group =
	(typ, sto, List.map (set_name typ) lst)


(** Set the type and storage on a single name group.
	@param typ	Type to set.
	@param sto	Storage to set.
	@param name	Name to modify.
	@return		Modified name. *)
let set_single (typ, sto) name : single_name =
	(typ, sto, set_name typ name)


(** Set the initialization expression on a name group.
	@param id	Name identifier.
	@param typ	Name type.
	@param attr	Name attributes.
	@param ini	Initialization expression to set.
	@return		Name with the initialization expression replaced. *)
let set_data (id, typ, attr, _) ini = (id, typ, attr, ini)


(** Combines the modifier of two types. One of t1 or t2 must be NO_TYPE.
	@param t1	First type.
	@param q1	First modifiers.
	@param t2	Second type.
	@param q2	Second modifiers.
	@return		Combined (type, modifiers). *)
let apply_qual ((t1, q1) : base_type * modifier list)
			   ((t2, q2) : base_type * modifier list)
			   : base_type * modifier list =
	((if t1 = NO_TYPE then t2 else
		if t2 = NO_TYPE then t1 else  raise BadModifier),
	List.append q1 q2)

(** Build an embedded line/source reference.
	@param file		Source file.
	@param line		Source line.
	@param stat		Statement matching the source file/line pair. *)
let set_line (file, line) stat =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.STAT_LINE (stat, file, line)
	else stat


(** Build an embedded line/source reference.
	@param file		Source file.
	@param line		Source line.
	@param expr		Expression matching the source file/line pair. *)
let set_eline (file, line) expr =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.EXPR_LINE (expr, file, line)
	else expr


(** Build an embedded line/source reference.
	@param file		Source file.
	@param line		Source line.
	@param _type	Type matching the source file/line pair. *)
let set_tline _type =
	if Clexer.linerec !Clexer.current_handle
	then Cabs.TYPE_LINE (Clexer.curfile (), Clexer.curline(), _type)
	else _type

# 290 "cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  264 (* CHAR *);
  265 (* INT *);
  266 (* DOUBLE *);
  267 (* FLOAT *);
  268 (* VOID *);
  269 (* ENUM *);
  270 (* STRUCT *);
  271 (* TYPEDEF *);
  272 (* UNION *);
  273 (* SIGNED *);
  274 (* UNSIGNED *);
  275 (* LONG *);
  276 (* SHORT *);
  277 (* VOLATILE *);
  278 (* EXTERN *);
  279 (* STATIC *);
  280 (* CONST *);
  281 (* AUTO *);
  282 (* REGISTER *);
  283 (* RESTRICT *);
  284 (* SIZEOF *);
  285 (* ASM *);
  297 (* ARROW *);
  298 (* DOT *);
  299 (* EQ_EQ *);
  300 (* EXCLAM_EQ *);
  301 (* INF *);
  302 (* SUP *);
  303 (* INF_EQ *);
  304 (* SUP_EQ *);
  305 (* PLUS *);
  306 (* MINUS *);
  307 (* STAR *);
  308 (* SLASH *);
  309 (* PERCENT *);
  310 (* TILDE *);
  311 (* AND *);
  312 (* PIPE *);
  313 (* CIRC *);
  314 (* EXCLAM *);
  315 (* AND_AND *);
  316 (* PIPE_PIPE *);
  317 (* INF_INF *);
  318 (* SUP_SUP *);
  319 (* PLUS_PLUS *);
  320 (* MINUS_MINUS *);
  344 (* ATTRIBUTE *);
  345 (* EXTENSION *);
  346 (* INLINE *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* CST_CHAR *);
  259 (* CST_INT *);
  260 (* CST_FLOAT *);
  261 (* CST_STRING *);
  262 (* NAMED_TYPE *);
  263 (* GNU_ATTRS *);
  286 (* EQ *);
  287 (* PLUS_EQ *);
  288 (* MINUS_EQ *);
  289 (* STAR_EQ *);
  290 (* SLASH_EQ *);
  291 (* PERCENT_EQ *);
  292 (* AND_EQ *);
  293 (* PIPE_EQ *);
  294 (* CIRC_EQ *);
  295 (* INF_INF_EQ *);
  296 (* SUP_SUP_EQ *);
  321 (* RPAREN *);
  322 (* LPAREN *);
  323 (* RBRACE *);
  324 (* LBRACE *);
  325 (* LBRACKET *);
  326 (* RBRACKET *);
  327 (* COLON *);
  328 (* SEMICOLON *);
  329 (* COMMA *);
  330 (* ELLIPSIS *);
  331 (* QUEST *);
  332 (* BREAK *);
  333 (* CONTINUE *);
  334 (* GOTO *);
  335 (* RETURN *);
  336 (* SWITCH *);
  337 (* CASE *);
  338 (* DEFAULT *);
  339 (* WHILE *);
  340 (* DO *);
  341 (* FOR *);
  342 (* IF *);
  343 (* ELSE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\005\000\005\000\005\000\007\000\
\007\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
\009\000\006\000\006\000\006\000\010\000\010\000\011\000\011\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\035\000\036\000\045\000\
\045\000\047\000\047\000\047\000\037\000\037\000\048\000\049\000\
\049\000\049\000\051\000\051\000\051\000\052\000\052\000\052\000\
\052\000\050\000\050\000\053\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\013\000\014\000\014\000\
\014\000\016\000\016\000\017\000\017\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\015\000\015\000\015\000\019\000\
\019\000\020\000\020\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\038\000\
\038\000\038\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\056\000\056\000\056\000\056\000\
\039\000\039\000\041\000\041\000\057\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\059\000\059\000\060\000\061\000\061\000\061\000\063\000\063\000\
\065\000\065\000\066\000\066\000\066\000\064\000\064\000\064\000\
\062\000\062\000\067\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\033\000\033\000\033\000\069\000\069\000\070\000\
\071\000\071\000\071\000\073\000\073\000\075\000\075\000\076\000\
\076\000\076\000\076\000\074\000\074\000\074\000\074\000\074\000\
\074\000\072\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\078\000\079\000\
\079\000\079\000\081\000\081\000\082\000\082\000\082\000\083\000\
\083\000\084\000\084\000\084\000\080\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\086\000\086\000\087\000\087\000\088\000\088\000\089\000\
\089\000\029\000\029\000\032\000\032\000\032\000\030\000\030\000\
\031\000\031\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\027\000\
\027\000\027\000\027\000\034\000\034\000\090\000\091\000\023\000\
\092\000\092\000\093\000\093\000\025\000\025\000\026\000\026\000\
\094\000\094\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\096\000\096\000\
\095\000\095\000\098\000\098\000\099\000\099\000\100\000\100\000\
\097\000\097\000\101\000\101\000\046\000\046\000\022\000\022\000\
\040\000\040\000\040\000\102\000\102\000\103\000\103\000\104\000\
\104\000\104\000\105\000\105\000\105\000\105\000\105\000\044\000\
\044\000\106\000\000\000\000\000"

let yylen = "\002\000\
\002\000\000\000\001\000\001\000\002\000\003\000\003\000\004\000\
\002\000\004\000\005\000\002\000\003\000\003\000\001\000\000\000\
\001\000\001\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\001\000\003\000\002\000\004\000\
\001\000\003\000\002\000\003\000\003\000\003\000\003\000\004\000\
\003\000\004\000\006\000\004\000\006\000\002\000\002\000\001\000\
\002\000\001\000\003\000\003\000\001\000\002\000\003\000\003\000\
\003\000\002\000\000\000\001\000\001\000\001\000\002\000\002\000\
\002\000\001\000\003\000\001\000\001\000\002\000\003\000\003\000\
\004\000\003\000\004\000\006\000\003\000\003\000\002\000\003\000\
\003\000\000\000\001\000\001\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\001\000\
\003\000\002\000\004\000\001\000\001\000\002\000\003\000\003\000\
\003\000\003\000\004\000\003\000\004\000\006\000\003\000\001\000\
\002\000\002\000\001\000\001\000\001\000\001\000\002\000\002\000\
\002\000\002\000\002\000\002\000\001\000\002\000\002\000\002\000\
\000\000\001\000\001\000\003\000\002\000\001\000\002\000\003\000\
\003\000\003\000\003\000\004\000\003\000\004\000\006\000\003\000\
\002\000\001\000\003\000\002\000\003\000\003\000\000\000\001\000\
\001\000\002\000\001\000\001\000\001\000\001\000\002\000\002\000\
\003\000\001\000\001\000\000\000\001\000\001\000\002\000\003\000\
\003\000\003\000\003\000\004\000\003\000\004\000\006\000\003\000\
\003\000\002\000\000\000\001\000\003\000\003\000\001\000\002\000\
\003\000\003\000\002\000\000\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\002\000\001\000\000\000\001\000\001\000\002\000\003\000\003\000\
\003\000\003\000\004\000\003\000\006\000\003\000\002\000\002\000\
\003\000\003\000\000\000\001\000\001\000\002\000\002\000\001\000\
\002\000\001\000\001\000\001\000\001\000\000\000\002\000\003\000\
\003\000\003\000\003\000\004\000\003\000\006\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\004\000\005\000\002\000\004\000\005\000\002\000\004\000\
\005\000\001\000\001\000\001\000\002\000\001\000\003\000\001\000\
\003\000\003\000\001\000\001\000\003\000\002\000\000\000\001\000\
\001\000\003\000\001\000\001\000\002\000\004\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\004\000\
\004\000\005\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\001\000\001\000\001\000\001\000\002\000\001\000\002\000\003\000\
\000\000\001\000\001\000\002\000\000\000\001\000\001\000\002\000\
\001\000\002\000\001\000\002\000\001\000\005\000\007\000\005\000\
\005\000\007\000\009\000\003\000\004\000\003\000\002\000\003\000\
\002\000\002\000\003\000\005\000\007\000\008\000\000\000\002\000\
\002\000\001\000\001\000\003\000\002\000\005\000\000\000\003\000\
\000\000\002\000\001\000\003\000\000\000\001\000\001\000\002\000\
\006\000\001\000\001\000\000\000\001\000\001\000\003\000\001\000\
\001\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\004\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\022\000\023\000\020\000\021\000\
\024\000\000\000\130\001\131\001\147\001\000\000\000\000\004\000\
\000\000\000\000\000\000\018\000\000\000\148\001\000\000\000\000\
\241\000\242\000\244\000\243\000\240\000\000\000\000\000\000\000\
\247\000\248\000\245\000\246\000\000\000\000\000\000\000\000\000\
\125\000\112\000\000\000\000\000\001\000\005\000\033\000\000\000\
\000\000\009\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\019\000\025\000\000\000\124\000\123\000\
\120\000\119\000\002\001\003\001\000\000\000\000\000\000\000\000\
\000\000\000\000\114\000\113\000\134\000\000\000\000\000\000\000\
\000\000\131\000\000\000\122\000\121\000\128\000\127\000\126\000\
\000\000\000\000\000\000\000\000\000\000\000\000\127\001\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\078\001\
\007\000\000\000\060\000\061\000\000\000\053\000\000\000\000\000\
\014\000\028\000\027\000\013\000\000\000\000\000\000\000\000\000\
\006\001\000\000\156\000\155\000\157\000\000\000\146\000\000\000\
\000\000\000\000\153\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\133\000\139\001\074\001\072\001\073\001\076\001\140\001\141\001\
\143\001\142\001\137\001\000\000\000\000\000\000\134\001\000\000\
\000\000\000\000\000\000\000\000\128\001\000\000\030\000\000\000\
\050\000\194\000\192\000\193\000\000\000\195\000\000\000\000\000\
\000\000\183\000\000\000\000\000\000\000\190\000\020\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\019\001\000\000\000\000\000\000\000\000\000\000\
\089\000\091\000\086\000\088\000\087\000\090\000\083\001\000\000\
\000\000\000\000\084\000\092\000\000\000\000\000\000\000\008\000\
\054\000\069\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\062\000\000\000\000\000\000\000\000\001\000\000\000\000\
\250\000\145\000\000\000\166\000\000\000\000\000\000\000\000\000\
\162\000\000\000\000\000\000\000\158\000\000\000\154\000\000\000\
\253\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\
\000\000\141\000\000\000\077\001\000\000\000\000\000\000\000\000\
\000\000\042\000\044\000\000\000\049\000\000\000\204\000\205\000\
\000\000\000\000\184\000\000\000\000\000\000\000\196\000\000\000\
\191\000\000\000\021\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\227\000\226\000\000\000\000\000\228\000\
\000\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\001\032\001\000\000\000\000\
\000\000\040\000\000\000\000\000\000\000\032\000\000\000\145\001\
\100\000\101\000\000\000\000\000\000\000\096\000\000\000\000\000\
\000\000\000\000\093\000\085\000\080\001\000\000\000\000\091\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\093\001\000\000\079\001\086\001\000\000\
\000\000\084\001\000\000\000\000\000\000\000\000\055\000\000\000\
\000\000\000\000\056\000\057\000\064\000\065\000\063\000\011\000\
\000\000\007\001\001\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\147\000\000\000\000\000\000\000\150\000\
\149\000\159\000\160\000\251\000\254\000\000\000\142\000\140\000\
\129\001\135\001\000\000\000\000\000\000\051\000\052\000\181\000\
\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\185\000\186\000\200\000\198\000\199\000\201\000\197\000\000\000\
\037\001\038\001\000\000\000\000\000\000\215\000\000\000\000\000\
\000\000\221\000\000\000\225\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\001\
\034\001\035\001\036\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\000\
\081\000\095\000\094\000\080\000\000\000\000\000\000\000\105\001\
\106\001\000\000\103\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\092\001\088\001\000\000\000\000\
\000\000\067\000\000\000\074\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\161\000\000\000\173\000\000\000\000\000\
\138\001\043\000\045\000\000\000\000\000\000\000\000\000\000\000\
\212\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\218\000\217\000\222\000\223\000\040\001\
\041\001\000\000\010\001\000\000\146\001\000\000\000\000\000\000\
\000\000\000\000\097\000\000\000\108\000\000\000\000\000\100\001\
\000\000\000\000\107\001\104\001\000\000\000\000\102\001\000\000\
\000\000\000\000\000\000\000\000\075\000\073\000\000\000\174\000\
\172\000\143\000\000\000\211\000\000\000\000\000\000\000\000\000\
\000\000\237\000\000\000\000\000\013\001\000\000\109\000\107\000\
\099\000\000\000\000\000\000\000\000\000\000\000\101\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\236\000\
\000\000\000\000\108\001\000\000\000\000\000\000\115\001\000\000\
\000\000\096\001\097\001\000\000\000\000\000\000\076\000\175\000\
\213\000\000\000\110\000\000\000\000\000\117\001\000\000\000\000\
\000\000\112\001\000\000\000\000\000\000\000\000\238\000\000\000\
\000\000\000\000\116\001\123\001\000\000\109\001\098\001\000\000\
\095\001\110\001\120\001\000\000\000\000\000\000\118\001\124\001\
\099\001"

let yydgoto = "\003\000\
\013\000\014\000\015\000\016\000\017\000\057\000\018\000\019\000\
\020\000\051\000\052\000\053\000\207\000\208\000\097\001\209\000\
\210\000\211\000\093\001\094\001\095\001\101\000\116\001\117\001\
\118\001\119\001\195\000\196\000\086\001\230\001\120\001\236\001\
\173\000\156\000\054\000\055\000\109\000\039\000\080\000\174\000\
\081\000\040\000\041\000\102\000\175\000\009\001\176\000\110\000\
\111\000\221\000\112\000\227\000\222\000\223\000\042\000\043\000\
\082\000\083\000\126\000\127\000\128\000\240\000\129\000\246\000\
\130\000\131\000\241\000\242\000\177\000\178\000\179\000\019\001\
\180\000\024\001\181\000\182\000\020\001\041\001\042\001\190\001\
\043\001\195\001\044\001\045\001\191\001\070\000\119\000\120\000\
\121\000\106\000\213\000\214\000\215\000\121\001\128\002\129\002\
\146\002\126\002\127\002\142\002\157\002\157\000\158\000\159\000\
\160\000\200\000"

let yysindex = "\002\001\
\037\001\037\001\000\000\152\014\000\000\000\000\000\000\000\000\
\000\000\218\254\000\000\000\000\000\000\040\000\037\001\000\000\
\070\255\041\014\013\001\000\000\093\255\000\000\139\000\019\001\
\000\000\000\000\000\000\000\000\000\000\050\255\051\255\099\255\
\000\000\000\000\000\000\000\000\218\015\218\015\213\255\169\001\
\000\000\000\000\250\013\249\254\000\000\000\000\000\000\106\000\
\240\255\000\000\009\001\000\000\022\004\085\255\056\255\013\001\
\131\002\013\001\000\000\000\000\000\000\152\014\000\000\000\000\
\000\000\000\000\000\000\000\000\169\255\159\255\085\000\172\255\
\085\000\179\255\000\000\000\000\000\000\234\000\213\255\200\255\
\203\255\000\000\162\004\000\000\000\000\000\000\000\000\000\000\
\021\001\240\255\240\255\240\255\195\001\038\255\000\000\058\002\
\000\000\240\255\180\255\049\006\187\000\012\000\044\000\000\000\
\000\000\130\000\000\000\000\000\009\255\000\000\114\000\250\015\
\000\000\000\000\000\000\000\000\213\255\065\000\037\000\059\000\
\000\000\169\255\000\000\000\000\000\000\085\001\000\000\041\255\
\009\016\085\000\000\000\085\000\109\001\085\000\213\255\213\255\
\213\255\118\001\222\001\113\002\000\000\213\255\204\255\067\006\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\143\000\097\000\077\000\000\000\092\000\
\195\001\195\001\195\001\195\001\000\000\111\000\000\000\022\004\
\000\000\000\000\000\000\000\000\122\000\000\000\167\000\097\001\
\213\000\000\000\063\001\024\016\204\255\000\000\000\000\006\008\
\025\008\025\008\025\008\025\008\025\008\025\008\025\008\025\008\
\010\002\000\000\000\000\136\009\002\002\181\007\113\000\187\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\117\001\
\039\016\130\000\000\000\000\000\221\000\238\003\130\000\000\000\
\000\000\000\000\236\000\114\000\065\002\000\000\056\002\056\255\
\056\255\000\000\231\015\097\002\025\008\000\000\169\255\230\000\
\000\000\000\000\250\000\000\000\168\255\041\255\025\008\119\002\
\000\000\250\002\085\000\085\000\000\000\133\003\000\000\045\002\
\000\000\166\002\222\001\222\001\222\001\222\001\038\001\000\000\
\070\001\000\000\026\003\000\000\131\001\021\001\021\001\180\255\
\044\000\000\000\000\000\210\255\000\000\102\000\000\000\000\000\
\093\000\063\001\000\000\141\001\204\255\204\255\000\000\047\003\
\000\000\010\002\000\000\218\004\218\004\215\001\215\001\215\001\
\215\001\215\001\215\001\000\000\000\000\147\001\148\255\000\000\
\163\001\137\255\054\016\089\001\000\000\025\008\025\008\025\008\
\025\008\025\008\025\008\025\008\025\008\025\008\025\008\025\008\
\018\000\069\000\025\008\025\008\025\008\025\008\025\008\025\008\
\025\008\025\008\025\008\025\008\025\008\025\008\025\008\025\008\
\025\008\025\008\025\008\025\008\000\000\000\000\025\008\025\008\
\025\008\000\000\025\008\181\007\136\009\000\000\250\001\000\000\
\000\000\000\000\105\002\117\001\158\002\000\000\168\004\130\000\
\217\002\130\000\000\000\000\000\000\000\225\001\008\255\000\000\
\214\001\233\001\069\002\030\006\024\002\025\008\026\002\047\002\
\238\003\079\002\081\002\000\000\130\000\000\000\000\000\196\002\
\238\003\000\000\114\000\114\000\056\002\182\002\000\000\114\000\
\204\255\137\006\000\000\000\000\000\000\000\000\000\000\000\000\
\136\009\000\000\000\000\025\008\041\255\041\255\041\255\223\000\
\250\002\012\003\136\009\000\000\041\255\204\255\155\006\000\000\
\000\000\000\000\000\000\000\000\000\000\204\255\000\000\000\000\
\000\000\000\000\098\002\110\002\112\002\000\000\000\000\000\000\
\000\000\063\001\063\001\063\001\047\000\141\001\238\000\225\006\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\002\
\000\000\000\000\025\008\230\005\137\255\000\000\147\002\089\001\
\089\001\000\000\129\005\000\000\158\014\158\014\158\014\158\014\
\158\014\158\014\158\014\158\014\158\014\158\014\158\014\000\000\
\000\000\000\000\000\000\102\015\102\015\128\015\128\015\128\015\
\128\015\218\004\218\004\215\001\215\001\215\001\076\015\018\015\
\047\015\245\014\216\014\154\015\154\015\157\002\159\002\076\003\
\208\008\136\009\000\000\029\255\036\255\117\001\117\001\117\001\
\098\003\137\000\029\003\000\000\117\001\204\255\243\006\222\002\
\000\000\000\000\000\000\000\000\238\003\194\002\250\001\000\000\
\000\000\216\002\000\000\254\008\025\008\044\009\238\003\025\008\
\219\002\025\008\025\008\130\000\000\000\000\000\056\002\056\002\
\242\002\000\000\252\002\000\000\112\003\136\009\250\002\250\002\
\250\002\250\002\006\003\000\000\017\003\000\000\157\003\019\003\
\000\000\000\000\000\000\141\001\141\001\141\001\141\001\024\003\
\000\000\189\003\169\004\215\001\137\255\137\255\137\255\080\000\
\147\002\059\001\057\007\000\000\000\000\000\000\000\000\000\000\
\000\000\025\008\000\000\181\007\000\000\098\003\098\003\098\003\
\098\003\034\003\000\000\053\003\000\000\198\003\181\007\000\000\
\250\001\059\255\000\000\000\000\043\000\238\003\000\000\245\000\
\066\003\075\003\071\001\204\255\000\000\000\000\204\255\000\000\
\000\000\000\000\204\255\000\000\147\002\147\002\147\002\147\002\
\072\003\000\000\044\004\187\014\000\000\204\255\000\000\000\000\
\000\000\027\255\091\003\124\255\097\003\238\003\000\000\238\003\
\025\008\025\008\238\003\105\003\119\003\121\003\204\255\000\000\
\139\003\097\003\000\000\110\003\217\003\156\003\000\000\167\003\
\185\003\000\000\000\000\107\001\182\003\171\003\000\000\000\000\
\000\000\205\003\000\000\207\003\025\008\000\000\216\003\124\255\
\030\004\000\000\223\003\227\003\025\008\238\003\000\000\231\003\
\090\009\048\004\000\000\000\000\253\003\000\000\000\000\246\003\
\000\000\000\000\000\000\110\003\073\004\238\003\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\073\000\232\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\074\255\010\006\000\000\223\001\000\000\090\255\211\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\004\216\255\
\000\000\000\000\223\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\007\000\000\069\016\230\255\
\068\000\230\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\255\084\016\020\002\
\084\016\095\002\000\000\000\000\000\000\000\000\000\000\000\000\
\018\004\000\000\086\003\000\000\000\000\000\000\000\000\000\000\
\029\004\000\000\000\000\000\000\089\004\000\000\000\000\000\000\
\000\000\000\000\083\007\000\000\126\007\108\003\151\007\000\000\
\000\000\195\002\000\000\000\000\069\016\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\129\255\000\000\037\004\
\000\000\000\000\000\000\000\000\000\000\084\016\000\000\132\000\
\000\000\154\005\000\000\084\016\084\016\084\016\000\000\000\000\
\000\000\000\000\015\002\000\000\000\000\000\000\083\007\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\008\000\000\031\004\000\000\129\001\
\174\004\200\004\029\005\055\005\000\000\063\004\000\000\150\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\004\
\062\004\000\000\056\000\000\000\177\005\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\016\000\000\000\000\158\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\242\007\000\000\000\000\000\000\077\004\025\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\161\003\170\000\
\170\000\000\000\188\000\000\000\000\000\000\000\083\004\000\000\
\000\000\000\000\199\000\000\000\159\003\211\001\000\000\000\000\
\000\000\172\003\085\005\085\005\000\000\197\005\000\000\084\016\
\000\000\084\016\253\002\083\003\147\003\057\004\051\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\004\083\007\
\112\000\000\000\000\000\000\000\000\000\114\016\000\000\000\000\
\056\000\012\002\000\000\165\001\021\255\021\255\000\000\116\001\
\000\000\099\016\000\000\130\011\176\011\182\009\228\009\018\010\
\064\010\110\010\156\010\000\000\000\000\000\000\000\000\000\000\
\000\000\014\002\000\000\030\008\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\090\004\000\000\
\000\000\000\000\000\000\000\000\012\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\150\255\252\001\
\253\001\252\001\000\000\000\000\000\000\162\008\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\111\003\000\000\000\000\000\000\
\092\004\000\000\000\000\000\000\194\000\000\000\000\000\000\000\
\083\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\159\003\159\003\159\003\159\003\
\200\001\000\000\220\001\000\000\132\000\083\007\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\007\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\056\000\056\000\056\000\187\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\002\014\002\000\000\091\004\197\001\
\197\001\000\000\093\002\000\000\093\004\033\005\059\005\139\005\
\227\005\109\006\195\006\135\007\203\007\146\013\043\014\000\000\
\000\000\000\000\000\000\078\013\124\013\150\012\196\012\242\012\
\032\013\222\011\012\012\202\010\248\010\038\011\170\013\006\014\
\216\013\052\014\066\014\058\012\104\012\000\000\173\255\000\000\
\000\000\116\002\000\000\000\000\000\000\000\000\000\000\000\000\
\062\006\000\000\000\000\000\000\000\000\083\007\000\000\212\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\095\004\000\000\197\003\000\000\000\000\042\002\145\002\
\184\003\000\000\000\000\000\000\000\000\192\002\231\002\061\003\
\235\003\240\003\225\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\210\001\241\001\029\002\063\002\047\001\
\000\000\000\000\116\008\084\011\014\002\014\002\014\002\014\002\
\104\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\189\000\000\000\081\006\143\006\169\006\
\124\007\172\005\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\007\000\000\000\000\083\007\000\000\
\000\000\000\000\083\007\000\000\110\004\111\004\124\004\130\004\
\201\002\000\000\000\000\112\014\000\000\083\007\000\000\000\000\
\000\000\000\000\000\000\050\001\131\004\000\000\000\000\000\000\
\000\000\095\004\000\000\000\000\000\000\000\000\083\007\000\000\
\000\000\131\004\000\000\007\000\000\000\066\001\000\000\134\004\
\000\000\000\000\000\000\000\000\000\000\137\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\090\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\136\004\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\179\005\000\000\187\005\000\000\000\000\141\000\000\000\
\024\000\000\000\107\005\082\003\055\255\000\000\000\000\201\255\
\000\000\067\255\000\000\218\003\177\254\209\255\207\255\151\254\
\000\000\094\004\177\255\024\001\183\254\008\254\156\255\000\000\
\115\255\173\254\000\000\000\000\000\000\159\005\000\000\005\000\
\105\005\241\255\247\255\141\004\217\004\222\255\000\000\131\005\
\000\000\000\000\116\004\000\000\113\004\062\255\088\005\000\000\
\096\005\172\002\118\000\153\255\000\000\000\000\146\004\000\000\
\000\000\164\255\096\004\034\255\000\000\229\004\000\000\000\000\
\121\004\000\000\000\000\063\005\037\255\222\004\000\000\000\000\
\201\003\000\000\000\000\229\254\104\254\117\005\127\005\000\000\
\022\005\000\000\000\000\000\000\137\004\000\000\081\254\144\003\
\000\000\000\000\117\003\103\003\000\000\248\004\000\000\012\005\
\000\000\000\000"

let yytablesize = 4486
let yytable = "\197\000\
\094\000\001\001\058\000\237\001\105\000\021\000\021\000\009\002\
\059\000\155\000\235\001\241\001\243\001\122\001\145\001\146\001\
\196\001\082\002\103\000\021\000\100\001\188\000\234\000\061\000\
\125\001\126\001\188\000\044\000\254\001\234\000\138\000\004\001\
\107\000\088\000\108\000\049\002\050\002\247\000\047\000\045\000\
\004\001\235\000\060\000\003\001\255\000\003\000\236\000\115\000\
\145\000\255\000\067\000\067\000\095\000\174\001\175\001\068\000\
\068\000\095\000\089\000\216\000\061\000\061\000\061\000\004\001\
\255\000\255\000\255\000\255\000\255\000\255\000\047\000\188\000\
\002\000\255\001\015\000\125\000\104\000\125\000\011\001\107\000\
\114\000\108\000\095\000\011\001\011\001\188\000\188\000\095\000\
\048\000\188\000\118\000\237\000\039\001\188\000\255\000\059\002\
\225\000\108\002\165\000\067\000\061\002\060\002\226\000\049\000\
\068\000\165\000\238\000\062\000\255\000\255\000\212\000\239\000\
\255\000\244\000\255\000\255\000\255\000\069\000\071\000\245\000\
\048\000\133\002\164\001\107\002\015\000\010\000\011\000\012\000\
\124\002\108\002\125\000\255\000\255\000\255\000\125\000\049\000\
\125\000\125\000\125\000\015\000\118\000\050\000\165\000\038\001\
\234\000\015\000\234\000\072\002\093\002\094\002\095\002\096\002\
\104\000\155\001\109\002\118\000\160\002\079\002\062\002\063\002\
\064\002\118\000\065\002\250\001\022\001\088\001\073\000\055\002\
\235\000\118\000\023\001\074\002\095\000\236\000\023\002\024\002\
\025\002\026\002\125\001\125\001\169\000\039\001\155\000\155\000\
\015\002\016\002\122\002\188\001\141\001\144\001\133\000\142\001\
\125\002\098\001\143\001\008\001\113\000\040\001\116\000\099\001\
\170\000\008\001\189\001\171\000\095\000\172\000\036\002\037\002\
\038\002\039\002\166\001\115\000\186\001\077\000\212\000\167\001\
\116\000\135\001\237\000\212\000\083\001\125\001\125\001\117\000\
\170\000\173\001\122\000\171\000\111\002\172\000\016\000\002\000\
\038\001\238\000\231\001\232\001\154\001\016\001\239\000\132\000\
\047\000\095\000\101\002\019\002\016\001\106\002\134\000\125\000\
\125\000\248\000\125\000\250\000\125\000\105\002\125\000\010\000\
\011\000\012\000\001\000\002\000\130\002\115\000\131\002\078\000\
\029\002\134\002\116\000\010\000\011\000\012\000\183\001\141\000\
\032\002\117\000\208\001\142\000\115\000\095\000\079\000\209\001\
\016\000\116\000\115\000\193\001\182\001\021\002\040\001\116\000\
\117\000\194\001\048\000\010\000\011\000\012\000\117\000\016\000\
\249\001\198\000\252\001\242\001\161\002\016\000\016\000\015\001\
\040\001\049\000\031\002\016\000\016\001\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\169\002\016\000\016\000\016\000\
\016\000\016\000\122\001\125\001\012\000\210\001\009\001\119\001\
\199\000\016\000\211\001\042\002\009\001\119\001\016\000\119\001\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\251\001\
\016\000\016\000\016\000\016\000\016\000\015\001\229\000\095\000\
\016\000\017\001\016\001\095\000\212\000\212\000\212\000\230\000\
\068\002\123\000\047\000\110\002\124\000\125\001\125\001\016\000\
\018\001\170\001\218\000\083\001\171\001\016\000\012\000\172\001\
\203\000\212\000\170\000\016\000\203\000\171\000\090\000\172\000\
\203\000\091\000\188\001\231\000\092\000\012\000\010\000\011\000\
\012\000\089\001\016\000\012\000\048\002\144\001\090\001\017\001\
\016\000\189\001\070\002\004\001\165\000\006\001\201\000\202\000\
\203\000\204\000\205\000\206\000\048\000\007\001\018\001\063\000\
\077\002\005\001\064\000\080\002\219\000\231\001\083\002\010\000\
\011\000\012\000\059\000\049\000\010\000\011\000\012\000\168\001\
\008\001\165\000\087\001\220\000\010\000\011\000\012\000\144\001\
\144\001\054\002\010\001\091\001\058\000\010\000\011\000\012\000\
\095\000\010\000\011\000\012\000\040\001\040\001\116\002\040\001\
\164\000\117\002\092\001\164\000\164\000\118\002\099\002\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\121\002\010\000\011\000\012\000\059\000\085\001\017\001\235\000\
\010\000\011\000\012\000\017\001\236\000\017\001\017\001\011\001\
\016\000\138\002\077\000\059\000\218\000\016\000\058\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\165\000\016\000\
\016\000\016\000\016\000\016\000\137\001\058\000\135\000\014\001\
\123\001\136\000\070\000\124\001\137\000\014\001\147\001\165\000\
\165\000\070\000\070\000\165\000\132\002\231\001\165\000\165\000\
\212\000\237\000\010\000\011\000\012\000\146\000\147\000\148\000\
\149\000\150\000\016\000\151\000\078\000\014\001\219\000\101\001\
\238\000\005\000\006\000\007\000\008\000\239\000\009\000\065\000\
\139\001\016\000\066\000\079\000\152\000\220\000\040\002\016\000\
\231\001\153\000\176\001\004\000\165\000\112\002\010\000\011\000\
\012\000\005\000\006\000\007\000\008\000\083\001\009\000\015\001\
\140\001\010\000\011\000\012\000\016\001\197\001\198\001\199\001\
\200\001\201\001\202\001\203\001\204\001\205\001\206\001\207\001\
\097\000\098\000\212\001\213\001\214\001\215\001\216\001\217\001\
\218\001\219\001\220\001\221\001\222\001\223\001\224\001\225\001\
\226\001\227\001\228\001\229\001\010\000\011\000\012\000\158\001\
\233\001\123\000\234\001\085\001\124\000\036\001\154\000\214\000\
\037\001\017\001\114\001\214\000\187\000\089\001\077\000\214\000\
\114\001\187\000\090\001\097\002\010\000\011\000\012\000\051\002\
\018\001\123\000\113\001\004\002\124\000\006\002\159\001\115\002\
\113\001\094\001\094\001\094\001\094\001\094\001\094\001\083\001\
\094\001\094\001\094\001\094\001\094\001\094\001\094\001\233\000\
\094\001\094\001\094\001\094\001\094\001\094\001\094\001\094\001\
\094\001\094\001\094\001\022\002\094\001\094\001\187\000\091\001\
\078\000\012\001\013\001\148\002\010\000\011\000\012\000\249\000\
\010\000\011\000\012\000\083\001\187\000\187\000\092\001\079\000\
\187\000\094\001\094\001\094\001\187\000\084\000\094\001\094\001\
\085\000\136\001\094\001\161\001\010\000\011\000\012\000\094\001\
\094\001\136\001\094\001\094\001\094\001\010\000\011\000\012\000\
\094\001\176\001\044\002\185\001\094\001\094\001\094\001\094\001\
\094\001\094\001\094\001\094\001\094\001\094\001\094\001\025\000\
\094\001\094\001\094\001\187\001\025\000\202\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\202\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\219\000\
\025\000\139\000\140\000\206\000\082\000\079\000\150\000\057\001\
\058\001\082\000\079\000\206\000\099\000\219\000\219\000\100\000\
\167\000\219\000\183\000\147\000\148\000\149\000\150\000\167\000\
\167\000\025\000\209\000\164\000\249\000\077\001\078\001\164\000\
\079\001\249\000\209\000\080\001\178\000\000\002\036\001\143\000\
\025\000\037\001\144\000\178\000\178\000\184\000\025\000\253\001\
\249\000\249\000\249\000\249\000\249\000\249\000\082\000\079\000\
\001\002\208\000\251\000\252\000\253\000\254\000\025\000\025\000\
\025\000\208\000\185\000\186\000\187\000\082\000\079\000\188\000\
\189\000\123\000\044\002\190\000\124\000\002\002\249\000\082\001\
\191\000\192\000\083\001\193\000\203\000\104\000\230\000\135\000\
\203\000\100\002\230\000\085\001\249\000\249\000\135\000\135\000\
\249\000\005\002\249\000\249\000\249\000\207\000\085\001\252\000\
\007\002\010\000\011\000\012\000\252\000\207\000\135\000\135\000\
\135\000\089\001\072\000\249\000\249\000\249\000\090\001\156\001\
\008\002\072\000\072\000\252\000\252\000\252\000\252\000\252\000\
\252\000\129\001\166\000\099\000\130\001\238\001\100\000\210\000\
\239\001\093\000\096\000\240\001\010\000\011\000\012\000\210\000\
\127\001\128\001\025\000\026\000\027\000\028\000\029\000\216\000\
\010\002\252\000\011\002\033\000\034\000\035\000\036\000\005\000\
\006\000\007\000\008\000\091\001\009\000\216\000\216\000\252\000\
\252\000\216\000\033\002\252\000\153\002\252\000\252\000\252\000\
\136\001\142\000\092\001\161\000\162\000\163\000\034\002\164\000\
\035\002\255\000\143\000\168\000\018\001\144\000\252\000\252\000\
\252\000\018\001\123\000\018\001\018\001\124\000\148\001\149\001\
\010\000\011\000\012\000\081\001\081\001\081\001\081\001\081\001\
\082\000\043\002\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\071\000\082\000\082\000\082\000\082\000\082\000\051\002\
\071\000\071\000\010\000\011\000\012\000\056\002\081\001\081\001\
\025\000\026\000\027\000\028\000\029\000\244\001\245\001\083\001\
\157\001\033\000\034\000\035\000\036\000\201\000\202\000\203\000\
\204\000\205\000\206\000\081\001\081\001\081\001\017\002\129\001\
\081\001\081\001\130\001\071\002\081\001\010\000\011\000\012\000\
\177\000\081\001\081\001\073\002\081\001\081\001\081\001\177\000\
\177\000\239\000\081\001\013\002\083\001\239\000\081\001\081\001\
\081\001\081\001\081\001\081\001\081\001\081\001\081\001\081\001\
\081\001\082\001\082\001\082\001\082\001\082\001\082\000\075\002\
\082\000\082\000\082\000\082\000\082\000\082\000\082\000\170\000\
\082\000\082\000\082\000\082\000\082\000\081\002\170\000\170\000\
\010\000\011\000\012\000\084\002\082\001\082\001\025\000\026\000\
\027\000\028\000\029\000\150\001\085\002\138\000\151\001\033\000\
\034\000\035\000\036\000\179\001\138\000\138\000\180\001\087\002\
\181\001\082\001\082\001\082\001\027\002\150\001\082\001\082\001\
\151\001\088\002\082\001\090\002\138\000\138\000\138\000\082\001\
\082\001\091\002\082\001\082\001\082\001\066\002\246\001\160\001\
\082\001\247\001\083\001\102\002\082\001\082\001\082\001\082\001\
\082\001\082\001\082\001\082\001\082\001\082\001\082\001\089\001\
\089\001\089\001\089\001\089\001\082\000\103\002\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\169\000\082\000\082\000\
\082\000\082\000\082\000\113\002\169\000\169\000\010\000\011\000\
\012\000\119\002\089\001\089\001\025\000\026\000\027\000\028\000\
\029\000\057\002\114\002\137\000\083\001\033\000\034\000\035\000\
\036\000\123\000\137\000\137\000\124\000\125\001\125\001\089\001\
\089\001\089\001\123\002\246\001\089\001\089\001\247\001\108\002\
\089\001\135\002\137\000\137\000\137\000\089\001\089\001\141\002\
\089\001\089\001\089\001\031\000\031\000\086\002\089\001\136\002\
\083\001\137\002\089\001\089\001\089\001\089\001\089\001\089\001\
\089\001\089\001\089\001\089\001\089\001\090\001\090\001\090\001\
\090\001\090\001\082\000\139\002\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\136\000\082\000\082\000\082\000\082\000\
\082\000\143\002\136\000\136\000\010\000\011\000\012\000\164\000\
\090\001\090\001\089\002\164\000\144\002\083\001\164\000\164\000\
\068\000\068\000\136\000\136\000\136\000\145\002\102\001\147\000\
\148\000\149\000\150\000\163\000\163\000\090\001\090\001\090\001\
\077\000\147\002\090\001\090\001\077\000\149\002\090\001\077\000\
\077\000\150\002\092\002\090\001\090\001\083\001\090\001\090\001\
\090\001\184\000\103\001\104\002\090\001\151\002\083\001\152\002\
\090\001\090\001\090\001\090\001\090\001\090\001\090\001\090\001\
\090\001\090\001\090\001\098\000\098\000\154\002\185\000\186\000\
\187\000\176\000\156\002\188\000\189\000\176\000\158\002\190\000\
\176\000\176\000\159\002\168\000\191\000\192\000\162\002\193\000\
\171\000\104\000\168\000\168\000\164\002\104\001\166\002\171\000\
\171\000\105\001\106\001\107\001\108\001\109\001\110\001\111\001\
\112\001\113\001\114\001\115\001\034\000\165\002\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\168\002\034\000\034\000\
\034\000\034\000\034\000\131\001\132\001\129\000\034\000\099\000\
\034\000\130\000\100\000\034\000\034\000\132\001\035\000\133\001\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\004\001\
\035\000\035\000\035\000\035\000\035\000\010\000\011\000\012\000\
\035\000\120\002\035\000\144\000\083\001\035\000\035\000\144\000\
\048\000\139\000\144\000\144\000\075\000\076\000\180\000\034\000\
\139\000\139\000\034\000\034\000\152\001\153\001\034\000\034\000\
\052\002\053\002\144\000\144\000\144\000\177\001\178\001\085\001\
\139\000\139\000\139\000\072\000\074\000\005\001\034\000\034\000\
\034\000\035\000\015\001\229\000\035\000\061\001\087\001\061\001\
\035\000\035\000\061\001\061\001\061\001\061\001\015\001\061\001\
\231\000\183\000\147\000\148\000\149\000\150\000\234\000\233\000\
\035\000\035\000\035\000\037\000\022\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\232\000\037\000\037\000\037\000\
\037\000\037\000\235\000\111\001\184\000\037\000\121\001\037\000\
\122\001\046\000\037\000\037\000\167\000\036\000\067\002\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\014\002\036\000\
\036\000\036\000\036\000\036\000\117\000\228\000\188\000\036\000\
\165\001\036\000\190\000\143\000\036\000\036\000\144\000\191\000\
\192\000\246\001\193\000\248\001\247\001\000\001\037\000\217\000\
\018\002\037\000\169\001\025\001\028\002\037\000\037\000\184\001\
\232\000\010\000\011\000\012\000\138\001\012\002\163\001\010\000\
\011\000\012\000\057\001\058\001\155\002\037\000\037\000\037\000\
\036\000\140\002\167\002\036\000\067\001\068\001\069\001\036\000\
\036\000\162\001\000\000\000\000\000\000\000\000\000\000\000\000\
\077\001\078\001\000\000\079\001\000\000\000\000\080\001\036\000\
\036\000\036\000\038\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\000\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\000\000\038\000\000\000\038\000\000\000\
\000\000\038\000\038\000\000\000\039\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\039\000\039\000\
\039\000\039\000\039\000\000\000\000\000\000\000\039\000\000\000\
\039\000\000\000\000\000\039\000\039\000\151\000\000\000\000\000\
\000\000\000\000\151\000\000\000\000\000\038\000\000\000\000\000\
\038\000\062\001\000\000\062\001\038\000\038\000\062\001\062\001\
\062\001\062\001\000\000\062\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\038\000\038\000\039\000\
\000\000\000\000\039\000\063\001\000\000\063\001\039\000\039\000\
\063\001\063\001\063\001\063\001\000\000\063\001\000\000\151\000\
\025\000\026\000\027\000\028\000\029\000\000\000\039\000\039\000\
\039\000\033\000\034\000\035\000\036\000\036\001\151\000\000\000\
\037\001\151\000\152\000\151\000\151\000\151\000\000\000\152\000\
\000\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
\000\000\152\000\152\000\152\000\152\000\152\000\000\000\000\000\
\000\000\189\000\000\000\000\000\000\000\000\000\189\000\000\000\
\189\000\189\000\189\000\189\000\189\000\189\000\189\000\000\000\
\189\000\189\000\189\000\189\000\189\000\148\000\000\000\000\000\
\111\000\111\000\148\000\064\001\152\000\064\001\000\000\000\000\
\064\001\064\001\064\001\064\001\000\000\064\001\000\000\000\000\
\010\000\011\000\012\000\152\000\000\000\000\000\152\000\000\000\
\152\000\152\000\152\000\189\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\111\000\000\000\000\000\000\000\
\111\000\189\000\189\000\111\000\111\000\189\000\000\000\148\000\
\000\000\189\000\045\002\000\000\000\000\046\002\000\000\000\000\
\047\002\000\000\000\000\111\000\111\000\111\000\148\000\000\000\
\000\000\148\000\017\000\148\000\148\000\148\000\000\000\017\000\
\000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\188\001\017\000\017\000\017\000\017\000\017\000\183\000\147\000\
\148\000\149\000\150\000\065\001\000\000\065\001\000\000\189\001\
\065\001\065\001\065\001\065\001\000\000\065\001\000\000\000\000\
\000\000\183\000\147\000\148\000\149\000\150\000\000\000\000\000\
\000\000\184\000\000\000\000\000\017\000\010\000\011\000\012\000\
\000\000\000\000\000\000\183\000\147\000\148\000\149\000\150\000\
\000\000\000\000\000\000\017\000\184\000\000\000\185\000\186\000\
\187\000\017\000\000\000\188\000\189\000\000\000\000\000\190\000\
\000\000\000\000\102\000\102\000\191\000\192\000\184\000\193\000\
\000\000\185\000\186\000\187\000\000\000\003\002\188\000\189\000\
\000\000\000\000\190\000\000\000\000\000\105\000\105\000\191\000\
\192\000\000\000\193\000\185\000\186\000\187\000\194\000\000\000\
\188\000\189\000\000\000\000\000\190\000\000\000\102\000\000\000\
\000\000\191\000\192\000\000\000\193\000\102\000\102\000\000\000\
\002\001\183\000\147\000\148\000\149\000\150\000\000\000\000\000\
\000\000\105\000\000\000\000\000\000\000\102\000\102\000\102\000\
\105\000\105\000\000\000\183\000\147\000\148\000\149\000\150\000\
\000\000\000\000\000\000\000\000\184\000\000\000\000\000\000\000\
\105\000\105\000\105\000\104\000\104\000\066\001\000\000\066\001\
\000\000\000\000\066\001\066\001\066\001\066\001\184\000\066\001\
\000\000\185\000\186\000\187\000\000\000\000\000\188\000\189\000\
\000\000\000\000\190\000\000\000\000\000\103\000\103\000\191\000\
\192\000\000\000\193\000\185\000\186\000\187\000\020\002\104\000\
\188\000\189\000\000\000\000\000\190\000\000\000\104\000\104\000\
\000\000\191\000\192\000\000\000\193\000\000\000\000\000\000\000\
\030\002\183\000\147\000\148\000\149\000\150\000\104\000\104\000\
\104\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
\103\000\103\000\000\000\183\000\147\000\148\000\149\000\150\000\
\000\000\000\000\000\000\000\000\184\000\000\000\000\000\000\000\
\103\000\103\000\103\000\067\001\000\000\067\001\000\000\000\000\
\067\001\067\001\067\001\067\001\000\000\067\001\184\000\000\000\
\000\000\185\000\186\000\187\000\000\000\000\000\188\000\189\000\
\000\000\000\000\190\000\000\000\000\000\000\000\000\000\191\000\
\192\000\000\000\193\000\185\000\186\000\187\000\041\002\000\000\
\188\000\189\000\000\000\000\000\190\000\000\000\000\000\000\000\
\000\000\191\000\192\000\000\000\193\000\000\000\000\000\000\000\
\069\002\183\000\147\000\148\000\149\000\150\000\000\000\125\001\
\000\000\125\001\125\001\125\001\125\001\125\001\125\001\125\001\
\000\000\125\001\125\001\125\001\125\001\125\001\000\000\000\000\
\000\000\125\001\000\000\125\001\184\000\000\000\125\001\125\001\
\188\000\000\000\188\000\188\000\188\000\188\000\188\000\188\000\
\188\000\000\000\188\000\188\000\188\000\188\000\188\000\000\000\
\000\000\185\000\186\000\187\000\000\000\000\000\188\000\189\000\
\000\000\000\000\190\000\000\000\000\000\000\000\000\000\191\000\
\192\000\000\000\193\000\000\000\000\000\125\001\098\002\000\000\
\000\000\125\001\125\001\126\001\000\000\126\001\126\001\126\001\
\126\001\126\001\126\001\126\001\000\000\126\001\126\001\126\001\
\126\001\126\001\000\000\179\000\000\000\126\001\000\000\126\001\
\106\000\106\000\126\001\126\001\047\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\047\000\047\000\
\047\000\047\000\047\000\000\000\000\000\000\000\047\000\000\000\
\047\000\000\000\000\000\000\000\144\001\183\000\147\000\148\000\
\149\000\150\000\000\000\000\000\106\000\000\000\000\000\000\000\
\000\000\126\001\000\000\106\000\106\000\126\001\126\001\068\001\
\000\000\068\001\000\000\000\000\068\001\068\001\068\001\068\001\
\184\000\068\001\000\000\106\000\106\000\106\000\000\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\144\001\144\001\
\000\000\000\000\000\000\000\000\000\000\185\000\186\000\187\000\
\000\000\000\000\188\000\189\000\000\000\000\000\190\000\000\000\
\000\000\000\000\083\000\191\000\192\000\000\000\193\000\083\000\
\084\001\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\000\000\083\000\083\000\083\000\083\000\083\000\183\000\147\000\
\148\000\149\000\150\000\069\001\000\000\069\001\000\000\000\000\
\069\001\069\001\069\001\069\001\000\000\069\001\000\000\000\000\
\000\000\183\000\147\000\148\000\149\000\150\000\000\000\000\000\
\000\000\184\000\000\000\220\000\083\000\220\000\220\000\220\000\
\220\000\220\000\220\000\220\000\000\000\220\000\220\000\220\000\
\220\000\220\000\000\000\083\000\184\000\000\000\185\000\186\000\
\187\000\000\000\000\000\188\000\189\000\000\000\000\000\190\000\
\000\000\000\000\000\000\000\000\191\000\192\000\000\000\026\001\
\000\000\185\000\186\000\187\000\000\000\000\000\188\000\189\000\
\220\000\000\000\190\000\000\000\000\000\000\000\000\000\191\000\
\192\000\000\000\193\000\000\000\000\000\000\000\220\000\220\000\
\000\000\000\000\220\000\075\001\075\001\075\001\075\001\075\001\
\075\001\075\001\075\001\075\001\075\001\075\001\075\001\075\001\
\075\001\075\001\075\001\075\001\075\001\075\001\075\001\075\001\
\075\001\075\001\075\001\000\000\075\001\075\001\075\001\000\000\
\075\001\075\001\075\001\075\001\075\001\075\001\075\001\075\001\
\075\001\000\000\075\001\075\001\075\001\075\001\075\001\000\000\
\075\001\022\001\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\022\001\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\022\001\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\000\000\022\001\022\001\022\001\000\000\022\001\022\001\
\022\001\022\001\000\000\000\000\022\001\000\000\022\001\000\000\
\022\001\022\001\022\001\022\001\022\001\000\000\022\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\020\001\000\000\
\020\001\020\001\020\001\000\000\020\001\020\001\020\001\020\001\
\020\001\020\001\000\000\020\001\000\000\000\000\020\001\000\000\
\000\000\020\001\020\001\000\000\020\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\000\000\070\001\071\001\
\072\001\000\000\073\001\074\001\075\001\076\001\077\001\078\001\
\000\000\079\001\000\000\000\000\080\001\000\000\058\002\000\000\
\000\000\000\000\081\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\000\000\070\001\071\001\072\001\000\000\
\073\001\074\001\075\001\076\001\077\001\078\001\000\000\079\001\
\000\000\000\000\080\001\000\000\000\000\076\002\000\000\000\000\
\081\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\000\000\070\001\071\001\072\001\000\000\073\001\074\001\
\075\001\076\001\077\001\078\001\000\000\079\001\000\000\000\000\
\080\001\000\000\078\002\000\000\000\000\000\000\081\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\000\000\
\070\001\071\001\072\001\000\000\073\001\074\001\075\001\076\001\
\077\001\078\001\163\002\079\001\000\000\000\000\080\001\000\000\
\000\000\000\000\000\000\000\000\081\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\000\000\070\001\071\001\
\072\001\000\000\073\001\074\001\075\001\076\001\077\001\078\001\
\000\000\079\001\000\000\000\000\080\001\000\000\000\000\000\000\
\000\000\000\000\081\001\025\001\025\001\025\001\025\001\025\001\
\025\001\025\001\025\001\025\001\025\001\025\001\000\000\000\000\
\025\001\025\001\025\001\025\001\025\001\025\001\025\001\025\001\
\025\001\025\001\025\001\000\000\025\001\025\001\025\001\000\000\
\025\001\025\001\025\001\025\001\000\000\000\000\025\001\000\000\
\025\001\000\000\000\000\025\001\025\001\025\001\025\001\000\000\
\025\001\028\001\028\001\028\001\028\001\028\001\028\001\028\001\
\028\001\028\001\028\001\028\001\000\000\000\000\028\001\028\001\
\028\001\028\001\028\001\028\001\028\001\028\001\028\001\028\001\
\028\001\000\000\028\001\028\001\028\001\000\000\028\001\028\001\
\028\001\028\001\000\000\000\000\028\001\000\000\028\001\000\000\
\000\000\028\001\028\001\028\001\028\001\000\000\028\001\026\001\
\026\001\026\001\026\001\026\001\026\001\026\001\026\001\026\001\
\026\001\026\001\000\000\000\000\026\001\026\001\026\001\026\001\
\026\001\026\001\026\001\026\001\026\001\026\001\026\001\000\000\
\026\001\026\001\026\001\000\000\026\001\026\001\026\001\026\001\
\000\000\000\000\026\001\000\000\026\001\000\000\000\000\026\001\
\026\001\026\001\026\001\000\000\026\001\027\001\027\001\027\001\
\027\001\027\001\027\001\027\001\027\001\027\001\027\001\027\001\
\000\000\000\000\027\001\027\001\027\001\027\001\027\001\027\001\
\027\001\027\001\027\001\027\001\027\001\000\000\027\001\027\001\
\027\001\000\000\027\001\027\001\027\001\027\001\000\000\000\000\
\027\001\000\000\027\001\000\000\000\000\027\001\027\001\027\001\
\027\001\000\000\027\001\029\001\029\001\029\001\029\001\029\001\
\029\001\029\001\029\001\029\001\029\001\029\001\000\000\000\000\
\029\001\029\001\029\001\029\001\029\001\029\001\029\001\029\001\
\029\001\029\001\029\001\000\000\029\001\029\001\029\001\000\000\
\029\001\029\001\029\001\029\001\000\000\000\000\029\001\000\000\
\029\001\000\000\000\000\029\001\029\001\029\001\029\001\000\000\
\029\001\031\001\031\001\031\001\031\001\031\001\031\001\031\001\
\031\001\031\001\031\001\031\001\000\000\000\000\031\001\031\001\
\031\001\031\001\031\001\031\001\031\001\031\001\031\001\031\001\
\031\001\000\000\031\001\031\001\031\001\000\000\031\001\031\001\
\031\001\031\001\000\000\000\000\031\001\000\000\031\001\000\000\
\000\000\031\001\031\001\031\001\031\001\000\000\031\001\045\001\
\045\001\045\001\045\001\045\001\045\001\045\001\045\001\045\001\
\045\001\045\001\000\000\000\000\045\001\045\001\045\001\045\001\
\045\001\045\001\045\001\045\001\045\001\045\001\045\001\000\000\
\045\001\045\001\045\001\000\000\045\001\045\001\045\001\045\001\
\000\000\000\000\045\001\000\000\045\001\000\000\000\000\045\001\
\045\001\045\001\045\001\000\000\045\001\046\001\046\001\046\001\
\046\001\046\001\046\001\046\001\046\001\046\001\046\001\046\001\
\000\000\000\000\046\001\046\001\046\001\046\001\046\001\046\001\
\046\001\046\001\046\001\046\001\046\001\000\000\046\001\046\001\
\046\001\000\000\046\001\046\001\046\001\046\001\000\000\000\000\
\046\001\000\000\046\001\000\000\000\000\046\001\046\001\046\001\
\046\001\000\000\046\001\047\001\047\001\047\001\047\001\047\001\
\047\001\047\001\047\001\047\001\047\001\047\001\000\000\000\000\
\047\001\047\001\047\001\047\001\047\001\047\001\047\001\047\001\
\047\001\047\001\047\001\000\000\047\001\047\001\047\001\000\000\
\047\001\047\001\047\001\047\001\000\000\000\000\047\001\000\000\
\047\001\000\000\000\000\047\001\047\001\047\001\047\001\000\000\
\047\001\039\001\039\001\039\001\039\001\039\001\039\001\039\001\
\039\001\039\001\039\001\039\001\000\000\000\000\039\001\039\001\
\039\001\039\001\039\001\039\001\039\001\039\001\039\001\039\001\
\039\001\000\000\039\001\039\001\039\001\000\000\039\001\039\001\
\039\001\039\001\000\000\000\000\039\001\000\000\039\001\000\000\
\000\000\039\001\039\001\039\001\039\001\000\000\039\001\023\001\
\023\001\023\001\023\001\023\001\023\001\023\001\023\001\023\001\
\023\001\023\001\000\000\000\000\023\001\023\001\023\001\023\001\
\023\001\023\001\023\001\023\001\000\000\000\000\000\000\000\000\
\023\001\023\001\023\001\000\000\023\001\023\001\023\001\023\001\
\000\000\000\000\023\001\000\000\023\001\000\000\000\000\023\001\
\023\001\023\001\023\001\000\000\023\001\024\001\024\001\024\001\
\024\001\024\001\024\001\024\001\024\001\024\001\024\001\024\001\
\000\000\000\000\024\001\024\001\024\001\024\001\024\001\024\001\
\024\001\024\001\000\000\000\000\000\000\000\000\024\001\024\001\
\024\001\000\000\024\001\024\001\024\001\024\001\000\000\000\000\
\024\001\000\000\024\001\000\000\000\000\024\001\024\001\024\001\
\024\001\000\000\024\001\043\001\043\001\043\001\043\001\043\001\
\043\001\043\001\043\001\043\001\043\001\043\001\000\000\000\000\
\043\001\043\001\043\001\043\001\043\001\043\001\043\001\043\001\
\000\000\000\000\000\000\000\000\043\001\043\001\043\001\000\000\
\043\001\043\001\043\001\043\001\000\000\000\000\043\001\000\000\
\043\001\000\000\000\000\043\001\043\001\043\001\043\001\000\000\
\043\001\044\001\044\001\044\001\044\001\044\001\044\001\044\001\
\044\001\044\001\044\001\044\001\000\000\000\000\044\001\044\001\
\044\001\044\001\044\001\044\001\044\001\044\001\000\000\000\000\
\000\000\000\000\044\001\044\001\044\001\000\000\044\001\044\001\
\044\001\044\001\000\000\000\000\044\001\000\000\044\001\000\000\
\000\000\044\001\044\001\044\001\044\001\000\000\044\001\059\001\
\059\001\059\001\059\001\059\001\059\001\059\001\059\001\059\001\
\059\001\059\001\000\000\000\000\059\001\059\001\059\001\059\001\
\059\001\059\001\000\000\000\000\000\000\000\000\000\000\000\000\
\059\001\059\001\059\001\000\000\059\001\059\001\059\001\059\001\
\000\000\000\000\059\001\000\000\059\001\000\000\000\000\059\001\
\059\001\059\001\059\001\000\000\059\001\060\001\060\001\060\001\
\060\001\060\001\060\001\060\001\060\001\060\001\060\001\060\001\
\000\000\000\000\060\001\060\001\060\001\060\001\060\001\060\001\
\000\000\000\000\000\000\000\000\000\000\000\000\060\001\060\001\
\060\001\000\000\060\001\060\001\060\001\060\001\000\000\000\000\
\060\001\000\000\060\001\000\000\000\000\060\001\060\001\060\001\
\060\001\000\000\060\001\055\001\055\001\055\001\055\001\055\001\
\055\001\055\001\055\001\055\001\055\001\055\001\000\000\000\000\
\055\001\055\001\055\001\055\001\055\001\055\001\000\000\000\000\
\000\000\000\000\000\000\000\000\055\001\055\001\055\001\000\000\
\055\001\055\001\000\000\000\000\000\000\000\000\055\001\000\000\
\055\001\000\000\000\000\055\001\055\001\055\001\055\001\000\000\
\055\001\056\001\056\001\056\001\056\001\056\001\056\001\056\001\
\056\001\056\001\056\001\056\001\000\000\000\000\056\001\056\001\
\056\001\056\001\056\001\056\001\000\000\000\000\000\000\000\000\
\000\000\000\000\056\001\056\001\056\001\000\000\056\001\056\001\
\000\000\000\000\000\000\000\000\056\001\000\000\056\001\000\000\
\000\000\056\001\056\001\056\001\056\001\000\000\056\001\057\001\
\057\001\057\001\057\001\057\001\057\001\057\001\057\001\057\001\
\057\001\057\001\000\000\000\000\057\001\057\001\057\001\057\001\
\057\001\057\001\000\000\000\000\000\000\000\000\000\000\000\000\
\057\001\057\001\057\001\000\000\057\001\057\001\000\000\000\000\
\000\000\000\000\057\001\000\000\057\001\000\000\000\000\057\001\
\057\001\057\001\057\001\000\000\057\001\058\001\058\001\058\001\
\058\001\058\001\058\001\058\001\058\001\058\001\058\001\058\001\
\000\000\000\000\058\001\058\001\058\001\058\001\058\001\058\001\
\000\000\000\000\000\000\000\000\000\000\000\000\058\001\058\001\
\058\001\000\000\058\001\058\001\000\000\000\000\000\000\000\000\
\058\001\000\000\058\001\000\000\000\000\058\001\058\001\058\001\
\058\001\000\000\058\001\053\001\053\001\053\001\053\001\053\001\
\053\001\053\001\053\001\053\001\053\001\053\001\000\000\000\000\
\053\001\053\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\001\053\001\053\001\000\000\
\053\001\053\001\000\000\000\000\000\000\000\000\053\001\000\000\
\053\001\000\000\000\000\053\001\053\001\053\001\053\001\000\000\
\053\001\054\001\054\001\054\001\054\001\054\001\054\001\054\001\
\054\001\054\001\054\001\054\001\000\000\000\000\054\001\054\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\001\054\001\054\001\000\000\054\001\054\001\
\000\000\000\000\000\000\000\000\054\001\000\000\054\001\000\000\
\000\000\054\001\054\001\054\001\054\001\000\000\054\001\050\001\
\050\001\050\001\050\001\050\001\050\001\050\001\050\001\050\001\
\050\001\050\001\070\001\000\000\070\001\000\000\000\000\070\001\
\070\001\070\001\070\001\000\000\070\001\000\000\000\000\000\000\
\050\001\050\001\050\001\000\000\050\001\050\001\000\000\000\000\
\000\000\000\000\050\001\000\000\050\001\000\000\000\000\050\001\
\050\001\050\001\050\001\000\000\050\001\052\001\052\001\052\001\
\052\001\052\001\052\001\052\001\052\001\052\001\052\001\052\001\
\000\000\025\000\026\000\027\000\028\000\029\000\000\000\000\000\
\000\000\000\000\033\000\034\000\035\000\036\000\086\000\052\001\
\052\001\087\000\052\001\052\001\000\000\000\000\000\000\000\000\
\052\001\000\000\052\001\000\000\000\000\052\001\052\001\052\001\
\052\001\000\000\052\001\051\001\051\001\051\001\051\001\051\001\
\051\001\051\001\051\001\051\001\051\001\051\001\056\000\000\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\000\000\
\032\000\033\000\034\000\035\000\036\000\051\001\000\000\000\000\
\051\001\051\001\000\000\000\000\000\000\000\000\051\001\000\000\
\051\001\000\000\000\000\051\001\051\001\051\001\051\001\000\000\
\051\001\048\001\048\001\048\001\048\001\048\001\048\001\048\001\
\048\001\048\001\048\001\048\001\000\000\000\000\000\000\049\001\
\049\001\049\001\049\001\049\001\049\001\049\001\049\001\049\001\
\049\001\049\001\000\000\071\001\000\000\071\001\048\001\048\001\
\071\001\071\001\071\001\071\001\048\001\071\001\048\001\000\000\
\000\000\048\001\048\001\048\001\048\001\049\001\048\001\000\000\
\000\000\000\000\049\001\000\000\049\001\000\000\000\000\049\001\
\049\001\049\001\049\001\000\000\049\001\042\001\042\001\042\001\
\042\001\042\001\042\001\042\001\042\001\042\001\042\001\042\001\
\023\000\000\000\000\000\000\000\000\000\024\000\000\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\000\000\032\000\
\033\000\034\000\035\000\036\000\037\000\000\000\000\000\038\000\
\042\001\000\000\042\001\000\000\000\000\042\001\042\001\042\001\
\042\001\000\000\042\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\000\000\070\001\071\001\072\001\000\000\
\073\001\074\001\075\001\076\001\077\001\078\001\000\000\079\001\
\000\000\000\000\080\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\000\000\070\001\071\001\072\001\000\000\073\001\074\001\075\001\
\076\001\077\001\078\001\000\000\079\001\000\000\000\000\080\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\000\000\070\001\071\001\
\072\001\000\000\073\001\000\000\075\001\076\001\077\001\078\001\
\000\000\079\001\000\000\000\000\080\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\000\000\070\001\071\001\072\001\000\000\000\000\
\000\000\075\001\076\001\077\001\078\001\000\000\079\001\000\000\
\000\000\080\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\000\000\
\070\001\000\000\072\001\000\000\000\000\000\000\075\001\076\001\
\077\001\078\001\000\000\079\001\000\000\000\000\080\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\000\000\070\001\000\000\000\000\
\000\000\000\000\000\000\075\001\076\001\077\001\078\001\000\000\
\079\001\000\000\000\000\080\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\075\001\076\001\077\001\078\001\000\000\079\001\057\001\058\001\
\080\001\000\000\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\001\076\001\077\001\078\001\000\000\079\001\
\057\001\058\001\080\001\000\000\000\000\000\000\000\000\000\000\
\065\001\066\001\067\001\068\001\069\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\001\076\001\077\001\078\001\
\000\000\079\001\057\001\058\001\080\001\000\000\000\000\000\000\
\000\000\000\000\065\001\066\001\067\001\068\001\069\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\001\078\001\023\000\079\001\000\000\000\000\080\001\024\000\
\000\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\000\000\032\000\033\000\034\000\035\000\036\000\025\000\026\000\
\027\000\028\000\029\000\000\000\000\000\000\000\000\000\033\000\
\034\000\035\000\036\000\000\000\000\000\000\000\133\001\224\000\
\134\001\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\000\000\032\000\033\000\034\000\035\000\036\000\243\000\000\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\000\000\
\032\000\033\000\034\000\035\000\036\000\021\001\000\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\000\000\032\000\
\033\000\034\000\035\000\036\000\096\001\000\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\000\000\032\000\033\000\
\034\000\035\000\036\000\192\001\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\000\000\032\000\033\000\034\000\
\035\000\036\000\059\000\000\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\000\000\059\000\059\000\059\000\059\000\
\059\000\151\000\000\000\151\000\151\000\151\000\151\000\151\000\
\151\000\151\000\000\000\151\000\151\000\151\000\151\000\151\000\
\219\000\000\000\219\000\219\000\219\000\219\000\219\000\219\000\
\219\000\000\000\219\000\219\000\219\000\219\000\219\000\188\000\
\000\000\188\000\188\000\188\000\188\000\188\000\188\000\188\000\
\000\000\188\000\188\000\188\000\188\000\188\000"

let yycheck = "\100\000\
\048\000\143\000\018\000\087\001\054\000\001\000\002\000\113\001\
\018\000\089\000\084\001\091\001\092\001\215\000\237\000\238\000\
\044\001\010\002\053\000\015\000\210\000\001\001\126\000\019\000\
\219\000\220\000\006\001\066\001\021\001\133\000\078\000\005\001\
\024\001\043\000\026\001\188\001\189\001\130\000\001\001\000\000\
\005\001\001\001\019\000\144\000\001\001\000\000\006\001\057\000\
\083\000\006\001\001\001\001\001\048\000\017\001\018\001\006\001\
\006\001\053\000\066\001\109\000\056\000\057\000\058\000\005\001\
\021\001\022\001\023\001\024\001\025\001\026\001\001\001\051\001\
\000\000\066\001\001\001\071\000\068\001\073\000\067\001\024\001\
\057\000\026\001\078\000\072\001\073\001\065\001\066\001\083\000\
\051\001\069\001\001\001\051\001\193\000\073\001\051\001\067\001\
\112\000\071\001\094\000\001\001\065\001\073\001\112\000\066\001\
\006\001\101\000\066\001\015\001\065\001\066\001\106\000\071\001\
\069\001\129\000\071\001\072\001\073\001\068\001\068\001\129\000\
\051\001\114\002\008\001\065\001\051\001\088\001\089\001\090\001\
\005\001\071\001\126\000\088\001\089\001\090\001\130\000\066\001\
\132\000\133\000\134\000\066\001\051\001\072\001\138\000\193\000\
\248\000\072\001\250\000\253\001\045\002\046\002\047\002\048\002\
\068\001\246\000\074\002\066\001\149\002\007\002\238\001\239\001\
\240\001\072\001\242\001\097\001\180\000\200\000\068\001\195\001\
\001\001\001\001\180\000\255\001\168\000\006\001\141\001\142\001\
\143\001\144\001\029\001\030\001\001\001\026\001\006\001\007\001\
\123\001\124\001\106\002\051\001\021\001\237\000\073\000\024\001\
\069\001\209\000\027\001\067\001\056\000\193\000\058\000\209\000\
\021\001\073\001\066\001\024\001\200\000\026\001\170\001\171\001\
\172\001\173\001\001\001\001\001\065\001\001\001\210\000\006\001\
\001\001\227\000\051\001\215\000\073\001\072\001\073\001\001\001\
\021\001\017\001\068\001\024\001\078\002\026\001\001\001\000\000\
\026\001\066\001\079\001\080\001\246\000\065\001\071\001\068\001\
\001\001\237\000\060\002\129\001\072\001\073\002\068\001\243\000\
\244\000\132\000\246\000\134\000\248\000\071\002\250\000\088\001\
\089\001\090\001\001\000\002\000\110\002\051\001\112\002\051\001\
\150\001\115\002\051\001\088\001\089\001\090\001\024\001\072\001\
\158\001\051\001\001\001\073\001\066\001\017\001\066\001\006\001\
\051\001\066\001\072\001\043\001\024\001\130\001\026\001\072\001\
\066\001\043\001\051\001\088\001\089\001\090\001\072\001\066\001\
\096\001\030\001\098\001\091\001\150\002\072\001\001\001\001\001\
\044\001\066\001\151\001\006\001\006\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\166\002\016\001\017\001\018\001\
\019\001\020\001\012\002\030\001\001\001\001\001\067\001\065\001\
\029\001\001\001\006\001\176\001\073\001\071\001\006\001\073\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\097\001\
\016\001\017\001\018\001\019\001\020\001\001\001\030\001\091\001\
\051\001\051\001\006\001\095\001\096\001\097\001\098\001\067\001\
\246\001\021\001\001\001\065\001\024\001\072\001\073\001\066\001\
\066\001\021\001\001\001\073\001\024\001\072\001\051\001\027\001\
\065\001\117\001\021\001\051\001\069\001\024\001\021\001\026\001\
\073\001\024\001\051\001\073\001\027\001\066\001\088\001\089\001\
\090\001\001\001\066\001\072\001\188\001\030\001\006\001\051\001\
\072\001\066\001\247\001\005\001\144\001\073\001\021\001\022\001\
\023\001\024\001\025\001\026\001\051\001\066\001\066\001\021\001\
\005\002\065\001\024\001\008\002\051\001\010\002\011\002\088\001\
\089\001\090\001\001\001\066\001\088\001\089\001\090\001\074\001\
\066\001\173\001\066\001\066\001\088\001\089\001\090\001\072\001\
\073\001\195\001\065\001\051\001\001\001\088\001\089\001\090\001\
\188\001\088\001\089\001\090\001\192\001\193\001\084\002\195\001\
\069\001\087\002\066\001\072\001\073\001\091\002\051\002\184\000\
\185\000\186\000\187\000\188\000\189\000\190\000\191\000\192\000\
\102\002\088\001\089\001\090\001\051\001\198\000\065\001\001\001\
\088\001\089\001\090\001\070\001\006\001\072\001\073\001\065\001\
\001\001\119\002\001\001\066\001\001\001\006\001\051\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\242\001\016\001\
\017\001\018\001\019\001\020\001\229\000\066\001\021\001\067\001\
\021\001\024\001\065\001\024\001\027\001\073\001\239\000\065\001\
\066\001\072\001\073\001\069\001\113\002\114\002\072\001\073\001\
\012\002\051\001\088\001\089\001\090\001\001\001\002\001\003\001\
\004\001\005\001\051\001\007\001\051\001\073\001\051\001\067\001\
\066\001\021\001\022\001\023\001\024\001\071\001\026\001\021\001\
\067\001\066\001\024\001\066\001\024\001\066\001\065\001\072\001\
\149\002\029\001\069\001\015\001\048\002\065\001\088\001\089\001\
\090\001\021\001\022\001\023\001\024\001\073\001\026\001\001\001\
\071\001\088\001\089\001\090\001\006\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\072\001\073\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\088\001\089\001\090\001\066\001\
\081\001\021\001\083\001\084\001\024\001\021\001\090\001\065\001\
\024\001\051\001\065\001\069\001\001\001\001\001\001\001\073\001\
\071\001\006\001\006\001\065\001\088\001\089\001\090\001\069\001\
\066\001\021\001\065\001\108\001\024\001\110\001\065\001\065\001\
\071\001\001\001\002\001\003\001\004\001\005\001\006\001\073\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\067\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\140\001\028\001\029\001\051\001\051\001\
\051\001\073\001\074\001\065\001\088\001\089\001\090\001\067\001\
\088\001\089\001\090\001\073\001\065\001\066\001\066\001\066\001\
\069\001\049\001\050\001\051\001\073\001\021\001\054\001\055\001\
\024\001\065\001\058\001\065\001\088\001\089\001\090\001\063\001\
\064\001\073\001\066\001\067\001\068\001\088\001\089\001\090\001\
\072\001\069\001\187\001\065\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\083\001\084\001\085\001\086\001\001\001\
\088\001\089\001\090\001\065\001\006\001\065\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\073\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\051\001\
\026\001\078\000\079\000\065\001\001\001\001\001\005\001\041\001\
\042\001\006\001\006\001\073\001\066\001\065\001\066\001\069\001\
\065\001\069\001\001\001\002\001\003\001\004\001\005\001\072\001\
\073\001\051\001\065\001\065\001\001\001\063\001\064\001\069\001\
\066\001\006\001\073\001\069\001\065\001\072\001\021\001\066\001\
\066\001\024\001\069\001\072\001\073\001\028\001\072\001\071\001\
\021\001\022\001\023\001\024\001\025\001\026\001\051\001\051\001\
\072\001\065\001\135\000\136\000\137\000\138\000\088\001\089\001\
\090\001\073\001\049\001\050\001\051\001\066\001\066\001\054\001\
\055\001\021\001\043\002\058\001\024\001\001\001\051\001\070\001\
\063\001\064\001\073\001\066\001\065\001\068\001\065\001\065\001\
\069\001\058\002\069\001\060\002\065\001\066\001\072\001\073\001\
\069\001\066\001\071\001\072\001\073\001\065\001\071\002\001\001\
\071\001\088\001\089\001\090\001\006\001\073\001\088\001\089\001\
\090\001\001\001\065\001\088\001\089\001\090\001\006\001\067\001\
\066\001\072\001\073\001\021\001\022\001\023\001\024\001\025\001\
\026\001\066\001\065\001\066\001\069\001\021\001\069\001\065\001\
\024\001\048\000\049\000\027\001\088\001\089\001\090\001\073\001\
\072\001\073\001\008\001\009\001\010\001\011\001\012\001\051\001\
\066\001\051\001\066\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\051\001\026\001\065\001\066\001\065\001\
\066\001\069\001\065\001\069\001\141\002\071\001\072\001\073\001\
\072\001\073\001\066\001\090\000\091\000\092\000\065\001\094\000\
\065\001\065\001\066\001\098\000\065\001\069\001\088\001\089\001\
\090\001\070\001\021\001\072\001\073\001\024\001\072\001\073\001\
\088\001\089\001\090\001\001\001\002\001\003\001\004\001\005\001\
\006\001\065\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\065\001\016\001\017\001\018\001\019\001\020\001\069\001\
\072\001\073\001\088\001\089\001\090\001\065\001\028\001\029\001\
\008\001\009\001\010\001\011\001\012\001\072\001\073\001\073\001\
\067\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\049\001\050\001\051\001\065\001\066\001\
\054\001\055\001\069\001\030\001\058\001\088\001\089\001\090\001\
\065\001\063\001\064\001\066\001\066\001\067\001\068\001\072\001\
\073\001\065\001\072\001\072\001\073\001\069\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\001\001\002\001\003\001\004\001\005\001\006\001\072\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\065\001\
\016\001\017\001\018\001\019\001\020\001\083\001\072\001\073\001\
\088\001\089\001\090\001\066\001\028\001\029\001\008\001\009\001\
\010\001\011\001\012\001\066\001\065\001\065\001\069\001\017\001\
\018\001\019\001\020\001\021\001\072\001\073\001\024\001\066\001\
\026\001\049\001\050\001\051\001\065\001\066\001\054\001\055\001\
\069\001\065\001\058\001\065\001\088\001\089\001\090\001\063\001\
\064\001\066\001\066\001\067\001\068\001\065\001\066\001\070\001\
\072\001\069\001\073\001\066\001\076\001\077\001\078\001\079\001\
\080\001\081\001\082\001\083\001\084\001\085\001\086\001\001\001\
\002\001\003\001\004\001\005\001\006\001\065\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\065\001\016\001\017\001\
\018\001\019\001\020\001\066\001\072\001\073\001\088\001\089\001\
\090\001\066\001\028\001\029\001\008\001\009\001\010\001\011\001\
\012\001\070\001\072\001\065\001\073\001\017\001\018\001\019\001\
\020\001\021\001\072\001\073\001\024\001\072\001\073\001\049\001\
\050\001\051\001\072\001\066\001\054\001\055\001\069\001\071\001\
\058\001\065\001\088\001\089\001\090\001\063\001\064\001\066\001\
\066\001\067\001\068\001\072\001\073\001\070\001\072\001\065\001\
\073\001\065\001\076\001\077\001\078\001\079\001\080\001\081\001\
\082\001\083\001\084\001\085\001\086\001\001\001\002\001\003\001\
\004\001\005\001\006\001\065\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\065\001\016\001\017\001\018\001\019\001\
\020\001\001\001\072\001\073\001\088\001\089\001\090\001\065\001\
\028\001\029\001\070\001\069\001\073\001\073\001\072\001\073\001\
\072\001\073\001\088\001\089\001\090\001\071\001\001\001\002\001\
\003\001\004\001\005\001\072\001\073\001\049\001\050\001\051\001\
\065\001\065\001\054\001\055\001\069\001\072\001\058\001\072\001\
\073\001\087\001\070\001\063\001\064\001\073\001\066\001\067\001\
\068\001\028\001\029\001\070\001\072\001\065\001\073\001\065\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\072\001\073\001\070\001\049\001\050\001\
\051\001\065\001\005\001\054\001\055\001\069\001\072\001\058\001\
\072\001\073\001\072\001\065\001\063\001\064\001\072\001\066\001\
\065\001\068\001\072\001\073\001\005\001\072\001\065\001\072\001\
\073\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\006\001\073\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\005\001\016\001\017\001\
\018\001\019\001\020\001\224\000\225\000\072\001\024\001\066\001\
\026\001\072\001\069\001\029\001\030\001\065\001\006\001\065\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\067\001\
\016\001\017\001\018\001\019\001\020\001\088\001\089\001\090\001\
\024\001\070\001\026\001\065\001\073\001\029\001\030\001\069\001\
\065\001\065\001\072\001\073\001\037\000\038\000\065\001\065\001\
\072\001\073\001\068\001\069\001\243\000\244\000\072\001\073\001\
\192\001\193\001\088\001\089\001\090\001\021\001\022\001\067\001\
\088\001\089\001\090\001\031\000\032\000\067\001\088\001\089\001\
\090\001\065\001\065\001\065\001\068\001\065\001\067\001\067\001\
\072\001\073\001\070\001\071\001\072\001\073\001\072\001\075\001\
\065\001\001\001\002\001\003\001\004\001\005\001\065\001\065\001\
\088\001\089\001\090\001\006\001\002\000\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\065\001\016\001\017\001\018\001\
\019\001\020\001\065\001\065\001\028\001\024\001\065\001\026\001\
\065\001\015\000\029\001\030\001\098\000\006\001\245\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\121\001\016\001\
\017\001\018\001\019\001\020\001\062\000\117\000\054\001\024\001\
\008\001\026\001\058\001\066\001\029\001\030\001\069\001\063\001\
\064\001\066\001\066\001\095\001\069\001\142\000\065\001\109\000\
\128\001\068\001\014\001\181\000\149\001\072\001\073\001\026\001\
\122\000\088\001\089\001\090\001\231\000\117\001\007\001\088\001\
\089\001\090\001\041\001\042\001\144\002\088\001\089\001\090\001\
\065\001\122\002\164\002\068\001\051\001\052\001\053\001\072\001\
\073\001\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\063\001\064\001\255\255\066\001\255\255\255\255\069\001\088\001\
\089\001\090\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\029\001\030\001\255\255\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\029\001\030\001\001\001\255\255\255\255\
\255\255\255\255\006\001\255\255\255\255\065\001\255\255\255\255\
\068\001\065\001\255\255\067\001\072\001\073\001\070\001\071\001\
\072\001\073\001\255\255\075\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\088\001\089\001\090\001\065\001\
\255\255\255\255\068\001\065\001\255\255\067\001\072\001\073\001\
\070\001\071\001\072\001\073\001\255\255\075\001\255\255\051\001\
\008\001\009\001\010\001\011\001\012\001\255\255\088\001\089\001\
\090\001\017\001\018\001\019\001\020\001\021\001\066\001\255\255\
\024\001\069\001\001\001\071\001\072\001\073\001\255\255\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\255\255\001\001\255\255\255\255\255\255\255\255\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\001\001\255\255\255\255\
\029\001\030\001\006\001\065\001\051\001\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\255\255\255\255\
\088\001\089\001\090\001\066\001\255\255\255\255\069\001\255\255\
\071\001\072\001\073\001\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\065\001\255\255\255\255\255\255\
\069\001\065\001\066\001\072\001\073\001\069\001\255\255\051\001\
\255\255\073\001\021\001\255\255\255\255\024\001\255\255\255\255\
\027\001\255\255\255\255\088\001\089\001\090\001\066\001\255\255\
\255\255\069\001\001\001\071\001\072\001\073\001\255\255\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\051\001\016\001\017\001\018\001\019\001\020\001\001\001\002\001\
\003\001\004\001\005\001\065\001\255\255\067\001\255\255\066\001\
\070\001\071\001\072\001\073\001\255\255\075\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\028\001\255\255\255\255\051\001\088\001\089\001\090\001\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\066\001\028\001\255\255\049\001\050\001\
\051\001\072\001\255\255\054\001\055\001\255\255\255\255\058\001\
\255\255\255\255\029\001\030\001\063\001\064\001\028\001\066\001\
\255\255\049\001\050\001\051\001\255\255\072\001\054\001\055\001\
\255\255\255\255\058\001\255\255\255\255\029\001\030\001\063\001\
\064\001\255\255\066\001\049\001\050\001\051\001\070\001\255\255\
\054\001\055\001\255\255\255\255\058\001\255\255\065\001\255\255\
\255\255\063\001\064\001\255\255\066\001\072\001\073\001\255\255\
\070\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\065\001\255\255\255\255\255\255\088\001\089\001\090\001\
\072\001\073\001\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\088\001\089\001\090\001\029\001\030\001\065\001\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\073\001\028\001\075\001\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\255\255\255\255\058\001\255\255\255\255\029\001\030\001\063\001\
\064\001\255\255\066\001\049\001\050\001\051\001\070\001\065\001\
\054\001\055\001\255\255\255\255\058\001\255\255\072\001\073\001\
\255\255\063\001\064\001\255\255\066\001\255\255\255\255\255\255\
\070\001\001\001\002\001\003\001\004\001\005\001\088\001\089\001\
\090\001\065\001\255\255\255\255\255\255\255\255\255\255\255\255\
\072\001\073\001\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\088\001\089\001\090\001\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\028\001\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\255\255\255\255\058\001\255\255\255\255\255\255\255\255\063\001\
\064\001\255\255\066\001\049\001\050\001\051\001\070\001\255\255\
\054\001\055\001\255\255\255\255\058\001\255\255\255\255\255\255\
\255\255\063\001\064\001\255\255\066\001\255\255\255\255\255\255\
\070\001\001\001\002\001\003\001\004\001\005\001\255\255\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\255\255\024\001\255\255\026\001\028\001\255\255\029\001\030\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\255\255\255\255\058\001\255\255\255\255\255\255\255\255\063\001\
\064\001\255\255\066\001\255\255\255\255\068\001\070\001\255\255\
\255\255\072\001\073\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\255\255\065\001\255\255\024\001\255\255\026\001\
\029\001\030\001\029\001\030\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\030\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\065\001\255\255\255\255\255\255\
\255\255\068\001\255\255\072\001\073\001\072\001\073\001\065\001\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\073\001\
\028\001\075\001\255\255\088\001\089\001\090\001\255\255\255\255\
\255\255\255\255\068\001\255\255\255\255\255\255\072\001\073\001\
\255\255\255\255\255\255\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\255\255\255\255\058\001\255\255\
\255\255\255\255\001\001\063\001\064\001\255\255\066\001\006\001\
\068\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\001\001\002\001\
\003\001\004\001\005\001\065\001\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\073\001\255\255\075\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\028\001\255\255\006\001\051\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\255\255\066\001\028\001\255\255\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\255\255\255\255\058\001\
\255\255\255\255\255\255\255\255\063\001\064\001\255\255\066\001\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\051\001\255\255\058\001\255\255\255\255\255\255\255\255\063\001\
\064\001\255\255\066\001\255\255\255\255\255\255\065\001\066\001\
\255\255\255\255\069\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\255\255\069\001\070\001\071\001\072\001\073\001\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\056\001\057\001\255\255\059\001\060\001\
\061\001\062\001\255\255\255\255\065\001\255\255\067\001\255\255\
\069\001\070\001\071\001\072\001\073\001\255\255\075\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\062\001\
\063\001\064\001\255\255\066\001\255\255\255\255\069\001\255\255\
\255\255\072\001\073\001\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\062\001\063\001\064\001\
\255\255\066\001\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\069\001\255\255\255\255\072\001\255\255\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\056\001\057\001\255\255\059\001\060\001\
\061\001\062\001\063\001\064\001\255\255\066\001\255\255\255\255\
\069\001\255\255\071\001\255\255\255\255\255\255\075\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\062\001\063\001\064\001\
\255\255\066\001\255\255\255\255\069\001\255\255\255\255\255\255\
\255\255\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\062\001\255\255\255\255\065\001\255\255\
\067\001\255\255\255\255\070\001\071\001\072\001\073\001\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\056\001\057\001\255\255\059\001\060\001\
\061\001\062\001\255\255\255\255\065\001\255\255\067\001\255\255\
\255\255\070\001\071\001\072\001\073\001\255\255\075\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\062\001\
\255\255\255\255\065\001\255\255\067\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\062\001\255\255\255\255\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\062\001\255\255\255\255\065\001\255\255\
\067\001\255\255\255\255\070\001\071\001\072\001\073\001\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\056\001\057\001\255\255\059\001\060\001\
\061\001\062\001\255\255\255\255\065\001\255\255\067\001\255\255\
\255\255\070\001\071\001\072\001\073\001\255\255\075\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\062\001\
\255\255\255\255\065\001\255\255\067\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\062\001\255\255\255\255\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\062\001\255\255\255\255\065\001\255\255\
\067\001\255\255\255\255\070\001\071\001\072\001\073\001\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\056\001\057\001\255\255\059\001\060\001\
\061\001\062\001\255\255\255\255\065\001\255\255\067\001\255\255\
\255\255\070\001\071\001\072\001\073\001\255\255\075\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\255\255\255\255\255\255\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\062\001\
\255\255\255\255\065\001\255\255\067\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\255\255\255\255\255\255\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\062\001\255\255\255\255\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\062\001\255\255\255\255\065\001\255\255\
\067\001\255\255\255\255\070\001\071\001\072\001\073\001\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\255\255\
\255\255\255\255\055\001\056\001\057\001\255\255\059\001\060\001\
\061\001\062\001\255\255\255\255\065\001\255\255\067\001\255\255\
\255\255\070\001\071\001\072\001\073\001\255\255\075\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\062\001\
\255\255\255\255\065\001\255\255\067\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\062\001\255\255\255\255\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\255\255\255\255\255\255\255\255\065\001\255\255\
\067\001\255\255\255\255\070\001\071\001\072\001\073\001\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\056\001\057\001\255\255\059\001\060\001\
\255\255\255\255\255\255\255\255\065\001\255\255\067\001\255\255\
\255\255\070\001\071\001\072\001\073\001\255\255\075\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\056\001\057\001\255\255\059\001\060\001\255\255\255\255\
\255\255\255\255\065\001\255\255\067\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\056\001\
\057\001\255\255\059\001\060\001\255\255\255\255\255\255\255\255\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\255\255\255\255\255\255\255\255\065\001\255\255\
\067\001\255\255\255\255\070\001\071\001\072\001\073\001\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\056\001\057\001\255\255\059\001\060\001\
\255\255\255\255\255\255\255\255\065\001\255\255\067\001\255\255\
\255\255\070\001\071\001\072\001\073\001\255\255\075\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\065\001\255\255\067\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\075\001\255\255\255\255\255\255\
\055\001\056\001\057\001\255\255\059\001\060\001\255\255\255\255\
\255\255\255\255\065\001\255\255\067\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\056\001\
\057\001\024\001\059\001\060\001\255\255\255\255\255\255\255\255\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\056\001\255\255\255\255\
\059\001\060\001\255\255\255\255\255\255\255\255\065\001\255\255\
\067\001\255\255\255\255\070\001\071\001\072\001\073\001\255\255\
\075\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\065\001\255\255\067\001\059\001\060\001\
\070\001\071\001\072\001\073\001\065\001\075\001\067\001\255\255\
\255\255\070\001\071\001\072\001\073\001\060\001\075\001\255\255\
\255\255\255\255\065\001\255\255\067\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\075\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\001\001\255\255\255\255\255\255\255\255\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\065\001\255\255\067\001\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\075\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\069\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\255\255\069\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\055\001\056\001\
\057\001\255\255\059\001\255\255\061\001\062\001\063\001\064\001\
\255\255\066\001\255\255\255\255\069\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\255\255\255\255\
\255\255\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\255\255\069\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\255\255\057\001\255\255\255\255\255\255\061\001\062\001\
\063\001\064\001\255\255\066\001\255\255\255\255\069\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\255\255\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\064\001\255\255\
\066\001\255\255\255\255\069\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\061\001\062\001\063\001\064\001\255\255\066\001\041\001\042\001\
\069\001\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\062\001\063\001\064\001\255\255\066\001\
\041\001\042\001\069\001\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\051\001\052\001\053\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\062\001\063\001\064\001\
\255\255\066\001\041\001\042\001\069\001\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\063\001\064\001\001\001\066\001\255\255\255\255\069\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\255\255\255\255\255\255\024\001\006\001\
\026\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001"

let yynames_const = "\
  EOF\000\
  CHAR\000\
  INT\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  AUTO\000\
  REGISTER\000\
  RESTRICT\000\
  SIZEOF\000\
  ASM\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  TILDE\000\
  AND\000\
  PIPE\000\
  CIRC\000\
  EXCLAM\000\
  AND_AND\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  ATTRIBUTE\000\
  EXTENSION\000\
  INLINE\000\
  "

let yynames_block = "\
  IDENT\000\
  CST_CHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  CST_STRING\000\
  NAMED_TYPE\000\
  GNU_ATTRS\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  RPAREN\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  SEMICOLON\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  ELSE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 325 "cparser.mly"
                (_1)
# 2021 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 328 "cparser.mly"
                   ([])
# 2027 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 329 "cparser.mly"
                 (List.rev _1)
# 2034 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 332 "cparser.mly"
               ([_1])
# 2041 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 333 "cparser.mly"
                      (_2::_1)
# 2049 "cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 340 "cparser.mly"
   (DECDEF (set_name_group _1 (List.rev _2)))
# 2058 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'global_proto) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * (Cabs.definition list * Cabs.statement)) in
    Obj.repr(
# 342 "cparser.mly"
   (
				let (_, base, _, _) = _2 in
				match base with
				  PROTO _ ->
					FUNDEF (set_single _1 _2, (snd _3))
				| OLD_PROTO _ ->
					OLDFUNDEF (set_single _1 _2, [], (snd _3))
				| _ ->
					assert false
			)
# 2076 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_proto) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardefs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * (Cabs.definition list * Cabs.statement)) in
    Obj.repr(
# 353 "cparser.mly"
   ( OLDFUNDEF (set_single _1 _2, List.rev _3, (snd _4)) )
# 2086 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 355 "cparser.mly"
   (ONLYTYPEDEF (set_name_group _1 []))
# 2094 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_defs_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 357 "cparser.mly"
   (let _ = List.iter (fun (id, _, _, _) -> Clexer.add_type id) _3 in
			TYPEDEF (set_name_group (fst _2, snd _2) _3, []))
# 2104 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'gcc_attribute) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_defs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 360 "cparser.mly"
   (let _ = List.iter (fun (id, _, _, _) -> Clexer.add_type id) _4 in
			TYPEDEF (set_name_group (fst _3, snd _3) _4, _1))
# 2115 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.base_type * modifier list) in
    Obj.repr(
# 366 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 2123 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 368 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 2132 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 370 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2141 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 372 "cparser.mly"
   (apply_mods _1 (NO_TYPE, NO_STORAGE))
# 2148 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    Obj.repr(
# 375 "cparser.mly"
                   ([])
# 2154 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 376 "cparser.mly"
                       (List.rev _1)
# 2161 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 379 "cparser.mly"
                  ([_1])
# 2168 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 380 "cparser.mly"
                               (_2::_1)
# 2176 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    Obj.repr(
# 383 "cparser.mly"
               (BASE_STORAGE STATIC)
# 2182 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 384 "cparser.mly"
               (BASE_CONST)
# 2188 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 385 "cparser.mly"
                 (BASE_VOLATILE)
# 2194 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 386 "cparser.mly"
                (BASE_STORAGE EXTERN)
# 2200 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 387 "cparser.mly"
                 (BASE_STORAGE REGISTER)
# 2206 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 388 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 2213 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 391 "cparser.mly"
                 (_1)
# 2220 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 392 "cparser.mly"
                           (apply_qual _1 _2)
# 2228 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 393 "cparser.mly"
                            ((fst _1, _2::(snd _1)))
# 2236 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 396 "cparser.mly"
                  ([_1])
# 2243 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 397 "cparser.mly"
                                (_3::_1)
# 2252 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_fun_attributes) in
    Obj.repr(
# 401 "cparser.mly"
   ( (fst _1, snd _1, _2, NOTHING) )
# 2260 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gcc_fun_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 403 "cparser.mly"
   ( (fst _1, snd _1, _2, _4) )
# 2270 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 408 "cparser.mly"
   ((_1, set_tline NO_TYPE))
# 2277 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 410 "cparser.mly"
   (_2)
# 2286 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 412 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2293 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 414 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2300 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 416 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2307 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 418 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 2314 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 420 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 2322 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 422 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2332 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 424 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2341 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 426 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2351 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 428 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2363 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'old_parameters) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 430 "cparser.mly"
   ((fst _1, OLD_PROTO (snd _1, fst _3, snd _3)))
# 2373 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_parameters) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 432 "cparser.mly"
   ((fst _2, set_type (OLD_PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2385 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 438 "cparser.mly"
   (
			  let rec descend d1 d2 =
			    match (snd d1) with
			    | PROTO _
			    | OLD_PROTO _ -> (fst d1, snd d1, d2, NOTHING)
			    | TYPE_LINE (_,_,bt) -> descend (fst d1, bt) d2
			    | x -> begin
			      parse_error();
			      raise Parsing.Parse_error end in
			  descend _1 _2)
# 2402 "cparser.ml"
               : 'global_proto))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 452 "cparser.mly"
   (match (snd _1) with
				  OLD_PROTO _ -> (fst _1, snd _1, _2, NOTHING)
				| PROTO (typ, [], ell) ->
					assert false(*fst $1, OLD_PROTO (typ, [], ell), $2, NOTHING*)
				| _ -> begin
					parse_error ();
					raise Parsing.Parse_error
				end )
# 2417 "cparser.ml"
               : 'old_proto))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardecs) in
    Obj.repr(
# 465 "cparser.mly"
                   ((List.rev _1, false))
# 2424 "cparser.ml"
               : 'old_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 466 "cparser.mly"
                          ((List.rev _1, true))
# 2432 "cparser.ml"
               : 'old_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 469 "cparser.mly"
              ([_1])
# 2439 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 470 "cparser.mly"
                             (_3::_1)
# 2448 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 471 "cparser.mly"
                                (_3::_1)
# 2457 "cparser.ml"
               : 'old_pardecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 475 "cparser.mly"
                  ( [_1])
# 2464 "cparser.ml"
               : 'old_pardefs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardefs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 476 "cparser.mly"
                            (_2::_1)
# 2472 "cparser.ml"
               : 'old_pardefs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'old_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 480 "cparser.mly"
   (set_name_group _1 (List.rev _2))
# 2481 "cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_mods_opt) in
    Obj.repr(
# 484 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2490 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_mods_opt) in
    Obj.repr(
# 486 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 2499 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_qual) in
    Obj.repr(
# 488 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 2507 "cparser.ml"
               : 'old_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 491 "cparser.mly"
                   ([])
# 2513 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 492 "cparser.mly"
               ([BASE_CONST])
# 2519 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 493 "cparser.mly"
                 ([BASE_STORAGE REGISTER])
# 2525 "cparser.ml"
               : 'old_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 496 "cparser.mly"
                 (_1)
# 2532 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 497 "cparser.mly"
                         (apply_qual _1 _2)
# 2540 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    Obj.repr(
# 498 "cparser.mly"
                      ((fst _1, BASE_CONST::(snd _1)))
# 2547 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_qual) in
    Obj.repr(
# 499 "cparser.mly"
                        ((fst _1, (BASE_STORAGE REGISTER)::(snd _1)))
# 2554 "cparser.ml"
               : 'old_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_def) in
    Obj.repr(
# 502 "cparser.mly"
                ([_1])
# 2561 "cparser.ml"
               : 'old_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_def) in
    Obj.repr(
# 503 "cparser.mly"
                            (_3::_1)
# 2570 "cparser.ml"
               : 'old_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 507 "cparser.mly"
   ((fst _1, snd _1, [], NOTHING))
# 2577 "cparser.ml"
               : 'old_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 511 "cparser.mly"
   ((_1, NO_TYPE))
# 2584 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 513 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2591 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 515 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2598 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_dec) in
    Obj.repr(
# 517 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2605 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 519 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2615 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 521 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2624 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'old_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 523 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2634 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'old_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 525 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2646 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'old_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 527 "cparser.mly"
   (_2)
# 2655 "cparser.ml"
               : 'old_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.base_type * Cabs.storage) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 534 "cparser.mly"
   (DECDEF (set_name_group _1 (List.rev _2)))
# 2664 "cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.base_type * modifier list) in
    Obj.repr(
# 538 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 2672 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 540 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 2681 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 542 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 2690 "cparser.ml"
               : Cabs.base_type * Cabs.storage))
; (fun __caml_parser_env ->
    Obj.repr(
# 545 "cparser.mly"
                   ([])
# 2696 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier list) in
    Obj.repr(
# 546 "cparser.mly"
                      (List.rev _1)
# 2703 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 549 "cparser.mly"
                 ([_1])
# 2710 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 550 "cparser.mly"
                             (_2::_1)
# 2718 "cparser.ml"
               : modifier list))
; (fun __caml_parser_env ->
    Obj.repr(
# 553 "cparser.mly"
               ( BASE_STORAGE STATIC )
# 2724 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 554 "cparser.mly"
              ( BASE_STORAGE AUTO )
# 2730 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 555 "cparser.mly"
               ( BASE_CONST )
# 2736 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 556 "cparser.mly"
                 ( BASE_VOLATILE )
# 2742 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 557 "cparser.mly"
                 ( BASE_STORAGE REGISTER )
# 2748 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 558 "cparser.mly"
                ( BASE_STORAGE EXTERN )
# 2754 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 559 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 2761 "cparser.ml"
               : modifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 562 "cparser.mly"
                 (_1)
# 2768 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 563 "cparser.mly"
                          (apply_qual _1 _2)
# 2776 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.base_type * modifier list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : modifier) in
    Obj.repr(
# 564 "cparser.mly"
                          ((fst _1, _2::(snd _1)))
# 2784 "cparser.ml"
               : Cabs.base_type * modifier list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 567 "cparser.mly"
                 ([_1])
# 2791 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 568 "cparser.mly"
                               (_3::_1)
# 2800 "cparser.ml"
               : Cabs.name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_fun_attributes) in
    Obj.repr(
# 572 "cparser.mly"
   ((fst _1, snd _1, _2, NOTHING))
# 2808 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gcc_fun_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 574 "cparser.mly"
   ((fst _1, snd _1, _2, _4))
# 2818 "cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 578 "cparser.mly"
   ((_1, NO_TYPE))
# 2825 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 580 "cparser.mly"
   (Clexer.add_identifier _1;(_1, NO_TYPE))
# 2832 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 582 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 2839 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 584 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 2846 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 586 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 2853 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 588 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 2860 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.base_type) in
    Obj.repr(
# 590 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 2868 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 592 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 2878 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 594 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 2887 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.base_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 596 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 2897 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 598 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 2909 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.base_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 600 "cparser.mly"
   (_2)
# 2918 "cparser.ml"
               : string * Cabs.base_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 607 "cparser.mly"
   (apply_mods (snd _1) ((fst _1), NO_STORAGE))
# 2925 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 609 "cparser.mly"
   (apply_mods (BASE_CONST::(snd _2)) ((fst _2), NO_STORAGE))
# 2932 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_sub) in
    Obj.repr(
# 611 "cparser.mly"
   (apply_mods (BASE_VOLATILE::(snd _2)) ((fst _2), NO_STORAGE))
# 2939 "cparser.ml"
               : 'typedef_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 614 "cparser.mly"
                  ((NAMED_TYPE _1, []))
# 2946 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comp_type) in
    Obj.repr(
# 615 "cparser.mly"
                  ((_1, []))
# 2953 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_qual) in
    Obj.repr(
# 616 "cparser.mly"
                    (_1)
# 2960 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 618 "cparser.mly"
               ( Clexer.add_type _1; (NAMED_TYPE _1, []))
# 2967 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 619 "cparser.mly"
                       ((NAMED_TYPE _1, [BASE_CONST]))
# 2974 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 620 "cparser.mly"
                          ((NAMED_TYPE _1, [BASE_VOLATILE]))
# 2981 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    Obj.repr(
# 621 "cparser.mly"
                       ((_1, [BASE_CONST]))
# 2988 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    Obj.repr(
# 622 "cparser.mly"
                         ((_1, [BASE_VOLATILE]))
# 2995 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 623 "cparser.mly"
                    ( Clexer.add_type _1; (NAMED_TYPE _1, [BASE_CONST]))
# 3002 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 624 "cparser.mly"
                      ( Clexer.add_type _1; (NAMED_TYPE _1, [BASE_VOLATILE]))
# 3009 "cparser.ml"
               : 'typedef_sub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 627 "cparser.mly"
                 (_1)
# 3016 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 628 "cparser.mly"
                            (apply_qual _1 _2)
# 3024 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    Obj.repr(
# 629 "cparser.mly"
                         ((fst _1, BASE_CONST::(snd _1)))
# 3031 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_qual) in
    Obj.repr(
# 630 "cparser.mly"
                           ((fst _1, BASE_VOLATILE::(snd _1)))
# 3038 "cparser.ml"
               : 'typedef_qual))
; (fun __caml_parser_env ->
    Obj.repr(
# 634 "cparser.mly"
                   ( [("", NO_TYPE, [], NOTHING)] )
# 3044 "cparser.ml"
               : 'typedef_defs_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_defs) in
    Obj.repr(
# 635 "cparser.mly"
                    ( _1 )
# 3051 "cparser.ml"
               : 'typedef_defs_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_def) in
    Obj.repr(
# 638 "cparser.mly"
                   ([_1])
# 3058 "cparser.ml"
               : 'typedef_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_def) in
    Obj.repr(
# 639 "cparser.mly"
                                  (_3::_1)
# 3067 "cparser.ml"
               : 'typedef_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 643 "cparser.mly"
   ((fst _1, snd _1, _2, NOTHING))
# 3075 "cparser.ml"
               : 'typedef_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 647 "cparser.mly"
   ((_1, NO_TYPE))
# 3082 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 649 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 3089 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 651 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 3096 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 653 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 3103 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 655 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 3110 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_dec) in
    Obj.repr(
# 657 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 3118 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 659 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 3128 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 661 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 3137 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typedef_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 663 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 3147 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typedef_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 665 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3159 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typedef_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 667 "cparser.mly"
   (_2)
# 3168 "cparser.ml"
               : 'typedef_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 673 "cparser.mly"
                      (_2::_1)
# 3176 "cparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 674 "cparser.mly"
               ([_1])
# 3183 "cparser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 677 "cparser.mly"
                                  (set_name_group _1 (List.rev _2))
# 3192 "cparser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_qual) in
    Obj.repr(
# 681 "cparser.mly"
  (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3200 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list_opt) in
    Obj.repr(
# 683 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3209 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list_opt) in
    Obj.repr(
# 685 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3218 "cparser.ml"
               : 'field_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 688 "cparser.mly"
                   ([])
# 3224 "cparser.ml"
               : 'field_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod_list) in
    Obj.repr(
# 689 "cparser.mly"
                      (List.rev _1)
# 3231 "cparser.ml"
               : 'field_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 692 "cparser.mly"
                 ([_1])
# 3238 "cparser.ml"
               : 'field_mod_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_mod_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 693 "cparser.mly"
                             (_2::_1)
# 3246 "cparser.ml"
               : 'field_mod_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 696 "cparser.mly"
              (BASE_CONST)
# 3252 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 697 "cparser.mly"
                 (BASE_VOLATILE)
# 3258 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 698 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3265 "cparser.ml"
               : 'field_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 701 "cparser.mly"
                 (_1)
# 3272 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 702 "cparser.mly"
                          (apply_qual _1 _2)
# 3280 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_mod) in
    Obj.repr(
# 703 "cparser.mly"
                          ((fst _1, _2::(snd _1)))
# 3288 "cparser.ml"
               : 'field_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_defs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_def) in
    Obj.repr(
# 706 "cparser.mly"
                              (_3::_1)
# 3297 "cparser.ml"
               : 'field_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_def) in
    Obj.repr(
# 707 "cparser.mly"
                  ([_1])
# 3304 "cparser.ml"
               : 'field_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 710 "cparser.mly"
                 ((fst _1, snd _1, [], NOTHING))
# 3311 "cparser.ml"
               : 'field_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 714 "cparser.mly"
   (("", NO_TYPE))
# 3317 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 716 "cparser.mly"
   ((_1, NO_TYPE))
# 3324 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 718 "cparser.mly"
   ((_1, NO_TYPE))
# 3331 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 720 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 3338 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 722 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 3345 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 724 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 3352 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 726 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 3359 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_dec) in
    Obj.repr(
# 728 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 3367 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 730 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 3377 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 732 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 3386 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'field_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 734 "cparser.mly"
   ((fst _1, PROTO (snd _1, fst _3, snd _3)))
# 3396 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'field_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 736 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3408 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 738 "cparser.mly"
   (_2)
# 3417 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 740 "cparser.mly"
   ((_1, BITFIELD (NO_TYPE, _3)))
# 3426 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 742 "cparser.mly"
   (("", BITFIELD (NO_TYPE, _2)))
# 3434 "cparser.ml"
               : 'field_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 748 "cparser.mly"
                   (([], false))
# 3440 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 749 "cparser.mly"
                   ((List.rev _1, false))
# 3447 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 750 "cparser.mly"
                              ((List.rev _1, true))
# 3456 "cparser.ml"
               : Cabs.single_name list * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 753 "cparser.mly"
                           (_3::_1)
# 3465 "cparser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 754 "cparser.mly"
               ([_1])
# 3472 "cparser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_def) in
    Obj.repr(
# 758 "cparser.mly"
   (set_single _1 _2)
# 3480 "cparser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods_opt) in
    Obj.repr(
# 762 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3489 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods_opt) in
    Obj.repr(
# 764 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3498 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_mods_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_qual) in
    Obj.repr(
# 766 "cparser.mly"
   (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3506 "cparser.ml"
               : 'param_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 769 "cparser.mly"
                   ([])
# 3512 "cparser.ml"
               : 'param_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_mods) in
    Obj.repr(
# 770 "cparser.mly"
                   (List.rev _1)
# 3519 "cparser.ml"
               : 'param_mods_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_mod) in
    Obj.repr(
# 773 "cparser.mly"
                 ([_1])
# 3526 "cparser.ml"
               : 'param_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_mods) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_mod) in
    Obj.repr(
# 774 "cparser.mly"
                          (_2::_1)
# 3534 "cparser.ml"
               : 'param_mods))
; (fun __caml_parser_env ->
    Obj.repr(
# 777 "cparser.mly"
              (BASE_CONST)
# 3540 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 778 "cparser.mly"
                 (BASE_STORAGE REGISTER)
# 3546 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 779 "cparser.mly"
                 (BASE_VOLATILE)
# 3552 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 780 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3559 "cparser.ml"
               : 'param_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 783 "cparser.mly"
                 (_1)
# 3566 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 784 "cparser.mly"
                          (apply_qual _1 _2)
# 3574 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 785 "cparser.mly"
                       ((fst _1, BASE_CONST::(snd _1)))
# 3581 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 786 "cparser.mly"
                          ((fst _1, (BASE_STORAGE REGISTER)::(snd _1)))
# 3588 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    Obj.repr(
# 787 "cparser.mly"
                          ((fst _1, BASE_VOLATILE::(snd _1)))
# 3595 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 788 "cparser.mly"
                             ((fst _1, (BASE_GNU_ATTR _2)::(snd _1)))
# 3603 "cparser.ml"
               : 'param_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 792 "cparser.mly"
   ( let (name, _type) = _1 in (name, _type, [], NOTHING) )
# 3610 "cparser.ml"
               : 'param_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 796 "cparser.mly"
   ( ("", NO_TYPE) )
# 3616 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 798 "cparser.mly"
   ( (_1, NO_TYPE) )
# 3623 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 800 "cparser.mly"
   ( (_1, NO_TYPE) )
# 3630 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 802 "cparser.mly"
   ((fst _2, set_type (PTR NO_TYPE) (snd _2)))
# 3637 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 804 "cparser.mly"
   ((fst _3, set_type (RESTRICT_PTR NO_TYPE) (snd _3)))
# 3644 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 806 "cparser.mly"
   ((fst _3, set_type (CONST (PTR NO_TYPE)) (snd _3)))
# 3651 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 808 "cparser.mly"
   ((fst _3, set_type (VOLATILE (PTR NO_TYPE)) (snd _3)))
# 3658 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_dec) in
    Obj.repr(
# 810 "cparser.mly"
   ((fst _3, set_type (GNU_TYPE (_2, PTR NO_TYPE)) (snd _3)))
# 3666 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'param_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 812 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, smooth_expression _3)) (snd _1)))
# 3676 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 814 "cparser.mly"
   ((fst _1, set_type (ARRAY (NO_TYPE, NOTHING)) (snd _1)))
# 3685 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'param_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 816 "cparser.mly"
   ((fst _2, set_type (PROTO (NO_TYPE, fst _5, snd _5)) (snd _2)))
# 3697 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'param_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 818 "cparser.mly"
   (_2)
# 3706 "cparser.ml"
               : 'param_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_type_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_def) in
    Obj.repr(
# 825 "cparser.mly"
   (set_type (fst _1) _2)
# 3714 "cparser.ml"
               : 'only_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_qual) in
    Obj.repr(
# 829 "cparser.mly"
  (apply_mods (snd _2) (apply_mods _1 ((fst _2), NO_STORAGE)))
# 3722 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list_opt) in
    Obj.repr(
# 831 "cparser.mly"
  (apply_mods _3 (apply_mods _1 (_2, NO_STORAGE)))
# 3731 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_mod_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list_opt) in
    Obj.repr(
# 833 "cparser.mly"
   (apply_mods _3 (apply_mods _1 (NAMED_TYPE _2, NO_STORAGE)))
# 3740 "cparser.ml"
               : 'only_type_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 836 "cparser.mly"
                   ([])
# 3746 "cparser.ml"
               : 'only_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod_list) in
    Obj.repr(
# 837 "cparser.mly"
                     (List.rev _1)
# 3753 "cparser.ml"
               : 'only_mod_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 840 "cparser.mly"
                 (_1)
# 3760 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_type) in
    Obj.repr(
# 841 "cparser.mly"
                          (apply_qual _1 _2)
# 3768 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_qual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 842 "cparser.mly"
                         ((fst _1, _2::(snd _1)))
# 3776 "cparser.ml"
               : 'only_qual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 845 "cparser.mly"
                ([_1])
# 3783 "cparser.ml"
               : 'only_mod_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_mod_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_mod) in
    Obj.repr(
# 846 "cparser.mly"
                           (_2::_1)
# 3791 "cparser.ml"
               : 'only_mod_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 849 "cparser.mly"
              (BASE_CONST)
# 3797 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 850 "cparser.mly"
                 (BASE_VOLATILE)
# 3803 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 851 "cparser.mly"
                     ( BASE_GNU_ATTR _1 )
# 3810 "cparser.ml"
               : 'only_mod))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 854 "cparser.mly"
                (_1)
# 3817 "cparser.ml"
               : 'only_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 858 "cparser.mly"
   (NO_TYPE)
# 3823 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 860 "cparser.mly"
   (set_type (PTR NO_TYPE) _2)
# 3830 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 862 "cparser.mly"
   (set_type (RESTRICT_PTR NO_TYPE) _3)
# 3837 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 864 "cparser.mly"
   (set_type (CONST (PTR NO_TYPE)) _3)
# 3844 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 866 "cparser.mly"
   (set_type (VOLATILE (PTR NO_TYPE)) _3)
# 3851 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_dec) in
    Obj.repr(
# 868 "cparser.mly"
   (set_type (GNU_TYPE (_2, PTR NO_TYPE)) _3)
# 3859 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'only_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 870 "cparser.mly"
   (set_type (ARRAY (NO_TYPE, smooth_expression _3)) _1)
# 3869 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 872 "cparser.mly"
   (set_type (ARRAY (NO_TYPE, NOTHING)) _1)
# 3878 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'only_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name list * bool) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 874 "cparser.mly"
   (set_type (PROTO (NO_TYPE, fst _5, snd _5)) _2)
# 3890 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'only_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 876 "cparser.mly"
   (_2)
# 3899 "cparser.ml"
               : 'only_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 882 "cparser.mly"
             ((VOID, []))
# 3905 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 883 "cparser.mly"
              ((CHAR NO_SIGN, []))
# 3911 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 884 "cparser.mly"
              ((INT (NO_SIZE, NO_SIGN), []))
# 3917 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 885 "cparser.mly"
               ((FLOAT false, []))
# 3923 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 886 "cparser.mly"
                ((DOUBLE false, []))
# 3929 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 887 "cparser.mly"
              ((NO_TYPE, [BASE_SIZE LONG]))
# 3935 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 888 "cparser.mly"
               ((NO_TYPE, [BASE_SIZE SHORT]))
# 3941 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 889 "cparser.mly"
                ((NO_TYPE, [BASE_SIGN SIGNED]))
# 3947 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 890 "cparser.mly"
                 ((NO_TYPE, [BASE_SIGN UNSIGNED]))
# 3953 "cparser.ml"
               : 'qual_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 894 "cparser.mly"
   (STRUCT (_2, []))
# 3960 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 896 "cparser.mly"
   (STRUCT ("", List.rev _3))
# 3969 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 898 "cparser.mly"
   (STRUCT (_2, List.rev _4))
# 3979 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 900 "cparser.mly"
   (UNION (_2, []))
# 3986 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 902 "cparser.mly"
   (UNION ("", List.rev _3))
# 3995 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 904 "cparser.mly"
   (UNION (_2, List.rev _4))
# 4005 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 906 "cparser.mly"
   (ENUM (_2, []))
# 4012 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list_comma) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 908 "cparser.mly"
   (ENUM ("", List.rev _3))
# 4021 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list_comma) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 910 "cparser.mly"
   (ENUM (_2, List.rev _4))
# 4031 "cparser.ml"
               : 'comp_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 913 "cparser.mly"
              (_1)
# 4038 "cparser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 914 "cparser.mly"
                   (_1)
# 4045 "cparser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_list) in
    Obj.repr(
# 917 "cparser.mly"
                               ( _1 )
# 4052 "cparser.ml"
               : 'enum_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 918 "cparser.mly"
                         ( _1 )
# 4060 "cparser.ml"
               : 'enum_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_name) in
    Obj.repr(
# 920 "cparser.mly"
                           ([_1])
# 4067 "cparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enum_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enum_name) in
    Obj.repr(
# 921 "cparser.mly"
                                (_3::_1)
# 4076 "cparser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 923 "cparser.mly"
                        ((_1, NOTHING))
# 4083 "cparser.ml"
               : 'enum_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 924 "cparser.mly"
                            ((_1, _3))
# 4092 "cparser.ml"
               : 'enum_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 931 "cparser.mly"
   (CONSTANT (CONST_COMPOUND (List.rev _2)))
# 4101 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 933 "cparser.mly"
   (_1)
# 4108 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 937 "cparser.mly"
   ([_1])
# 4115 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 939 "cparser.mly"
   (_3::_1)
# 4124 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 941 "cparser.mly"
   (_1)
# 4132 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 945 "cparser.mly"
   (NOTHING)
# 4138 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 947 "cparser.mly"
   (smooth_expression _1)
# 4145 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 951 "cparser.mly"
   ([_1])
# 4152 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 953 "cparser.mly"
   (_3::_1)
# 4161 "cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant) in
    Obj.repr(
# 957 "cparser.mly"
   (CONSTANT _1)
# 4168 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 959 "cparser.mly"
   (VARIABLE _1)
# 4175 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 961 "cparser.mly"
   (EXPR_SIZEOF _2)
# 4182 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'only_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 963 "cparser.mly"
   (TYPE_SIZEOF _3)
# 4191 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 965 "cparser.mly"
   (UNARY (PLUS, _2))
# 4198 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 967 "cparser.mly"
   (UNARY (MINUS, _2))
# 4205 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 969 "cparser.mly"
   (UNARY (MEMOF, _2))
# 4212 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 971 "cparser.mly"
   (UNARY (ADDROF, _2))
# 4219 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 973 "cparser.mly"
   (UNARY (NOT, _2))
# 4226 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 975 "cparser.mly"
   (UNARY (BNOT, _2))
# 4233 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 977 "cparser.mly"
   (UNARY (PREINCR, _2))
# 4240 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 979 "cparser.mly"
   (UNARY (POSINCR, _1))
# 4247 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 981 "cparser.mly"
   (UNARY (PREDECR, _2))
# 4254 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 983 "cparser.mly"
   (UNARY (POSDECR, _1))
# 4261 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 985 "cparser.mly"
   (MEMBEROFPTR (_1, _3))
# 4269 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 987 "cparser.mly"
   (MEMBEROFPTR (_1, _3))
# 4277 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 989 "cparser.mly"
   (MEMBEROF (_1, _3))
# 4285 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 991 "cparser.mly"
   (MEMBEROF (_1, _3))
# 4293 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * int) * (Cabs.definition list * Cabs.statement)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 993 "cparser.mly"
   (Clexer.test_gcc(); set_eline _1 (GNU_BODY (snd _2)))
# 4302 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 995 "cparser.mly"
   (set_eline _1 (smooth_expression _2))
# 4311 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'only_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 997 "cparser.mly"
   (set_eline _1 (CAST (_2, _4)))
# 4321 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 999 "cparser.mly"
   (set_eline _2 (CALL (_1, list_expression _3)))
# 4331 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1001 "cparser.mly"
   (INDEX (_1, smooth_expression _3))
# 4341 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1003 "cparser.mly"
   (QUESTION (_1, _3, _5))
# 4352 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1005 "cparser.mly"
   (BINARY(ADD ,_1 , _3))
# 4360 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1007 "cparser.mly"
   (BINARY(SUB ,_1 , _3))
# 4368 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1009 "cparser.mly"
   (BINARY(MUL ,_1 , _3))
# 4376 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1011 "cparser.mly"
   (BINARY(DIV ,_1 , _3))
# 4384 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1013 "cparser.mly"
   (BINARY(MOD ,_1 , _3))
# 4392 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1015 "cparser.mly"
   (BINARY(AND ,_1 , _3))
# 4400 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1017 "cparser.mly"
   (BINARY(OR ,_1 , _3))
# 4408 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1019 "cparser.mly"
   (BINARY(BAND ,_1 , _3))
# 4416 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1021 "cparser.mly"
   (BINARY(BOR ,_1 , _3))
# 4424 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1023 "cparser.mly"
   (BINARY(XOR ,_1 , _3))
# 4432 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1025 "cparser.mly"
   (BINARY(EQ ,_1 , _3))
# 4440 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1027 "cparser.mly"
   (BINARY(NE ,_1 , _3))
# 4448 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1029 "cparser.mly"
   (BINARY(LT ,_1 , _3))
# 4456 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1031 "cparser.mly"
   (BINARY(GT ,_1 , _3))
# 4464 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1033 "cparser.mly"
   (BINARY(LE ,_1 , _3))
# 4472 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1035 "cparser.mly"
   (BINARY(GE ,_1 , _3))
# 4480 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1037 "cparser.mly"
   (BINARY(SHL ,_1 , _3))
# 4488 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1039 "cparser.mly"
   (BINARY(SHR ,_1 , _3))
# 4496 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1041 "cparser.mly"
   (set_eline _2 (BINARY(ASSIGN ,_1 , _3)))
# 4505 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1043 "cparser.mly"
   (set_eline _2 (BINARY(ADD_ASSIGN ,_1 , _3)))
# 4514 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1045 "cparser.mly"
   (set_eline _2 (BINARY(SUB_ASSIGN ,_1 , _3)))
# 4523 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1047 "cparser.mly"
   (set_eline _2 (BINARY(MUL_ASSIGN ,_1 , _3)))
# 4532 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1049 "cparser.mly"
   (set_eline _2 (BINARY(DIV_ASSIGN ,_1 , _3)))
# 4541 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1051 "cparser.mly"
   (set_eline _2 (BINARY(MOD_ASSIGN ,_1 , _3)))
# 4550 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1053 "cparser.mly"
   (set_eline _2 (BINARY(BAND_ASSIGN ,_1 , _3)))
# 4559 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1055 "cparser.mly"
   (set_eline _2 (BINARY(BOR_ASSIGN ,_1 , _3)))
# 4568 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1057 "cparser.mly"
   (set_eline _2 (BINARY(XOR_ASSIGN ,_1 , _3)))
# 4577 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1059 "cparser.mly"
   (set_eline _2 (BINARY(SHL_ASSIGN ,_1 , _3)))
# 4586 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1061 "cparser.mly"
   (set_eline _2 (BINARY(SHR_ASSIGN ,_1 , _3)))
# 4595 "cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1064 "cparser.mly"
                (CONST_INT _1)
# 4602 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1065 "cparser.mly"
                  (CONST_FLOAT _1)
# 4609 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1066 "cparser.mly"
                 (CONST_CHAR _1)
# 4616 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1067 "cparser.mly"
                    (CONST_STRING _1)
# 4623 "cparser.ml"
               : Cabs.constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1070 "cparser.mly"
                  (_1)
# 4630 "cparser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1071 "cparser.mly"
                            (_1 ^ _2)
# 4638 "cparser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1077 "cparser.mly"
                (Clexer.push_context (); _1)
# 4645 "cparser.ml"
               : 'body_begin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'opt_locals) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1080 "cparser.mly"
                          ((_1, _2))
# 4653 "cparser.ml"
               : 'body_middle))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'body_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'body_middle) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1083 "cparser.mly"
                                 (Clexer.pop_context(); (_1, _2))
# 4662 "cparser.ml"
               : (string * int) * (Cabs.definition list * Cabs.statement)))
; (fun __caml_parser_env ->
    Obj.repr(
# 1086 "cparser.mly"
                   ([])
# 4668 "cparser.ml"
               : 'opt_locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'locals) in
    Obj.repr(
# 1087 "cparser.mly"
                (List.rev _1)
# 4675 "cparser.ml"
               : 'opt_locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1090 "cparser.mly"
              ([_1])
# 4682 "cparser.ml"
               : 'locals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'locals) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1091 "cparser.mly"
                    (_2::_1)
# 4690 "cparser.ml"
               : 'locals))
; (fun __caml_parser_env ->
    Obj.repr(
# 1094 "cparser.mly"
                   (NOP)
# 4696 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1095 "cparser.mly"
               (_1)
# 4703 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stat_with_local) in
    Obj.repr(
# 1099 "cparser.mly"
      ( if (snd _1) = [] then (fst _1) else SEQUENCE(fst _1, BLOCK(snd _1, NOP)) )
# 4710 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stat_with_local) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1101 "cparser.mly"
   ( if (snd _1) = [] then SEQUENCE (fst _1, _2) else SEQUENCE(fst _1, BLOCK(snd _1, _2)) )
# 4718 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1106 "cparser.mly"
   ( (_1, []) )
# 4725 "cparser.ml"
               : 'stat_with_local))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'locals) in
    Obj.repr(
# 1108 "cparser.mly"
   ( if Clexer.is_strict () then raise BadSyntax else (_1, _2) )
# 4733 "cparser.ml"
               : 'stat_with_local))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1113 "cparser.mly"
   (set_line _1 NOP)
# 4740 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1115 "cparser.mly"
   (set_line _2 (COMPUTATION (smooth_expression _1)))
# 4748 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * int) * (Cabs.definition list * Cabs.statement)) in
    Obj.repr(
# 1117 "cparser.mly"
   (set_line (fst _1) (BLOCK (snd _1)))
# 4755 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1119 "cparser.mly"
   (set_line _1 (IF (smooth_expression _3, _5, NOP)))
# 4766 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1121 "cparser.mly"
   (set_line _1 (IF (smooth_expression _3, _5, set_line _6 _7)))
# 4779 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1123 "cparser.mly"
   (set_line _1 (SWITCH (smooth_expression _3, _5)))
# 4790 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1125 "cparser.mly"
   (set_line _1 (WHILE (smooth_expression _3, _5)))
# 4801 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1127 "cparser.mly"
   (set_line _1 (DOWHILE (smooth_expression _5, _2)))
# 4814 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1130 "cparser.mly"
   (set_line _1 (FOR (_3, _5, _7, _9)))
# 4829 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1132 "cparser.mly"
   (LABEL (_1, _3))
# 4838 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1134 "cparser.mly"
   (set_line _1 (CASE (_2, _4)))
# 4848 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 1136 "cparser.mly"
   (set_line _1 (DEFAULT _3))
# 4857 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1138 "cparser.mly"
   (set_line _1 (RETURN NOTHING))
# 4865 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1140 "cparser.mly"
   (set_line _1 (RETURN _2))
# 4874 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1142 "cparser.mly"
   (set_line _1 BREAK)
# 4882 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1144 "cparser.mly"
   (set_line _1 CONTINUE)
# 4890 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1146 "cparser.mly"
   (set_line _1 (GOTO _2))
# 4899 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1148 "cparser.mly"
   ( ASM _3 )
# 4909 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'gnu_asm_io) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gnu_asm_io) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1150 "cparser.mly"
   ( Clexer.test_gcc(); GNU_ASM (_3, List.rev _4, List.rev (fst _5), List.rev (snd _5)) )
# 4921 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'gnu_asm_io) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gnu_asm_io) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1152 "cparser.mly"
   ( Clexer.test_gcc(); GNU_ASM_VOLATILE (_4, List.rev _5, List.rev (fst _6), List.rev (snd _6)) )
# 4933 "cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 1158 "cparser.mly"
                  ( ([], []) )
# 4939 "cparser.ml"
               : 'opt_gnu_asm_io))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gnu_asm_io) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gnu_asm_mods) in
    Obj.repr(
# 1159 "cparser.mly"
                               ( (_1, _2) )
# 4947 "cparser.ml"
               : 'opt_gnu_asm_io))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_args) in
    Obj.repr(
# 1163 "cparser.mly"
  ( _2 )
# 4955 "cparser.ml"
               : 'gnu_asm_io))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1165 "cparser.mly"
  ( [] )
# 4962 "cparser.ml"
               : 'gnu_asm_io))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_arg) in
    Obj.repr(
# 1170 "cparser.mly"
  ( [_1] )
# 4969 "cparser.ml"
               : 'gnu_asm_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_asm_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_arg) in
    Obj.repr(
# 1172 "cparser.mly"
  ( _3::_1 )
# 4978 "cparser.ml"
               : 'gnu_asm_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_exp_opt) in
    Obj.repr(
# 1177 "cparser.mly"
  ( ("", _1, _2) )
# 4986 "cparser.ml"
               : 'gnu_asm_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_exp_opt) in
    Obj.repr(
# 1179 "cparser.mly"
  ( (_2, _4, _5) )
# 4997 "cparser.ml"
               : 'gnu_asm_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 1183 "cparser.mly"
                 ( NOTHING )
# 5003 "cparser.ml"
               : 'gnu_asm_exp_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1184 "cparser.mly"
                           ( _2 )
# 5012 "cparser.ml"
               : 'gnu_asm_exp_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1189 "cparser.mly"
  ( [] )
# 5018 "cparser.ml"
               : 'opt_gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_asm_mods) in
    Obj.repr(
# 1191 "cparser.mly"
  ( _2 )
# 5026 "cparser.ml"
               : 'opt_gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1196 "cparser.mly"
  ( [_1] )
# 5033 "cparser.ml"
               : 'gnu_asm_mods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_asm_mods) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1198 "cparser.mly"
  ( _3::_1 )
# 5042 "cparser.ml"
               : 'gnu_asm_mods))
; (fun __caml_parser_env ->
    Obj.repr(
# 1205 "cparser.mly"
  ( Clexer.test_gcc(); [] )
# 5048 "cparser.ml"
               : 'opt_gcc_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.gnu_attrs) in
    Obj.repr(
# 1207 "cparser.mly"
  ( Clexer.test_gcc(); List.rev _1 )
# 5055 "cparser.ml"
               : 'opt_gcc_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 1211 "cparser.mly"
  ( _1 )
# 5062 "cparser.ml"
               : Cabs.gnu_attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.gnu_attrs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'gcc_attribute) in
    Obj.repr(
# 1213 "cparser.mly"
  ( List.append _1 _2 )
# 5070 "cparser.ml"
               : Cabs.gnu_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gnu_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1217 "cparser.mly"
  ( List.rev _4 )
# 5081 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1219 "cparser.mly"
  ( [GNU_EXTENSION] )
# 5087 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1221 "cparser.mly"
  ( [GNU_INLINE] )
# 5093 "cparser.ml"
               : 'gcc_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1226 "cparser.mly"
  ( [] )
# 5099 "cparser.ml"
               : 'opt_gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_args) in
    Obj.repr(
# 1228 "cparser.mly"
  ( _1 )
# 5106 "cparser.ml"
               : 'opt_gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_arg) in
    Obj.repr(
# 1233 "cparser.mly"
  ([_1])
# 5113 "cparser.ml"
               : 'gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnu_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_arg) in
    Obj.repr(
# 1235 "cparser.mly"
  (_3::_1)
# 5122 "cparser.ml"
               : 'gnu_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gnu_id) in
    Obj.repr(
# 1240 "cparser.mly"
  ( GNU_ID _1 )
# 5129 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant) in
    Obj.repr(
# 1242 "cparser.mly"
  ( GNU_CST _1 )
# 5136 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'gnu_id) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_gnu_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1244 "cparser.mly"
  ( GNU_CALL (_1, List.rev _3) )
# 5146 "cparser.ml"
               : 'gnu_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1249 "cparser.mly"
  ( _1 )
# 5153 "cparser.ml"
               : 'gnu_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.gnu_attrs) in
    Obj.repr(
# 1251 "cparser.mly"
  (
			match _1 with
			  [(Cabs.GNU_ID name)] -> name
			| _ -> assert false
		)
# 5164 "cparser.ml"
               : 'gnu_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 1257 "cparser.mly"
  ( "__const" )
# 5170 "cparser.ml"
               : 'gnu_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 1259 "cparser.mly"
  ( "__inline" )
# 5176 "cparser.ml"
               : 'gnu_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 1261 "cparser.mly"
  ( "__asm" )
# 5182 "cparser.ml"
               : 'gnu_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 1265 "cparser.mly"
                            ( _1 )
# 5189 "cparser.ml"
               : 'opt_gcc_fun_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opt_gcc_attributes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asm_attribute) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_gcc_attributes) in
    Obj.repr(
# 1266 "cparser.mly"
                                                      ( _1 @ _2 @ _3 )
# 5198 "cparser.ml"
               : 'opt_gcc_fun_attributes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * int) in
    Obj.repr(
# 1271 "cparser.mly"
  ( Clexer.test_gcc(); [GNU_CALL("__asm__", [GNU_CST (CONST_STRING _3 )])] )
# 5207 "cparser.ml"
               : 'asm_attribute))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
;;
# 1274 "cparser.mly"



# 5240 "cparser.ml"
