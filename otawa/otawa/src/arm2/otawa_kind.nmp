include "defs.nmp"

// useful mode extensions
extend regShift
	reg_num = r.number
	no_shift = 0
	otawa_kind = IS_SHIFTED

extend immShift
	reg_num = r.number
	no_shift = shiftAmt == 0 && shiftKind != ROR
	otawa_kind = if no_shift then 0 else IS_SHIFTED | IS_IMMEDIATE endif

extend rotatedImmediate
	no_shift = v == 0

extend REG_LIST
	has_pc = r & (1 << 15)


// ****** branch instructions extensions ******

extend B_Cond
	otawa_kind = IS_CONTROL
		| (if cond.value == 0b1111 then IS_CALL						// BLX A2
		   else									
		   		  (if setl then IS_CALL else 0 endif) 				// BLcc A1
				| (if cond.value == 14 then 0 else IS_COND endif)	// Bcc
		   endif)

extend BX_ARM
	otawa_kind = IS_CONTROL
		| (if rd.number == 14 then IS_RETURN else 0 endif)
		| (if cond.value == 14 then 0 else IS_COND endif)
		| (if rd.number == 12 then IS_BX_IP else 0 endif)

extend B_thumb
	otawa_kind =
		  IS_CONTROL
		| (if cond != 14 || cond != 15 then IS_COND else 0 endif)
		| (if cond == 15 then IS_TRAP else 0 endif)

extend BKPT_thumb
	otawa_kind = IS_CONTROL | IS_TRAP

extend BX_thumb
	otawa_kind = IS_CONTROL | IS_THUMB_BX | (if rm.number == 14 then IS_RETURN else 0 endif)

extend BLX2_thumb
	otawa_kind = IS_CONTROL | IS_THUMB_BX | IS_CALL | (if rm.number == 14 then IS_RETURN else 0 endif)

extend SWI
	otawa_kind =
		  IS_CONTROL
		| IS_TRAP
		| (if cond.value == 14 then 0 else IS_COND endif)

extend SWI_thumb
	otawa_kind = IS_CONTROL | IS_TRAP


// ****** ALU instructions extenions ******

extend MOV_shr
	otawa_kind =
		(if cond.value != 15 && rd.number == 15 then
			if shifter_operand.reg_num == 14 then IS_RETURN | IS_CONTROL
			else IS_CONTROL endif
		else
			IS_ALU | IS_INT
		endif)
		| (if cond.value == 14 then 0 else IS_COND endif)

extend CMP_imm, CMN_imm, TEQ_imm, TST_imm
	otawa_kind =
		  IS_ALU
		| IS_INT
		| IS_NO_DEST
		| (if cond.value == 14 then 0 else IS_COND endif)
		| IS_IMMEDIATE

extend CMP_shr, CMN_shr, TEQ_shr, TST_shr
	otawa_kind =
		  IS_ALU
		| IS_INT
		| IS_NO_DEST
		| (if cond.value == 14 then 0 else IS_COND endif)

extend ADD_imm, ADC_imm, AND_imm, BIC_imm, EOR_imm, MOV_imm, MVN_imm,
ORR_imm, RSB_imm, RSC_imm, SBC_imm
	otawa_kind =
		  IS_ALU
		| IS_INT
		| (if cond.value == 14 then 0 else IS_COND endif)
		| (if rd.number == 15 then IS_CONTROL else 0 endif)
		| IS_IMMEDIATE

extend SUB_imm
	otawa_kind =
		// return from IRQ
		if rd.number == 15 && rn.number == 14 && sets && shifter_operand == 4 then IS_CONTROL | IS_RETURN | IS_TRAP
		// usual processing
		else
			  IS_ALU
			| IS_INT
			| (if cond.value == 14 then 0 else IS_COND endif)
			| (if rd.number == 15 then IS_CONTROL else 0 endif)
			| IS_IMMEDIATE
		endif

extend ADC_shr, ADD_shr, AND_shr, BIC_shr, EOR_shr, MVN_shr,
ORR_shr, RSB_shr, RSC_shr, SBC_shr, SUB_shr
	otawa_kind =
		  IS_ALU
		| IS_INT
		| (if cond.value == 14 then 0 else IS_COND endif)
		| (if rd.number == 15 then IS_CONTROL else 0 endif)
		| shifter_operand.otawa_kind

extend ADC_thumb, ADD_reg1_thumb, ADD_reg2_thumb, AND_thumb, CMN_shr_thumb,
CMP_shr1_thumb, CMP_shr2_thumb, EOR_thumb, LSL_shr_thumb, LSR_shr_thumb,
MOV_shr_thumb, MVN_thumb, NEG_thumb, ORR_thumb, ROR_thumb, SBC_thumb,
SUB_reg_thumb, TST_thumb
	otawa_kind = IS_ALU | IS_INT

extend ADD_imm1_thumb, ADD_imm2_thumb, ADD_imm3_thumb, ADD_imm4_thumb,
ADD_imm5_thumb, ASR1_thumb, ASR2_thumb, BIC_thumb, CMP_imm_thumb,
LSL_imm_thumb, LSR_imm_thumb, MOV_imm_thumb, SUB_imm1_thumb,
SUB_imm2_thumb, SUB_imm3_thumb
	otawa_kind = IS_ALU | IS_INT | IS_IMMEDIATE

extend MOV_shr2_thumb
	otawa_kind =
		if H == 1 && rd == 7 then
			IS_CONTROL | (if rm.number == 14 then IS_RETURN else 0 endif)
		else
			IS_ALU | IS_INT
		endif

extend CLZ
	otawa_kind =
		  IS_ALU
		| IS_INT
		| (if cond.value == 14 then 0 else IS_COND endif)
		| (if rd.number == 15 then IS_CONTROL else 0 endif)

extend SWP
	otawa_kind =
		  IS_ALU
		| IS_INT
		| IS_SWP
		| (if cond.value == 14 then 0 else IS_COND endif)
		| (if rd.number == 15 then IS_CONTROL else 0 endif)


// ****** memory instructions extensions ******

extend LDM
	otawa_kind = IS_MEM | IS_MULTI | IS_LOAD
		| (if cond.value == 14 then 0 else IS_COND endif)
		| (if rn.number == 13 && reglist.has_pc then IS_CONTROL | IS_RETURN else 0 endif)

extend STM
	otawa_kind = IS_MEM | IS_MULTI | IS_STORE
		| (if cond.value == 14 then 0 else IS_COND endif)

extend LDMIA_thumb
	otawa_kind = IS_MEM | IS_LOAD | IS_MULTI | IS_INT

extend POP_thumb
	otawa_kind =
		  IS_MEM | IS_LOAD | IS_MULTI | IS_INT
		| (if P then IS_CONTROL | IS_RETURN else 0 endif)

extend PUSH_thumb, STMIA_thumb
	otawa_kind = IS_MEM | IS_STORE | IS_MULTI | IS_INT

extend LDR_imm, LDR_shr
 	otawa_kind =
 		  IS_MEM
 		| IS_INT
 		| IS_LOAD
 		| (if cond.value == 14 then 0 else IS_COND endif)
 		| (if rd.number == 15 then IS_CONTROL else 0 endif)
 		| (if rd.number == 15 && rn.number == 13 then IS_RETURN else 0 endif)

extend STR_imm, STR_shr
 	otawa_kind =
 		  IS_MEM
 		| IS_INT
 		| IS_STORE
 		| (if cond.value == 14 then 0 else IS_COND endif)

extend STRH_imm, STRH_shr
 	otawa_kind =
 		  IS_MEM
 		| IS_INT
 		| (if cond.value == 14 then 0 else IS_COND endif)
 		| IS_STORE

extend STR_imm_thumb, STR_shr_thumb, STR_imm2_thumb, STRB_imm_thumb,
STRB_shr_thumb, STRH_imm_thumb, STRH_shr_thumb
	otawa_kind = IS_MEM | IS_STORE | IS_INT

extend LDRH_imm, LDRH_shr, LDRSB_imm, LDRSB_shr,
LDRSH_imm, LDRSH_shr
 	otawa_kind =
 		  IS_MEM
 		| IS_INT
 		| (if cond.value == 14 then 0 else IS_COND endif)
 		| IS_LOAD
 		| (if rd.number == 15 then IS_CONTROL else 0 endif)

extend LDR_imm_thumb, LDR_shr_thumb, LDR_imm2_thumb, LDR_imm3_thumb,
LDRB_imm_thumb, LDRB_shr_thumb, LDRH_imm_thumb, LDRH_shr_thumb,
LDRSB_thumb, LDRSH_thumb
	otawa_kind = IS_MEM | IS_LOAD | IS_INT



// ****** special instructions extensions ******

extend MSR_imm, MSR_shr
	otawa_kind =
		  IS_ALU
		| IS_INT
 		| (if cond.value == 14 then 0 else IS_COND endif)

extend MRS
	otawa_kind =
		  IS_ALU
		| IS_INT
 		| (if cond.value == 14 then 0 else IS_COND endif)
 		| (if rn.number == 15 then IS_CONTROL else 0 endif)


// ****** multiplication instructions extensions ******

extend MUL
	otawa_kind =
		  IS_ALU
		| IS_INT
		| IS_MUL
 		| (if cond.value == 14 then 0 else IS_COND endif)
 		| (if rd.number == 15 then IS_CONTROL else 0 endif)

extend MLA
	otawa_kind =
		  IS_ALU
		| IS_INT
		| IS_MLA
 		| (if cond.value == 14 then 0 else IS_COND endif)
 		| (if rd.number == 15 then IS_CONTROL else 0 endif)


extend SMLAL, UMLAL
	otawa_kind =
		  IS_ALU
		| IS_INT
		| IS_MLA
		| IS_TWO_REG
 		| (if cond.value == 14 then 0 else IS_COND endif)
 		| (if rdhi.number == 15 || rdlo.number == 15 then IS_CONTROL else 0 endif)

extend SMULL, UMULL
	otawa_kind =
		  IS_ALU
		| IS_INT
		| IS_MUL
		| IS_TWO_REG
 		| (if cond.value == 14 then 0 else IS_COND endif)
 		| (if rdhi.number == 15 || rdlo.number == 15 then IS_CONTROL else 0 endif)



extend MUL_thumb
	otawa_kind = IS_ALU | IS_INT | IS_MUL


// ****** coprocessor instructions extensions ******

extend LDC
	otawa_kind = IS_MEM
		| IS_INT
		| IS_LOAD
		| (if cond.value == 14 || cond.value == 15 then 0 else IS_COND endif)

extend STC
	otawa_kind = IS_MEM
		| IS_INT
		| IS_STORE
		| (if cond.value == 14 || cond.value == 15 then 0 else IS_COND endif)

