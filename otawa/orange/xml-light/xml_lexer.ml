# 1 "xml_lexer.mll"
 (*
 * Xml Light, an small Xml parser/printer with DTD support.
 * Copyright (C) 2003 Nicolas Cannasse (ncannasse@motion-twin.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *)

open Lexing
open Xml_parser
open Dtd

type error =
	| EUnterminatedComment
	| EUnterminatedString
	| EIdentExpected
	| ECloseExpected
	| ENodeExpected
	| EAttributeNameExpected
	| EAttributeValueExpected
	| EUnterminatedEntity

type dtd_error =
	| EInvalidDTDDecl
	| EInvalidDTDTag
	| EDTDItemExpected
	| EInvalidDTDElement
	| EInvalidDTDAttribute

exception Error of error
exception DTDError of dtd_error

type pos = int * int * int * int

type dtd_decl =
	| DTDFile of string
	| DTDData of dtd

type dtd_item_type =
	| TElement
	| TAttribute

type token =
	| Tag of string * (string * string) list * bool
	| PCData of string
	| Endtag of string
	| DocType of (string * dtd_decl)
	| Eof

let last_pos = ref 0
and current_line = ref 0
and current_line_start = ref 0

let tmp = Buffer.create 200

let idents = Hashtbl.create 0

let _ = begin
	Hashtbl.add idents "gt;" ">";
	Hashtbl.add idents "lt;" "<";
	Hashtbl.add idents "amp;" "&";
	Hashtbl.add idents "apos;" "'";
	Hashtbl.add idents "quot;" "\"";
end

let init lexbuf =
	current_line := 1;
	current_line_start := lexeme_start lexbuf;
	last_pos := !current_line_start

let close lexbuf =
	Buffer.reset tmp

let pos lexbuf =
	!current_line ,	!current_line_start ,
	!last_pos ,
	lexeme_start lexbuf

let restore (cl,cls,lp,_) =
	current_line := cl;
	current_line_start := cls;
	last_pos := lp

let newline lexbuf =
	incr current_line;
	last_pos := lexeme_end lexbuf;
	current_line_start := !last_pos

let error lexbuf e =
	last_pos := lexeme_start lexbuf;
	raise (Error e)

let dtd_error lexbuf e =
	last_pos := lexeme_start lexbuf;
	raise (DTDError e)

# 110 "xml_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\244\255\245\255\001\000\000\000\008\000\010\000\012\000\
    \255\255\011\000\017\000\251\255\000\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\253\255\252\255\248\255\020\000\
    \015\000\255\255\006\000\252\255\253\255\003\000\255\255\003\000\
    \254\255\024\000\252\255\253\255\004\000\255\255\254\255\043\000\
    \001\000\044\000\254\255\042\000\254\255\106\000\255\255\236\000\
    \058\001\254\255\136\001\008\000\254\255\255\255\011\000\013\000\
    \255\255\254\255\214\001\254\255\036\002\220\000\253\255\221\000\
    \222\000\227\000\226\000\254\255\255\255\042\000\252\255\253\255\
    \003\000\255\255\254\255\198\000\252\255\253\255\044\000\255\255\
    \254\255\005\000\252\255\253\255\001\000\001\000\011\000\002\000\
    \018\000\025\000\255\255\010\000\010\000\028\000\021\000\254\255\
    \099\000\253\255\254\255\255\255\006\000\255\255\232\000\231\000\
    \254\255\255\255\038\000\254\255\255\255\041\000\253\255\026\000\
    \057\000\090\000\255\255\075\000\255\255\101\000\253\255\083\000\
    \092\000\100\000\120\000\129\000\121\000\116\000\255\255\117\000\
    \126\000\159\000\150\000\150\000\254\255\206\000\252\255\253\255\
    \161\000\161\000\154\000\255\255\167\000\164\000\160\000\254\255\
    \188\000\254\255\255\255\189\000\254\255\255\255\150\002\243\255\
    \228\002\245\255\246\255\247\255\185\000\249\255\250\255\251\255\
    \252\255\253\255\004\001\255\255\200\000\202\000\207\000\190\000\
    \211\000\248\255\028\003\252\255\253\255\200\000\210\000\214\000\
    \198\000\219\000\255\255\201\000\207\000\213\000\220\000\213\000\
    \254\255\059\003\254\255\137\003\252\000\253\255\254\255\255\255\
    \037\001\249\255\094\002\254\255\255\255\225\000\223\000\220\000\
    \004\001\249\000\246\000\031\001\023\001\048\001\050\001\253\255\
    \039\001\045\001\049\001\080\001\082\001\252\255\063\001\083\001\
    \086\001\251\255\112\001\118\001\110\001\120\001\113\001\250\255\
    \239\001\253\255\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\009\000\008\000\006\000\001\000\001\000\
    \255\255\005\000\006\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \001\000\255\255\255\255\255\255\255\255\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\255\255\255\255\003\000\
    \002\000\000\000\255\255\255\255\255\255\001\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\002\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\002\000\
    \002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\255\255\255\255\255\255\255\255\255\255\003\000\255\255\
    \255\255\255\255\255\255\255\255\003\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\003\000\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \001\000\255\255\255\255\001\000\255\255\255\255\255\255\002\000\
    \002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \011\000\255\255\255\255\255\255\012\000\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\006\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\003\000\000\000\000\000\003\000\255\255\255\255\255\255\003\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\000\000\027\000\000\000\000\000\255\255\000\000\255\255\
    \000\000\034\000\000\000\000\000\255\255\000\000\000\000\041\000\
    \255\255\041\000\000\000\044\000\000\000\255\255\000\000\255\255\
    \049\000\000\000\255\255\052\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\059\000\000\000\255\255\062\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\000\000\070\000\000\000\000\000\
    \255\255\000\000\000\000\076\000\000\000\000\000\255\255\000\000\
    \000\000\082\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \097\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\107\000\000\000\000\000\110\000\000\000\255\255\
    \255\255\255\255\000\000\255\255\000\000\118\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\134\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \145\000\000\000\000\000\148\000\000\000\000\000\151\000\000\000\
    \255\255\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\171\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\186\000\000\000\255\255\189\000\000\000\000\000\000\000\
    \193\000\000\000\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \225\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\008\000\255\255\000\000\006\000\255\255\000\000\
    \030\000\010\000\000\000\006\000\009\000\007\000\255\255\006\000\
    \024\000\006\000\010\000\000\000\024\000\024\000\025\000\000\000\
    \007\000\024\000\037\000\022\000\042\000\074\000\004\000\255\255\
    \010\000\012\000\006\000\009\000\007\000\013\000\021\000\024\000\
    \031\000\010\000\255\255\029\000\024\000\255\255\255\255\009\000\
    \255\255\255\255\055\000\112\000\005\000\255\255\001\000\255\255\
    \009\000\032\000\038\000\016\000\014\000\020\000\053\000\011\000\
    \255\255\056\000\255\255\057\000\073\000\087\000\088\000\015\000\
    \019\000\040\000\255\255\080\000\017\000\085\000\086\000\036\000\
    \084\000\018\000\091\000\089\000\090\000\092\000\093\000\074\000\
    \083\000\094\000\095\000\101\000\108\000\111\000\113\000\255\255\
    \255\255\255\255\255\255\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\099\000\072\000\114\000\
    \080\000\116\000\098\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\046\000\119\000\127\000\
    \121\000\122\000\120\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\123\000\124\000\125\000\
    \126\000\128\000\129\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\064\000\065\000\066\000\
    \130\000\131\000\132\000\066\000\065\000\079\000\140\000\138\000\
    \103\000\103\000\104\000\139\000\103\000\103\000\135\000\141\000\
    \142\000\143\000\146\000\149\000\064\000\065\000\066\000\068\000\
    \002\000\255\255\066\000\065\000\067\000\068\000\028\000\103\000\
    \103\000\164\000\067\000\165\000\255\255\162\000\166\000\137\000\
    \167\000\162\000\168\000\136\000\169\000\179\000\175\000\176\000\
    \035\000\063\000\177\000\065\000\178\000\180\000\181\000\065\000\
    \182\000\183\000\078\000\184\000\162\000\191\000\218\000\046\000\
    \214\000\208\000\071\000\255\255\255\255\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\196\000\
    \194\000\201\000\202\000\203\000\195\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\050\000\
    \204\000\205\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\206\000\207\000\209\000\
    \190\000\210\000\211\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\212\000\213\000\215\000\
    \216\000\050\000\217\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\219\000\220\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\221\000\222\000\223\000\077\000\000\000\
    \000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\000\000\000\000\000\000\000\000\050\000\
    \105\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\060\000\000\000\000\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\227\000\000\000\000\000\000\000\000\000\226\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\000\000\000\000\000\000\000\000\060\000\000\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\000\000\000\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\000\000\
    \000\000\000\000\000\000\060\000\000\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\162\000\
    \163\000\000\000\197\000\162\000\198\000\000\000\000\000\199\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \200\000\000\000\000\000\000\000\000\000\000\000\162\000\000\000\
    \000\000\156\000\000\000\000\000\000\000\000\000\161\000\160\000\
    \155\000\154\000\159\000\152\000\000\000\000\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\000\000\000\000\000\000\158\000\153\000\000\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\000\000\000\000\000\000\000\000\152\000\000\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\157\000\000\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\000\000\
    \000\000\000\000\000\000\152\000\172\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\174\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \187\000\000\000\173\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\000\000\000\000\
    \000\000\000\000\187\000\000\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\000\000\
    \000\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\000\000\000\000\000\000\000\000\
    \187\000\000\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\003\000\255\255\000\000\003\000\255\255\
    \026\000\005\000\255\255\006\000\009\000\007\000\007\000\006\000\
    \024\000\007\000\010\000\255\255\024\000\023\000\023\000\255\255\
    \000\000\023\000\033\000\004\000\040\000\072\000\000\000\003\000\
    \005\000\005\000\006\000\009\000\007\000\012\000\013\000\024\000\
    \029\000\010\000\007\000\026\000\023\000\039\000\041\000\005\000\
    \039\000\041\000\054\000\111\000\000\000\003\000\000\000\003\000\
    \010\000\031\000\036\000\015\000\012\000\019\000\051\000\005\000\
    \007\000\054\000\007\000\055\000\069\000\086\000\087\000\014\000\
    \018\000\039\000\041\000\078\000\016\000\081\000\085\000\033\000\
    \081\000\017\000\084\000\088\000\089\000\091\000\092\000\072\000\
    \081\000\093\000\094\000\100\000\106\000\109\000\112\000\039\000\
    \041\000\039\000\041\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\096\000\069\000\113\000\
    \078\000\115\000\096\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\045\000\117\000\119\000\
    \120\000\121\000\117\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\122\000\123\000\124\000\
    \125\000\127\000\128\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\061\000\063\000\064\000\
    \129\000\130\000\131\000\066\000\065\000\075\000\136\000\137\000\
    \103\000\102\000\102\000\138\000\103\000\102\000\133\000\140\000\
    \141\000\142\000\144\000\147\000\061\000\063\000\064\000\063\000\
    \000\000\003\000\066\000\065\000\063\000\065\000\026\000\103\000\
    \102\000\156\000\065\000\164\000\007\000\162\000\165\000\133\000\
    \166\000\162\000\167\000\133\000\168\000\173\000\174\000\175\000\
    \033\000\061\000\176\000\064\000\177\000\179\000\180\000\066\000\
    \181\000\182\000\075\000\183\000\162\000\188\000\197\000\047\000\
    \198\000\199\000\069\000\039\000\041\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\192\000\
    \192\000\200\000\201\000\202\000\192\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\048\000\
    \203\000\204\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\205\000\206\000\208\000\
    \188\000\209\000\210\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\211\000\212\000\214\000\
    \215\000\048\000\216\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\050\000\218\000\219\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\220\000\221\000\222\000\075\000\255\255\
    \255\255\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\255\255\255\255\255\255\255\255\050\000\
    \102\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\058\000\255\255\255\255\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\224\000\255\255\255\255\255\255\255\255\224\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\255\255\255\255\255\255\255\255\058\000\255\255\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\060\000\255\255\255\255\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\255\255\
    \255\255\255\255\255\255\060\000\255\255\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\150\000\
    \150\000\255\255\194\000\150\000\194\000\255\255\255\255\194\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \194\000\255\255\255\255\255\255\255\255\255\255\150\000\255\255\
    \255\255\150\000\255\255\255\255\255\255\255\255\150\000\150\000\
    \150\000\150\000\150\000\150\000\255\255\255\255\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\255\255\255\255\255\255\150\000\150\000\255\255\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\255\255\255\255\255\255\255\255\150\000\255\255\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\152\000\150\000\255\255\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\255\255\
    \255\255\255\255\255\255\152\000\170\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\170\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \185\000\255\255\170\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\255\255\255\255\
    \255\255\255\255\185\000\255\255\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\187\000\255\255\
    \255\255\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\255\255\255\255\255\255\255\255\
    \187\000\255\255\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\187\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 118 "xml_lexer.mll"
  (
			newline lexbuf;
			token lexbuf
		)
# 520 "xml_lexer.ml"

  | 1 ->
# 123 "xml_lexer.mll"
  (
			last_pos := lexeme_end lexbuf;
			token lexbuf
		)
# 528 "xml_lexer.ml"

  | 2 ->
# 128 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			ignore_spaces lexbuf;
			let root = ident_name lexbuf in
			ignore_spaces lexbuf;
			let data = dtd_data lexbuf in
			DocType (root, data)
		)
# 540 "xml_lexer.ml"

  | 3 ->
# 137 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			comment lexbuf;
			token lexbuf
		)
# 549 "xml_lexer.ml"

  | 4 ->
# 143 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			header lexbuf;
			token lexbuf;
		)
# 558 "xml_lexer.ml"

  | 5 ->
# 149 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			let tag = ident_name lexbuf in
			ignore_spaces lexbuf;
			close_tag lexbuf;
			Endtag tag
		)
# 569 "xml_lexer.ml"

  | 6 ->
# 157 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			let tag = ident_name lexbuf in
			ignore_spaces lexbuf;
			let attribs, closed = attributes lexbuf in
			Tag(tag, attribs, closed)
		)
# 580 "xml_lexer.ml"

  | 7 ->
# 165 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			Buffer.reset tmp;
			Buffer.add_string tmp (lexeme lexbuf);
			PCData (pcdata lexbuf)
		)
# 590 "xml_lexer.ml"

  | 8 ->
# 172 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			Buffer.reset tmp;
			Buffer.add_string tmp (entity lexbuf);
			PCData (pcdata lexbuf)
		)
# 600 "xml_lexer.ml"

  | 9 ->
# 179 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			Buffer.reset tmp;
			Buffer.add_string tmp (lexeme lexbuf);
			PCData (pcdata lexbuf)
		)
# 610 "xml_lexer.ml"

  | 10 ->
# 185 "xml_lexer.mll"
       ( Eof )
# 615 "xml_lexer.ml"

  | 11 ->
# 187 "xml_lexer.mll"
  ( error lexbuf ENodeExpected )
# 620 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and ignore_spaces lexbuf =
    __ocaml_lex_ignore_spaces_rec lexbuf 23
and __ocaml_lex_ignore_spaces_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 191 "xml_lexer.mll"
  (
			newline lexbuf;
			ignore_spaces lexbuf
		)
# 635 "xml_lexer.ml"

  | 1 ->
# 196 "xml_lexer.mll"
  ( ignore_spaces lexbuf )
# 640 "xml_lexer.ml"

  | 2 ->
# 198 "xml_lexer.mll"
  ( () )
# 645 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ignore_spaces_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 26
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 202 "xml_lexer.mll"
  (
			newline lexbuf;
			comment lexbuf
		)
# 660 "xml_lexer.ml"

  | 1 ->
# 207 "xml_lexer.mll"
  ( () )
# 665 "xml_lexer.ml"

  | 2 ->
# 209 "xml_lexer.mll"
  ( raise (Error EUnterminatedComment) )
# 670 "xml_lexer.ml"

  | 3 ->
# 211 "xml_lexer.mll"
  ( comment lexbuf )
# 675 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and header lexbuf =
    __ocaml_lex_header_rec lexbuf 33
and __ocaml_lex_header_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 215 "xml_lexer.mll"
  (
			newline lexbuf;
			header lexbuf
		)
# 690 "xml_lexer.ml"

  | 1 ->
# 220 "xml_lexer.mll"
  ( () )
# 695 "xml_lexer.ml"

  | 2 ->
# 222 "xml_lexer.mll"
  ( error lexbuf ECloseExpected )
# 700 "xml_lexer.ml"

  | 3 ->
# 224 "xml_lexer.mll"
  ( header lexbuf )
# 705 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_header_rec lexbuf __ocaml_lex_state

and pcdata lexbuf =
    __ocaml_lex_pcdata_rec lexbuf 39
and __ocaml_lex_pcdata_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 228 "xml_lexer.mll"
  (
			Buffer.add_string tmp (lexeme lexbuf);
			pcdata lexbuf
		)
# 720 "xml_lexer.ml"

  | 1 ->
# 233 "xml_lexer.mll"
  (
			Buffer.add_string tmp (lexeme lexbuf);
			pcdata lexbuf;
		)
# 728 "xml_lexer.ml"

  | 2 ->
# 238 "xml_lexer.mll"
  (
			Buffer.add_string tmp (entity lexbuf);
			pcdata lexbuf
		)
# 736 "xml_lexer.ml"

  | 3 ->
# 243 "xml_lexer.mll"
  ( Buffer.contents tmp )
# 741 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_pcdata_rec lexbuf __ocaml_lex_state

and entity lexbuf =
    __ocaml_lex_entity_rec lexbuf 43
and __ocaml_lex_entity_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 247 "xml_lexer.mll"
  (
			let ident = lexeme lexbuf in
			try
				Hashtbl.find idents (String.lowercase ident)
			with
				Not_found -> "&" ^ ident
		)
# 759 "xml_lexer.ml"

  | 1 ->
# 255 "xml_lexer.mll"
  ( raise (Error EUnterminatedEntity) )
# 764 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_entity_rec lexbuf __ocaml_lex_state

and ident_name lexbuf =
    __ocaml_lex_ident_name_rec lexbuf 48
and __ocaml_lex_ident_name_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 259 "xml_lexer.mll"
  ( lexeme lexbuf )
# 776 "xml_lexer.ml"

  | 1 ->
# 261 "xml_lexer.mll"
  ( error lexbuf EIdentExpected )
# 781 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ident_name_rec lexbuf __ocaml_lex_state

and close_tag lexbuf =
    __ocaml_lex_close_tag_rec lexbuf 51
and __ocaml_lex_close_tag_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 265 "xml_lexer.mll"
  ( () )
# 793 "xml_lexer.ml"

  | 1 ->
# 267 "xml_lexer.mll"
  ( error lexbuf ECloseExpected )
# 798 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_close_tag_rec lexbuf __ocaml_lex_state

and attributes lexbuf =
    __ocaml_lex_attributes_rec lexbuf 54
and __ocaml_lex_attributes_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 271 "xml_lexer.mll"
  ( [], false )
# 810 "xml_lexer.ml"

  | 1 ->
# 273 "xml_lexer.mll"
  ( [], true )
# 815 "xml_lexer.ml"

  | 2 ->
# 275 "xml_lexer.mll"
  (
			let key = attribute lexbuf in
			let data = attribute_data lexbuf in
			ignore_spaces lexbuf;
			let others, closed = attributes lexbuf in
			(key, data) :: others, closed
		)
# 826 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_attributes_rec lexbuf __ocaml_lex_state

and attribute lexbuf =
    __ocaml_lex_attribute_rec lexbuf 58
and __ocaml_lex_attribute_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 285 "xml_lexer.mll"
  ( lexeme lexbuf )
# 838 "xml_lexer.ml"

  | 1 ->
# 287 "xml_lexer.mll"
  ( error lexbuf EAttributeNameExpected )
# 843 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_attribute_rec lexbuf __ocaml_lex_state

and attribute_data lexbuf =
    __ocaml_lex_attribute_data_rec lexbuf 61
and __ocaml_lex_attribute_data_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 291 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			last_pos := lexeme_end lexbuf;
			dq_string lexbuf
		)
# 859 "xml_lexer.ml"

  | 1 ->
# 297 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			last_pos := lexeme_end lexbuf;
			q_string lexbuf
		)
# 868 "xml_lexer.ml"

  | 2 ->
# 303 "xml_lexer.mll"
  ( error lexbuf EAttributeValueExpected )
# 873 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_attribute_data_rec lexbuf __ocaml_lex_state

and dq_string lexbuf =
    __ocaml_lex_dq_string_rec lexbuf 69
and __ocaml_lex_dq_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 307 "xml_lexer.mll"
  ( Buffer.contents tmp )
# 885 "xml_lexer.ml"

  | 1 ->
# 309 "xml_lexer.mll"
  (
			Buffer.add_char tmp (lexeme_char lexbuf 1);
			dq_string lexbuf
		)
# 893 "xml_lexer.ml"

  | 2 ->
# 314 "xml_lexer.mll"
  ( raise (Error EUnterminatedString) )
# 898 "xml_lexer.ml"

  | 3 ->
# 316 "xml_lexer.mll"
  ( 
			Buffer.add_char tmp (lexeme_char lexbuf 0);
			dq_string lexbuf
		)
# 906 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dq_string_rec lexbuf __ocaml_lex_state

and q_string lexbuf =
    __ocaml_lex_q_string_rec lexbuf 75
and __ocaml_lex_q_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 323 "xml_lexer.mll"
  ( Buffer.contents tmp )
# 918 "xml_lexer.ml"

  | 1 ->
# 325 "xml_lexer.mll"
  (
			Buffer.add_char tmp (lexeme_char lexbuf 1);
			q_string lexbuf
		)
# 926 "xml_lexer.ml"

  | 2 ->
# 330 "xml_lexer.mll"
  ( raise (Error EUnterminatedString) )
# 931 "xml_lexer.ml"

  | 3 ->
# 332 "xml_lexer.mll"
  ( 
			Buffer.add_char tmp (lexeme_char lexbuf 0);
			q_string lexbuf
		)
# 939 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_q_string_rec lexbuf __ocaml_lex_state

and dtd_data lexbuf =
    __ocaml_lex_dtd_data_rec lexbuf 81
and __ocaml_lex_dtd_data_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 339 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			(* skipping Public ID *)
			let _ = dtd_file lexbuf in
			let file = dtd_file lexbuf in
			dtd_end_decl lexbuf;
			DTDFile file
		)
# 958 "xml_lexer.ml"

  | 1 ->
# 348 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			let file = dtd_file lexbuf in
			dtd_end_decl lexbuf;
			DTDFile file
		)
# 968 "xml_lexer.ml"

  | 2 ->
# 355 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			let data = dtd_intern lexbuf in
			dtd_end_decl lexbuf;
			DTDData data
		)
# 978 "xml_lexer.ml"

  | 3 ->
# 362 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDDecl )
# 983 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_data_rec lexbuf __ocaml_lex_state

and dtd_file lexbuf =
    __ocaml_lex_dtd_file_rec lexbuf 96
and __ocaml_lex_dtd_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 366 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let s = dq_string lexbuf in
			ignore_spaces lexbuf;
			s
		)
# 1000 "xml_lexer.ml"

  | 1 ->
# 373 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let s = q_string lexbuf in
			ignore_spaces lexbuf;
			s
		)
# 1010 "xml_lexer.ml"

  | 2 ->
# 380 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDDecl )
# 1015 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_file_rec lexbuf __ocaml_lex_state

and dtd_intern lexbuf =
    __ocaml_lex_dtd_intern_rec lexbuf 100
and __ocaml_lex_dtd_intern_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 384 "xml_lexer.mll"
  ( 
			ignore_spaces lexbuf;
			[]
		)
# 1030 "xml_lexer.ml"

  | 1 ->
# 389 "xml_lexer.mll"
  (
			let l = dtd_item lexbuf in
			l @ (dtd_intern lexbuf)
		)
# 1038 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_intern_rec lexbuf __ocaml_lex_state

and dtd lexbuf =
    __ocaml_lex_dtd_rec lexbuf 102
and __ocaml_lex_dtd_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 396 "xml_lexer.mll"
  ( [] )
# 1050 "xml_lexer.ml"

  | 1 ->
# 398 "xml_lexer.mll"
  (
			newline lexbuf;
			dtd lexbuf
		)
# 1058 "xml_lexer.ml"

  | 2 ->
# 403 "xml_lexer.mll"
  ( dtd lexbuf )
# 1063 "xml_lexer.ml"

  | 3 ->
# 405 "xml_lexer.mll"
  (
			let l = dtd_item lexbuf in
			l @ (dtd lexbuf)
		)
# 1071 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_rec lexbuf __ocaml_lex_state

and dtd_end_decl lexbuf =
    __ocaml_lex_dtd_end_decl_rec lexbuf 106
and __ocaml_lex_dtd_end_decl_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 412 "xml_lexer.mll"
  ( ignore_spaces lexbuf )
# 1083 "xml_lexer.ml"

  | 1 ->
# 414 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDDecl )
# 1088 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_end_decl_rec lexbuf __ocaml_lex_state

and dtd_item lexbuf =
    __ocaml_lex_dtd_item_rec lexbuf 109
and __ocaml_lex_dtd_item_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 418 "xml_lexer.mll"
  (
			comment lexbuf;
			[];
		)
# 1103 "xml_lexer.ml"

  | 1 ->
# 423 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			let t = dtd_item_type lexbuf in
			let name = (try ident_name lexbuf with Error EIdentExpected -> raise (DTDError EInvalidDTDDecl)) in
			ignore_spaces lexbuf;
			match t with
			| TElement -> [ DTDElement (name , (dtd_element_type lexbuf)) ]
			| TAttribute -> List.map (fun (attrname,atype,adef) -> DTDAttribute (name, attrname, atype, adef)) (dtd_attributes lexbuf)
		)
# 1116 "xml_lexer.ml"

  | 2 ->
# 433 "xml_lexer.mll"
  (  dtd_error lexbuf EDTDItemExpected )
# 1121 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_item_rec lexbuf __ocaml_lex_state

and dtd_attributes lexbuf =
    __ocaml_lex_dtd_attributes_rec lexbuf 115
and __ocaml_lex_dtd_attributes_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 437 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			[]
		)
# 1136 "xml_lexer.ml"

  | 1 ->
# 442 "xml_lexer.mll"
  (
			let attrname = (try ident_name lexbuf with Error EIdentExpected -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			let atype = dtd_attr_type lexbuf in
			let adef = dtd_attr_default lexbuf in
			let a = (attrname, atype, adef) in
			a :: (dtd_attributes lexbuf)
		)
# 1148 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_attributes_rec lexbuf __ocaml_lex_state

and dtd_item_type lexbuf =
    __ocaml_lex_dtd_item_type_rec lexbuf 117
and __ocaml_lex_dtd_item_type_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 453 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			TElement
		)
# 1163 "xml_lexer.ml"

  | 1 ->
# 458 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			TAttribute
		)
# 1171 "xml_lexer.ml"

  | 2 ->
# 463 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDTag )
# 1176 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_item_type_rec lexbuf __ocaml_lex_state

and dtd_element_type lexbuf =
    __ocaml_lex_dtd_element_type_rec lexbuf 133
and __ocaml_lex_dtd_element_type_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 467 "xml_lexer.mll"
  ( 
			ignore_spaces lexbuf;
			dtd_end_element lexbuf;
			DTDAny
		)
# 1192 "xml_lexer.ml"

  | 1 ->
# 473 "xml_lexer.mll"
  ( 
			ignore_spaces lexbuf;
			dtd_end_element lexbuf;
			DTDEmpty
		)
# 1201 "xml_lexer.ml"

  | 2 ->
# 479 "xml_lexer.mll"
  (
			try
				let item = Xml_parser.dtd_element dtd_element_token lexbuf in
				ignore_spaces lexbuf;
				DTDChild item
			with
				Parsing.Parse_error -> dtd_error lexbuf EInvalidDTDElement
		)
# 1213 "xml_lexer.ml"

  | 3 ->
# 488 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDElement )
# 1218 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_element_type_rec lexbuf __ocaml_lex_state

and dtd_end_element lexbuf =
    __ocaml_lex_dtd_end_element_rec lexbuf 144
and __ocaml_lex_dtd_end_element_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 492 "xml_lexer.mll"
  ( ignore_spaces lexbuf )
# 1230 "xml_lexer.ml"

  | 1 ->
# 494 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDElement )
# 1235 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_end_element_rec lexbuf __ocaml_lex_state

and dtd_end_attribute lexbuf =
    __ocaml_lex_dtd_end_attribute_rec lexbuf 147
and __ocaml_lex_dtd_end_attribute_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 498 "xml_lexer.mll"
  ( ignore_spaces lexbuf )
# 1247 "xml_lexer.ml"

  | 1 ->
# 500 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1252 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_end_attribute_rec lexbuf __ocaml_lex_state

and dtd_element_token lexbuf =
    __ocaml_lex_dtd_element_token_rec lexbuf 150
and __ocaml_lex_dtd_element_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 504 "xml_lexer.mll"
  (
			newline lexbuf;
			dtd_element_token lexbuf
		)
# 1267 "xml_lexer.ml"

  | 1 ->
# 509 "xml_lexer.mll"
  ( dtd_element_token lexbuf )
# 1272 "xml_lexer.ml"

  | 2 ->
# 511 "xml_lexer.mll"
  ( OPEN )
# 1277 "xml_lexer.ml"

  | 3 ->
# 513 "xml_lexer.mll"
  ( CLOSE )
# 1282 "xml_lexer.ml"

  | 4 ->
# 515 "xml_lexer.mll"
  ( NEXT )
# 1287 "xml_lexer.ml"

  | 5 ->
# 517 "xml_lexer.mll"
  ( END )
# 1292 "xml_lexer.ml"

  | 6 ->
# 519 "xml_lexer.mll"
  ( OR )
# 1297 "xml_lexer.ml"

  | 7 ->
# 521 "xml_lexer.mll"
  ( PCDATA )
# 1302 "xml_lexer.ml"

  | 8 ->
# 523 "xml_lexer.mll"
  ( STAR )
# 1307 "xml_lexer.ml"

  | 9 ->
# 525 "xml_lexer.mll"
  ( PLUS )
# 1312 "xml_lexer.ml"

  | 10 ->
# 527 "xml_lexer.mll"
  ( QUESTION )
# 1317 "xml_lexer.ml"

  | 11 ->
# 529 "xml_lexer.mll"
  ( IDENT (lexeme lexbuf) )
# 1322 "xml_lexer.ml"

  | 12 ->
# 531 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDElement )
# 1327 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_element_token_rec lexbuf __ocaml_lex_state

and dtd_attr_type lexbuf =
    __ocaml_lex_dtd_attr_type_rec lexbuf 170
and __ocaml_lex_dtd_attr_type_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 535 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDCData
		)
# 1342 "xml_lexer.ml"

  | 1 ->
# 540 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDNMToken
		)
# 1350 "xml_lexer.ml"

  | 2 ->
# 545 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDEnum (dtd_attr_enum lexbuf)
		)
# 1358 "xml_lexer.ml"

  | 3 ->
# 550 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1363 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_attr_type_rec lexbuf __ocaml_lex_state

and dtd_attr_enum lexbuf =
    __ocaml_lex_dtd_attr_enum_rec lexbuf 185
and __ocaml_lex_dtd_attr_enum_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 554 "xml_lexer.mll"
  (
			let v = lexeme lexbuf in
			ignore_spaces lexbuf;
			v :: (dtd_attr_enum_next lexbuf)
		)
# 1379 "xml_lexer.ml"

  | 1 ->
# 560 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1384 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_attr_enum_rec lexbuf __ocaml_lex_state

and dtd_attr_enum_next lexbuf =
    __ocaml_lex_dtd_attr_enum_next_rec lexbuf 188
and __ocaml_lex_dtd_attr_enum_next_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 564 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			[]
		)
# 1399 "xml_lexer.ml"

  | 1 ->
# 569 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			dtd_attr_enum lexbuf
		)
# 1407 "xml_lexer.ml"

  | 2 ->
# 574 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1412 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_attr_enum_next_rec lexbuf __ocaml_lex_state

and dtd_attr_default lexbuf =
    __ocaml_lex_dtd_attr_default_rec lexbuf 192
and __ocaml_lex_dtd_attr_default_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 578 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let v = (try dq_string lexbuf with Error EUnterminatedString -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			DTDDefault v
		)
# 1429 "xml_lexer.ml"

  | 1 ->
# 585 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let v = (try q_string lexbuf with Error EUnterminatedString -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			DTDDefault v
		)
# 1439 "xml_lexer.ml"

  | 2 ->
# 592 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDRequired
		)
# 1447 "xml_lexer.ml"

  | 3 ->
# 597 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDImplied
		)
# 1455 "xml_lexer.ml"

  | 4 ->
# 602 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDFixed (dtd_attr_string lexbuf)
		)
# 1463 "xml_lexer.ml"

  | 5 ->
# 607 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDDefault (dtd_attr_string lexbuf)
		)
# 1471 "xml_lexer.ml"

  | 6 ->
# 612 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1476 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_attr_default_rec lexbuf __ocaml_lex_state

and dtd_attr_string lexbuf =
    __ocaml_lex_dtd_attr_string_rec lexbuf 224
and __ocaml_lex_dtd_attr_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 616 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let v = (try dq_string lexbuf with Error EUnterminatedString -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			v
		)
# 1493 "xml_lexer.ml"

  | 1 ->
# 623 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let v = (try q_string lexbuf with Error EUnterminatedString -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			v
		)
# 1503 "xml_lexer.ml"

  | 2 ->
# 630 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1508 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_dtd_attr_string_rec lexbuf __ocaml_lex_state

;;

