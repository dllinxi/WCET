====== Commands ======

===== mkirg =====

<code sh>
> mkirg [options] FILE IRG_FILE
</code>

This commands converts its input //FILE//, ''.nmp'' or ''.nml'' files,
to //IRG_FILE// file, that is, to intermediate representation.

Options includes only:
  * ''-help'', ''--help'' -- display help information



===== print_irg =====

<code sh>
> print_irg [options] FILE
</code>

Display in a textual form, as scanned by @(GLISS), its input FILE
that may be ''.nmp'', ''.nml'' or ''.irg''.

Options are:
  * ''-help'', ''--help'' -- display help information
  * ''-i'' -- display operations wholy unfolded, that is, with
    parameters evaluated


===== gep =====

<code sh>
> gep [options] FILE
</code>

''gep'' is the main generator of @(GLISS) responsible for producing
all sources required to produce an ISS.

The //FILE// may be one of ''.nmp'', ''.nml'' or ''.irg''.

Options are:
  * ''-a'' //SOURCE// -- add the given source file to the generated library
  * ''-help'', ''--help'' -- display help information
  * ''-m'' //INTERFACE//://MODULE// -- involve the given module
in the generation
  * ''-off'' //SYMBOL// -- consider the given symbol as true in
the generation templates
  * ''-on'' //SYMBOL// -- consider the given symbol as false in
the generation templates
  * ''-q'' -- quiet mode, does not display anything except errors
  * ''-S'' -- generate also the default ISS
  * ''-D'' -- activate complex arguments decoding, allows to deal with "complex" arguments in a instruction's image (like a<2..4>, a<<2, a+2, etc)
  * ''-s'' //SIZE// -- request image size check against the given size
  * ''-v'' -- display verbose information about the generation
  * ''-gen-with-trace'' -- Generate simulator with decoding of dynamic traces of instructions (faster). module decode32_dtrace must be use with this option
  * ''-p'' //PROFILING FILE// -- Optimized generation with a profiling file given its path. Instructions handlers are sorted to optimized host simulator cache
  * ''-PJ'' //PROFILED SWITCH SIZE// -- Stands for profiled jumps : enable better branch prediction if -p option is also activated
  * ''-off'' //SWITCH// -- unactivate the given switch
  * ''-on'' //SWITCH// -- activate the given switch
  * ''-fstat'' -- generates stats about fetch tables in the file <proc_name>_fetch_tables.stat
  * ''-O'' -- activates instruction tree various optimizations as implemented in optirg


===== gliss-nmp2nml.pl =====

<code>
> gliss-nmp2nml.pl NMP_FILE NML_FILE
</code>

Preprocessor of the macro and includes commands found in the given
//NMP_FILE// file and generates the given //NML_FILE//.


===== gliss-disasm =====

<code sh>
> gliss-disasm [options] FILE
</code>

Generate the disassembler code, that is, the disassembler primitives
linked in the ISS library and the disassembler command. //FILE// may
be one ''.nmp'', ''.nml'' or ''.irg'' file.

Options are:
  * ''-help'', ''--help'' -- display help information
  * ''-q'' -- quiet mode, does not display anything except errors
  * ''-v'' -- display verbose information about the generation


===== gliss-attr =====

<code sh>
> gliss-attr [options] FILE -a ATTRIBUTE -t TEMPLATE -d DEFAULT
</code>

This command allows to generate special processing associated with
instruction. In @(GLISS) V2, you can add custom attributes (different
of standard ones ''syntax'', ''image'' or ''action'') to associate
a special processing with each instruction. Then, a C source file may
be generated with this command.

The generated source is obtained from the //TEMPLATE// file that
is interpreted as the template files of GEP (see section "Generation Templates").
It may contain reference to the given //ATTRIBUTE//. If the attribute is not
define in the instruction, the //DEFAULT// value is output. If the attribute
name, in the template, is followed by character ''!'', 
the generation context is considered as stateless (that is, it does not
require a simulation state to be evaluated) and a stateless check is performed
on the attribute. This helps detecting attributes that should be stateless
and would cause afterward a compilation error.

Options are:
  * ''-a'' ATTRIBUTTE -- attribute name to generate for,
  * ''-d'' DEFAULT -- default value,
  * ''-e'' FILE -- an extension file to add definitions to the NML definition,
  * ''-f'' -- the attribute is an expression attribute,
  * ''-o'' FILE -- generate output to the given file,
  * ''-p'' -- the attribute is an action attribute,
  * ''-q'' -- quiet mode,
  * ''-t'' TEMPLATE -- select the template flag,
  * ''-v'' -- verbose mode.

===== gliss-used-regs =====

''gliss-used-regs'' try to scan the action of instruction to derive
the list of used registers (read and written). All identified
accessed registers are include in the output even if they are only
used in one branch of a selection. The result is an API put in the generated
library. This function follows the signature below:

<code c>
void ARCH_used_regs(ARCH_inst_t *inst, ARCH_used_regs_read_t rds, ARCH_used_regs_write_t wrs);
</code>

''rds'' and ''rws'' are 0-terminated integer arrays representing the list, respectively,
of read and written registers. Register are encoded as number that depends on the
architecture and whose identifying constants are put in header file //ARCH//''/used_regs.h''.
Depending on the nature of the register, the given identifier constants concerns one register
or a suite of registers identifiers.

the behaviour of ''gliss-used-regs'' may be customized according to different flavors.
Sometimes, the modification or the access to some register (like the PC) are not of interest.
To prevent or allow ''gliss-used-regs'' from scanning this part of code, two special
canonical functions may be used:
  * "//no_collect_regs"() -- disable register collection at this program point,
  * "//do_collect_regs"() -- enable register collection at this program point.

In the example below, register collection is disabled for register incrementation
and re-enabled for other actions:
<code>
op instruction(x: all_instructions)
	action = {
		"//no_collect_regs"();
		NPC = PC + 4;
		
		"//do_collect_regs"();
		x.action;
		
		"//no_collect_resg"();
		PC = NPC;
	}
</code>
Notice that this canonical functions have no effect on the instruction execution.

If the collection algorithm of ''gliss-used-regs'' is not enough to collect
used register, it can be by-passed by providing a special attribute named
''used_regs''. This attribute contains an action that provide read registers
using ''read'' canonical and written register using ''write'' canonical.
Their argument is the read or the written register.

In the example below, accessed registers are encoded as a bit set
and each bit is examined to know if the register is really read or not:
<code>
op store_multiple(rd: card(4), set: card(4))
	used_regs = {
		"read"(R(rd));
		"write"(R(rd));
		if set & 0b0001 then "read"(R(0)); endif;
		if set & 0b0010 then "read"(R(1)); endif;
		if set & 0b0100 then "read"(R(2)); endif;
		if set & 0b1000 then "read"(R(3)); endif;
	}
</code>
