
canon card(32) "_XER"
canon card(32) "_LR"
canon card(32) "_CTR"
canon card(32) "_EQ"
canon card(32) "_NE"
canon card(32) "_LT"
canon card(32) "_LE"
canon card(32) "_GT"
canon card(32) "_GE"
canon card(32) "_ANY_COND"

let NO_TYPE = 0
let INT8 = 1
let INT16 = 2
let INT32 = 3
let INT64 = 4
let UINT8 = 5
let UINT16 = 6
let UINT32 = 7
let UINT64 = 8
let FLOAT32 = 9
let FLOAT64 = 10


var i[1, card(32)]

let t1				= -1
let t2				= -2
let t3				= -3
macro CR(i)			= "_CR"(i)
macro R(i)			= "_GPR"(i)
macro FR(i)			= "_FPR"(i)
macro _XER			= "_XER"
macro _LR			= "_LR"
macro _CTR			= "_CTR"

macro _add(a, b, c)	= "_add"(a, b, c)
macro _and(a, b, c)	= "_and"(a, b, c)
macro asr(a, b, c)	= "_asr"(a, b, c)
macro branch(a)		= "_branch"(a)
macro div(a, b, c)	= "_div"(a, b, c)
macro divu(a, b, c)	= "_divu"(a, b, c)
macro _cmp(a, b, c)	= "_cmp"(a, b, c)
macro cmpu(a, b, c)	= "_cmpu"(a, b, c)
macro _if(a, b, c)	= "_if"(a, b, c)
macro load(a, b, c)	= "_load"(a, b, c)
macro mul(a, b, c)	= "_mul"(a, b, c)
macro mulu(a, b, c)	= "_mulu"(a, b, c)
macro _not(a, b)	= "_not"(a, b)
macro _or(a, b, c)	= "_or"(a, b, c)
macro scratch(a)	= "_scratch"(a)
macro set(a, b)		= "_set"(a, b)
macro seti(a, b) 	= "_seti"(a, b)
macro shl(a, b, c)	= "_shl"(a, b, c)
macro shr(a, b, c)	= "_shr"(a, b, c)
macro store(a, b, c)= "_store"(a, b, c)
macro _sub(a, b, c)	= "_sub"(a, b, c)
macro _xor(a, b, c)	= "_xor"(a, b, c)

extend REG_IND
	sem = "_GPR"(r)
extend REG_IND_ZERO
	is_zero = r == 0
	sem = "_GPR"(r)


// ****** control ******
extend branch_abs
	otawa_sem = { seti(t1, coerce(int(32), BRANCH_ADDR) << 2); branch(t1); }
extend branch_link
	otawa_sem = { seti(t1, __IADDR + (coerce(int(32), BRANCH_ADDR) << 2)); seti(_LR, __IADDR + 4); branch(t1); }
extend branch_link_abs
	otawa_sem = { seti(t1, coerce(int(32), BRANCH_ADDR) << 2); seti(_LR, __IADDR + 4); branch(t1); }
extend branch_rel
	otawa_sem = { seti(t1, __IADDR + (coerce(int(32), BRANCH_ADDR) << 2)); branch(t1); }

macro test_cond(step) = \
		if !BO<4..4> then \
			switch((31 - BI) % 4) { \
			case 1: TMP_RES = if BO<3..3> then "_EQ" else "_NE" endif; \
			case 2: TMP_RES = if BO<3..3> then "_GT" else "_LE" endif; \
			case 3: TMP_RES = if BO<3..3> then "_LT" else "_GE" endif; \
			default: TMP_RES = "_ANY_COND"; \
			}; \
			_if(TMP_RES, CR((31 - BI) >> 2), step); \
		endif;

macro test_cond_and_ctr(step) = \
	if !BO<2..2> then seti(t1, 1); _sub(_CTR, _CTR, t1); endif; \
		if !BO<2..2> then \
			seti(t1, 0); \
			_cmp(t1, _CTR, t1); \
			_if(if BO<1..1> then "_EQ" else "_NE" endif, t1, if BO<4..4> then step else step + 1  endif); \
		endif; \
		test_cond(step);

extend branch_cond_lr
	otawa_sem = { test_cond_and_ctr(2); set(t1, _LR); branch(t1); }
extend branch_cond_lr_link
	otawa_sem = { seti(_LR, __IADDR + 4); test_cond_and_ctr(2); set(t1, _LR); branch(t1); }
extend branch_cond_ctr
	otawa_sem = { if !BO<4..4> then test_cond(2); endif; set(t1, _CTR); branch(t1); }
extend branch_cond_ctr_link
	otawa_sem = { seti(_LR, __IADDR + 4); if !BO<4..4> then test_cond(2); endif; set(t1, _CTR); branch(t1); }
extend bran_cond_link_abs
	otawa_sem = { seti(_LR, __IADDR + 4); test_cond_and_ctr(2); seti(t1, BD << 2); branch(t1); }
extend bran_cond_link
	otawa_sem = { seti(_LR, __IADDR + 4); test_cond_and_ctr(2); seti(t1, __IADDR + (BD << 2)); branch(t1); }
extend bran_cond_abs
	otawa_sem = { test_cond_and_ctr(2); seti(t1, BD << 2); branch(t1); }
extend bran_cond_rel
	otawa_sem = { test_cond_and_ctr(2); seti(t1, __IADDR + (BD << 2)); branch(t1); }

extend sys_call, oea_rfi
	otawa_sem = { scratch(t1); branch(t1); }
extend tw, twi
	otawa_sem = { scratch(t1); _if("_EQ", t1, 1); branch(t1); }


// *** comparisons ***
extend cmp
	otawa_sem = { _cmp(CR(7 - crfd), ra.sem, rb.sem); }
extend cmp_imm
	otawa_sem = { seti(t1, imm); _cmp(CR(7 - crfd), ra.sem, t1); } 
extend cmp_log
	otawa_sem = { cmpu(CR(7 - crfd), ra.sem, rb.sem); }
extend cmp_log_imm
	otawa_sem = { seti(t1, imm); cmpu(CR(7 - crfd), ra.sem, t1); }


// integer load
extend lb_zero
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; load(R(rd), t1, UINT8); }
extend lb_zero_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; load(R(rd), t1, UINT8); }
extend lb_zero_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); load(R(rd), t1, UINT8); set(R(ra), t1); }
extend lb_zero_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); load(R(rd), t1, UINT8); set(R(ra), t1); }

extend lhw_zero
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; load(R(rd), t1, UINT16); }
extend lhw_zero_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; load(R(rd), t1, UINT16); }
extend lhw_zero_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); load(R(rd), t1, UINT16); set(R(ra), t1); }
extend lhw_zero_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); load(R(rd), t1, UINT16); set(R(ra), t1); }

extend lhw_alg
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; load(R(rd), t1, INT16); }
extend lhw_alg_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; load(R(rd), t1, INT16); }
extend lhw_alg_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); load(R(rd), t1, INT16); set(R(ra), t1); }
extend lhw_alg_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); load(R(rd), t1, INT16); set(R(ra), t1); }

extend lw_zero
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; load(R(rd), t1, INT32); }
extend lw_zero_indexed, lwarx
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; load(R(rd), t1, INT32); }
extend lw_zero_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); load(R(rd), t1, INT32); set(R(ra), t1); }
extend lw_zero_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); load(R(rd), t1, INT32); set(R(ra), t1); }

extend lhw_br_index
	otawa_sem = { scratch(R(rd)); }
extend lw_br_index
	otawa_sem = { scratch(R(rd)); }

extend int_load_multiple
	otawa_rec = {
		if i < 32 then
			load(R(i), t1, INT32);
			_add(t1, t1, t2);
			i = i + 1;
			otawa_rec;
		endif;
	}
	otawa_sem = {
		seti(t2, 4);
		seti(t1, d);
		if !ra.is_zero then _add(t1, t1, ra.sem); endif;
		i = rd;
		otawa_rec;
	}

extend lstw_index
   otawa_sem = {
		TMP_WORD = 0;
		otawa_rec;
	}
	otawa_rec = {
		if TMP_WORD < 32 then
			scratch(R(TMP_WORD));
			TMP_WORD = TMP_WORD + 1;
			otawa_rec;
		endif;
	}

extend lstw_imm
   otawa_sem = {
   		TMP_WORD = rd - 1;
   		TMP_SHWORD = NB;
   		TMP_BYTE = 0;
		otawa_rec;
	}
	otawa_rec = {
		if TMP_SHWORD >= 0 then
			if TMP_BYTE == 0 then
				TMP_WORD = ( TMP_WORD + 1 ) % 32;
				scratch(R(TMP_WORD));
			endif;
			TMP_BYTE = TMP_BYTE + 8;
			if TMP_BYTE == 32 then TMP_BYTE = 0; endif;
			TMP_WORD = TMP_WORD + 1;
			TMP_SHWORD = TMP_SHWORD - 1;
			otawa_rec;
		endif;
	}


// float load
extend ufp_l_single
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; load(FR(frd), t1, FLOAT32); }
extend ufp_l_single_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; load(FR(frd), t1, FLOAT32); }
extend ufp_l_single_update
	// TODO	false in other load + offset + update
	otawa_sem = { seti(t1, d); _add(t1, t1, R(ra)); load(FR(frd), t1, FLOAT32); set(R(ra), t1); }
extend ufp_l_single_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); load(FR(frd), t1, FLOAT32); set(R(ra), t1); }

extend ufp_l_double
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; load(FR(frd), t1, FLOAT64); }
extend ufp_l_double_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; load(FR(frd), t1, FLOAT64); }
extend ufp_l_double_update
	otawa_sem = { seti(t1, d); _add(t1, t1, R(ra)); load(FR(frd), t1, FLOAT64); set(R(ra), t1); }
extend ufp_l_double_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); load(FR(frd), t1, FLOAT64); set(R(ra), t1); }


// integer store
extend st_byte
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; store(R(rs), t1, INT8); }
extend st_byte_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; store(R(rs), t1, INT8); }
extend st_byte_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); store(R(rs), t1, INT8); set(R(ra), t1); }
extend st_byte_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); store(R(rs), t1, INT8); set(R(ra), t1); }

extend st_half_word
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; store(R(rs), t1, INT16); }
extend st_half_word_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; store(R(rs), t1, INT16); }
extend st_half_word_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); store(R(rs), t1, INT16); set(R(ra), t1); }
extend st_half_word_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); store(R(rs), t1, INT16); set(R(ra), t1); }

extend st_word
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; store(R(rs), t1, INT32); }
extend st_word_indexed, stw_br_index
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; store(R(rs), t1, INT32); }
extend st_word_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); store(R(rs), t1, INT32); set(R(ra), t1); }
extend st_word_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); store(R(rs), t1, INT32); set(R(ra), t1); }

extend sthw_br_index
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; scratch(t2); store(t2, t1, 2); }
extend stw_br_index
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; scratch(t2); store(t2, t1, 4); }

extend ststw_imm
   otawa_sem = {
		if NB == 0 then TMP_SWORD = 32; else TMP_SWORD = NB; endif;
		scratch(t1);
		set(t2, ra.sem);
		seti(t3, 1);
		otawa_sem_rec;
	}
   otawa_sem_rec = {
		if TMP_SWORD >= 0 then
			store(t1, t2, 1);
			_add(t2, t2, t3);
			TMP_SWORD = TMP_SWORD - 1;
			otawa_sem_rec;
		endif;
	}

extend ststw_index
   otawa_sem = {
		TMP_SWORD = 32;
		scratch(t1);
		set(t2, ra.sem);
		seti(t3, 1);
		otawa_sem_rec;
	}
   otawa_sem_rec = {
		if TMP_SWORD >= 0 then
			store(t1, t2, 1);
			_add(t2, t2, t3);
			TMP_SWORD = TMP_SWORD - 1;
			otawa_sem_rec;
		endif;
	}

extend int_store_multiple
	otawa_rec = {
		if i < 32 then
			store(R(i), t1, 4);
			_add(t1, t1, t2);
			i = i + 1;
			otawa_rec;
		endif;
	}
	otawa_sem = {
		set(t2, 4);
		seti(t1, d);
		if !ra.is_zero then _add(t1, t1, ra.sem); endif;
		i = rs;
		otawa_rec;
	}


// float store
extend ufp_st_single
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; store(FR(frs), t1, FLOAT32); }
extend ufp_st_single_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; store(FR(frs), t1, FLOAT32); }
extend ufp_st_single_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); store(FR(frs), t1, FLOAT32); set(R(ra), t1); }
extend ufp_st_single_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); store(FR(frs), t1, FLOAT32); set(R(ra), t1); }

extend ufp_st_double
	otawa_sem = { if ra.is_zero then seti(t1, d); else seti(t1, d); _add(t1, ra.sem, t1); endif; store(FR(frs), t1, FLOAT64); }
extend ufp_st_double_indexed
	otawa_sem = { if ra.is_zero then set(t1, rb.sem); else _add(t1, ra.sem, rb.sem); endif; store(FR(frs), t1, FLOAT64); }
extend ufp_st_double_update
	otawa_sem = { seti(t1, d); _add(t1, R(ra), t1); store(FR(frs), t1, FLOAT64); set(R(ra), t1); }
extend ufp_st_double_update_indexed
	otawa_sem = { _add(t1, R(ra), rb.sem); store(FR(frs), t1, FLOAT64); set(R(ra), t1); }


// ****** ALU ******

extend add
	otawa_sem = {
		_add(R(rd), ra.sem, rb.sem);
		if Oe then  scratch(_XER); endif;
		if Rc then seti(t1, 0); _cmp(CR(7), R(rd), t1); endif;
	}

extend add_imm
	otawa_sem = {
		if ra.value == 0 then
			seti(R(rd), da); 
		else
			seti(t1, da); 
			_add(R(rd), ra.sem, t1);
		endif;
	}
extend add_imm_shifted
	otawa_sem = {
		if ra.value == 0
		then seti(R(rd), da << 16);
		else seti(t1, da << 16); _add(R(rd), ra.sem, t1);
		endif;
	}
extend add_imm_carry
	otawa_sem = { seti(t1, imm); _add(R(rd), ra.sem, t1); scratch(_XER);  }
extend add_imm_carry_record
	otawa_sem = { seti(t1, imm); _add(R(rd), ra.sem, t1); scratch(_XER); seti(t1, 0); _cmp(CR(7), R(rd), t1); }

extend add_carrying, add_carry_overflow
	otawa_sem = { _add(R(rd), ra.sem, rb.sem); scratch(_XER); }
extend add_carry_cr_update, add_carry_overflow_cr_update
	otawa_sem = { _add(R(rd), ra.sem, rb.sem); scratch(_XER); seti(t1, 0); _cmp(CR(7), R(rd), t1); }

extend add_extend, add_extend_overflow, add_ze, add_ze_overflow, add_me, add_me_overflow
	otawa_sem = { scratch(R(rd)); scratch(_XER); }
extend add_extend_cr_update, add_extd_overflow_cr_upd, add_ze_cr_update, add_ze_overflow_cr_update, add_me_cr_update, add_me_overflow_cr_update
	otawa_sem = { scratch(R(rd)); scratch(_XER); scratch(CR(7)); }

extend and
	otawa_sem = { _and(R(ra), rs.sem, rb.sem); }
extend and_cr_update
	otawa_sem = { _and(R(ra), rs.sem, rb.sem); seti(t1, 0); seti(t1, 0); _cmp(CR(7), R(ra), t1); }
extend and_imm
	otawa_sem = { seti(t1, imm); _and(R(ra), rs.sem, t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); }
extend and_imm_shift
	otawa_sem = { seti(t1, imm); seti(t2, 16); shl(t1, t1, t2); _and(R(ra), rs.sem, t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); }
extend and
	otawa_sem = { _and(R(ra), rs.sem, rb.sem); }

extend andc
	otawa_sem = { _not(t1, rb.sem); _and(R(ra), rs.sem, t1); }
extend andc
	otawa_sem = { _not(t1, rb.sem); _and(R(ra), rs.sem, t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); }

extend cntlzw
	otawa_sem = { scratch(R(ra)); }
extend cntlzw_cr_update
	otawa_sem = { scratch(R(ra)); scratch(CR(7)); }

extend cr_and, cr_or, cr_xor, cr_nand, cr_nor, cr_eqv, cr_and_comp, cr_or_comp
	otawa_sem = { scratch(CR((31 - crbd) >> 2)); }

extend divwus
	otawa_sem = { divu(R(rd), ra.sem, rb.sem); }
extend divwus_cr_update
	otawa_sem = { divu(R(rd), ra.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(rd), t1); }
extend divwus_overflow
	otawa_sem = { divu(R(rd), ra.sem, rb.sem); scratch(_XER); }
extend divwus_overflow_cr_upd
	otawa_sem = { divu(R(rd), ra.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(rd), t1); scratch(_XER); }

extend divw
	otawa_sem = { div(R(rd), ra.sem, rb.sem); }
extend divw_cr_update
	otawa_sem = { div(R(rd), ra.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(rd), t1); }
extend divw_overflow
	otawa_sem = { div(R(rd), ra.sem, rb.sem); scratch(_XER); }
extend divw_overflow_cr_upd
	otawa_sem = { div(R(rd), ra.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(rd), t1); scratch(_XER); }

extend eqv
	otawa_sem = { _xor(t1, rs.sem, rb.sem); _not(R(ra), t1); }
extend eqv
	otawa_sem = { _xor(t1, rs.sem, rb.sem); _not(R(ra), t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); }
extend extsb
	otawa_sem = { seti(t1, 24); shl(t2, R(rs), t1); asr(R(ra), t2, t1); } 
extend extsb_cr_update
	otawa_sem = { seti(t1, 24); shl(t2, R(rs), t1); asr(R(ra), t2, t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); } 
extend extsh
	otawa_sem = { seti(t1, 16); shl(t2, R(rs), t1); asr(R(ra), t2, t1); } 
extend extsh_cr_update
	otawa_sem = { seti(t1, 16); shl(t2, R(rs), t1); asr(R(ra), t2, t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); } 

extend isel
	otawa_sem = { scratch(R(rD)); }

extend mult_hi_us
	otawa_sem = { scratch(R(rd)); }
extend mult_hi_us_cr_update
	otawa_sem = { scratch(R(rd)); scratch(CR(7)); }
extend mult_hi
	otawa_sem = { scratch(R(rd)); }
extend mult_hi_cr_update
	otawa_sem = { scratch(R(rd)); scratch(CR(7)); }
extend mult_low_imm
	otawa_sem = { seti(t1, imm); mul(R(rd), ra.sem, t1); }
extend mult_lw
	otawa_sem = { mul(R(rd), ra.sem, rb.sem); }
extend mult_lw_cr_update
	otawa_sem = { mul(R(rd), ra.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(rd), t1); }
extend mult_lw_overflow
	otawa_sem = { mul(R(rd), ra.sem, rb.sem); scratch(_XER); }
extend mult_lw_overflow_cr_upd
	otawa_sem = { mul(R(rd), ra.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(rd), t1); scratch(_XER); }

extend nand
	otawa_sem = { _and(t1, rs.sem, rb.sem); _not(R(ra), t1); }
extend nand_cr_update
	otawa_sem = { _and(t1, rs.sem, rb.sem); _not(R(ra), t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); }

extend neg
	otawa_sem = { seti(t1, 0); _sub(R(rd), t1, ra.sem); }
extend neg_cr_update
	otawa_sem = { seti(t1, 0); _sub(R(rd), t1, ra.sem); _cmp(CR(7), R(rd), t1); }
extend neg_overflow
	otawa_sem = { seti(t1, 0); _sub(R(rd), t1, ra.sem); scratch(_XER); }
extend neg_overflow_cr_upd
	otawa_sem = { seti(t1, 0); _sub(R(rd), t1, ra.sem); _cmp(CR(7), R(rd), t1); scratch(_XER); }

extend nor
	otawa_sem = { _or(t1, rs.sem, rb.sem); _not(R(ra), t1); }
extend nor_cr_update
	otawa_sem = { _or(t1, rs.sem, rb.sem); _not(R(ra), t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); }

extend or
	otawa_sem = {
		if rs.value == rb.value
		then set(R(ra), rs.sem);
		else _or(R(ra), rs.sem, rb.sem); endif; }
extend or_cr_update
	otawa_sem = { _or(R(ra), rs.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(ra), t1); }
extend or_imm
	otawa_sem = { seti(t1, imm); _or(R(ra), rs.sem, t1); }
extend or_imm_shift
	otawa_sem = { seti(t1, imm); seti(t2, 16); shl(t1, t1, t2); _or(R(ra), rs.sem, t1); }
extend orc
	otawa_sem = { _not(t1, rb.sem); _or(R(ra), rs.sem, t1); }
extend orc_cr_update
	otawa_sem = { _not(t1, rb.sem); _or(R(ra), rs.sem, t1); seti(t1, 0); _cmp(CR(7), R(ra), t1); }

extend sub
	otawa_sem = { _sub(R(rd), rb.sem, ra.sem); }
extend sub_cr_update
	otawa_sem = { _sub(R(rd), rb.sem, ra.sem); 	seti(t1, 0); _cmp(CR(7), R(rd), t1); }
extend sub_overflow_enable
	otawa_sem = { _sub(R(rd), rb.sem, ra.sem); scratch(_XER); }
extend sub_crup_overen
	otawa_sem = { _sub(R(rd), rb.sem, ra.sem); 	seti(t1, 0); _cmp(CR(7), R(rd), t1); scratch(_XER); }

extend sub_carrying, sub_extend, sub_me, sub_ze
	otawa_sem = { scratch(R(rd)); }
extend sub_carry_cr_update, sub_extend_cr_update, sub_me_cr_update, sub_ze_cr_update
	otawa_sem = { scratch(R(rd)); scratch(CR(7)); }
extend sub_carry_overflow, sub_extend_overflow, sub_me_overflow, sub_ze_overflow
	otawa_sem = { scratch(R(rd)); scratch(_XER); }
extend sub_carry_overflow_cr_update, sub_extd_overflow_cr_upd, sub_me_overflow_cr_update, sub_ze_overflow_cr_update
	otawa_sem = { scratch(R(rd)); scratch(CR(7)); scratch(_XER); }

extend sub_imm_carry_rec
	otawa_sem = { seti(t1, imm); _sub(R(rd), t1, ra.sem); scratch(_XER); } 

extend xor
	otawa_sem = { _xor(R(ra), rs.sem, rb.sem); }
extend xor_cr_update
	otawa_sem = { _xor(R(ra), rs.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(ra), t1); }
extend xor_imm
	otawa_sem = { seti(t1, imm); _xor(R(ra), rs.sem, t1); }
extend xor_imm_shift
	otawa_sem = { seti(t1, imm); seti(t2, 16); shl(t1, t1, t2); _xor(R(ra), rs.sem, t1); }


// ****** special registers ******

extend mov_from_cr, vea_mftb
	otawa_sem = { scratch(R(rd)); }

extend oea_mfsr, oea_mfmsr, oea_mfspr, oea_mfsrin
	otawa_sem = { scratch(rd.sem); }

extend mov_cr_field
	otawa_sem = { set(CR(7 - crfd), CR(7-crfs)); }
extend mov_to_cr_field
	otawa_sem = {
		if crm<7..7> then scratch(CR(7)); endif;
		if crm<6..6> then scratch(CR(6)); endif;
		if crm<5..5> then scratch(CR(5)); endif;
		if crm<4..4> then scratch(CR(4)); endif;
		if crm<3..3> then scratch(CR(3)); endif;
		if crm<2..2> then scratch(CR(2)); endif;
		if crm<1..1> then scratch(CR(1)); endif;
		if crm<0..0> then scratch(CR(0)); endif;
	}
extend mov_to_cr_xer
	otawa_sem = { scratch(CR(7 - crfd)); scratch(_XER); }
	
extend mov_from_spr
	otawa_sem = {
		TMP_HWORD = spr;
		TMP_WORD = 0;
		TMP_WORD = TMP_HWORD < 4..0 >;
		TMP_WORD = TMP_WORD << 5;
		TMP_WORD = TMP_WORD | ( TMP_HWORD < 8..5 > & 0x0000000f);
		switch (TMP_WORD) {
		case 1: set(R(rd), _XER);
		case 8: set(R(rd), _LR);
		case 9: set(R(rd), _CTR);
		default : scratch(R(rd));
		};
	}

extend mov_to_spr
	otawa_sem = {
		TMP_HWORD = spr;
		TMP_WORD = 0;
		TMP_WORD = TMP_HWORD < 4..0 >;
		TMP_WORD = TMP_WORD << 5;
		TMP_WORD = TMP_WORD | ( TMP_HWORD < 8..5 > & 0x0000000f);
		switch (TMP_WORD) {
		case 1: set(_XER, R(rs));
		case 8: set(_LR, R(rs));
		case 9: set(_CTR, R(rs));
		};
	}

extend oea_mtspr
	otawa_sem = {
		TMP_HWORD = spr;
		TMP_WORD = 0;
		TMP_WORD = TMP_HWORD < 4..0 >;
		TMP_WORD = TMP_WORD << 5;
		TMP_WORD = (TMP_WORD | ( TMP_HWORD < 8..5 > & 0x0000000f))|0x00000010;

		switch(TMP_WORD) {
		case 1: set(_XER, R(rs));
		case 8: set(_LR, R(rs));
		case 9: set(_CTR , R(rs));
		};
	}

// ****** shift and masks ******

extend rlwimi
	otawa_sem = { scratch(R(ra)); }
extend rlwinm
	otawa_sem = {
		if sh == 0 then
			seti(t1, ((1 << (me - mb + 1)) - 1) << (31 - me));
			_and(R(ra), rs.sem, t1);
		else
			if mb == 0 && me + sh == 31 then
				seti(t1, sh);
				shl(R(ra), rs.sem, t1);
			else
				scratch(R(ra));
			endif;
		endif;
	}
extend rlwimi_cr_update, rlwinm_cr_update
	otawa_sem = {
		if mb == 0 && me + sh == 31 then
			seti(t1, sh);
			shl(R(ra), rs.sem, t1);
		else
			scratch(R(ra));
		endif;
		seti(t1, 0); _cmp(CR(7), R(ra), t1); 
	}
extend rlwnm
	otawa_sem = { scratch(R(ra)); }
extend rlwnm_cr_update
	otawa_sem = { scratch(R(ra)); scratch(CR(7)); }

extend slw
	otawa_sem = { shl(R(ra), rs.sem, rb.sem); }
extend slw_cr_update
	otawa_sem = { shl(R(ra), rs.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(ra), t1); }

extend sraw
	otawa_sem = {
		seti(t1, 32); _cmp(t2, rb.sem, t1);
		_if("_LT", t1, 1); asr(R(ra), rs.sem, rb.sem); 
		_if("_GE", t1, 1); scratch(R(ra)); 
	}
extend sraw_cr_update
	otawa_sem = {
		seti(t1, 32); _cmp(t2, rb.sem, t1);
		_if("_LT", t1, 1); asr(R(ra), rs.sem, rb.sem); 
		_if("_GE", t1, 1); scratch(R(ra));
		seti(t1, 0); _cmp(CR(7), R(ra), t1);
	}
extend srawi
	otawa_sem = {
		if sh < 32 then seti(t2, sh); asr(R(ra), rs.sem, t2); else  scratch(R(ra)); endif; 
	}
extend srawi_cr_update
	otawa_sem = {
		if sh < 32 then asr(R(ra), rs.sem, sh); else  scratch(R(ra)); endif; 
		seti(t1, 0); _cmp(CR(7), R(ra), t1);
	}

extend srw
	otawa_sem = { shr(R(ra), rs.sem, rb.sem); }
extend srw_cr_update
	otawa_sem = { shr(R(ra), rs.sem, rb.sem); seti(t1, 0); _cmp(CR(7), R(ra), t1); }

	
// ****** float unit *****

extend 	ufp_add_double, ufp_add_dbl_cr_update, ufp_add_single, ufp_add_sgl_cr_update,
		ufp_sub_double, ufp_sub_dbl_cr_update, ufp_sub_single, ufp_sub_sgl_cr_update,
		ufp_mult_double, ufp_mult_dbl_cr_update, ufp_mult_single, ufp_mult_sgl_cr_update,
		ufp_div_double, ufp_div_dbl_cr_update, ufp_div_single, ufp_div_sgl_cr_update,
		ufp_mult_add_dbl, ufp_mult_addd_cr_upd, ufp_mult_add_sgl, ufp_mult_adds_cr_upd,
		ufp_mult_nadd_dbl, ufp_mult_naddd_cr_upd, ufp_mult_nadd_sgl, ufp_mult_nadds_cr_upd,
		ufp_mult_sub_dbl, ufp_mult_subd_cr_upd, ufp_mult_sub_sgl, ufp_mult_subs_cr_upd,
		ufp_mult_nsub_dbl, ufp_mult_nsubd_cr_upd, ufp_mult_nsub_sgl, ufp_mult_nsubs_cr_upd
	otawa_sem = { scratch(FR(frd)); }

extend ufp_cmp_ord, ufp_cmp_unord
	otawa_sem = { scratch(CR(7 - crfd)); }
 
extend	ufp_mr
	otawa_sem = { set(FR(frd), FR(frb)); }
extend	ufp_mr_cr_update
	otawa_sem = { set(FR(frd), FR(frb)); scratch(CR(6)); }
extend	ufp_neg_normal, ufp_abs, ufp_nabs, ufp_rsp,
		ufp_ctiw, ufp_ctiwz
	otawa_sem = { scratch(FR(frd)); }
extend	ufp_neg_cr_update, ufp_abs_cr_update, ufp_nabs_cr_update, ufp_rsp_cr_update,
		ufp_ctiw_cr_update, ufp_ctiwz_cr_update
	otawa_sem = { scratch(FR(frd)); scratch(CR(6)); }
extend	ufp_mov_cr_fs
	otawa_sem = { scratch(CR(7 - crfd)); }
extend ufp_movf_fs
	otawa_sem = { scratch(FR(frd)); }
extend ufp_movf_fsx
	otawa_sem = { scratch(FR(frd)); scratch(CR(6)); }
extend ufp_movt_fsb0, ufp_movt_fsb1, ufp_movt_fsf, ufp_movt_fsfi
	otawa_sem = { }
extend ufp_movt_fsb0x, ufp_movt_fsb1x, ufp_movt_fsfx, ufp_movt_fsfix
	otawa_sem = { scratch(CR(6)); }



	
	
	
