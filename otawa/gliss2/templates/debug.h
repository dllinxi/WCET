/* Generated by gep ($(date)) copyright (c) 2011 IRIT - UPS */
#ifndef GLISS_$(PROC)_$(PROC)_DEBUG_H
#define GLISS_$(PROC)_$(PROC)_DEBUG_H

#include "api.h"

__BEGIN_DECLS

/* register type */
typedef enum {
	RTYPE_NONE = 0,
	RTYPE_BITS,
	RTYPE_ADDR,
	RTYPE_INT,
	RTYPE_FLOAT
} register_type_t;

/* register field description */
typedef struct {
	const char *name;
	int hbit, lbit;
} register_field_t;

/* register bank description */ 
typedef struct register_bank_t {
	int id;
	const char *name;
	const char *format;
	int size;
	register_type_t type;
	int tsize;
	union {
		register_field_t fields;
	} data;
} register_bank_t;

/* register value */
typedef union {
	int32_t iv;
	int64_t lv;
	float fv;
	double dv;
} register_value_t;

/* IRQ functions */
typedef struct $(proc)_exception_t {
	const char *name;
	void (*fun)($(proc)_state_t *state);
	int is_irq;
} $(proc)_exception_t;
	

/* functions */
register_bank_t *$(proc)_get_registers(void);
register_value_t $(proc)_get_register($(proc)_state_t *state, int id, int index);
void $(proc)_set_register($(proc)_state_t *state, int id, int index, register_value_t value);
$(proc)_exception_t *$(proc)_exceptions(void);

/* macros avoiding customisation in debugger */
#define debug_get_registers()				$(proc)_get_registers()
#define debug_get_register(s, id, idx)		$(proc)_get_register(s, id, idx)
#define debug_set_register(s, id, idx, v)	$(proc)_set_register(s, id, idx, v)
#define debug_exceptions					$(proc)_exceptions()

__END_DECLS

#endif	// GLISS_$(PROC)_$(PROC)_DEBUG_H
