/* Generated by gep ($(date)) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H
#define GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H


#if defined(__cplusplus)
extern  "C"
{
#endif

#include <assert.h>
#include <$(proc)/api.h>
#include <$(proc)/macros.h>
$(foreach modules)
#include <$(proc)/$(name).h>
$(end)
#include <$(proc)/decode.h>
#ifndef $(PROC)_DTRACE_CACHE
#error "GEP option '-gen-with-trace' must be used with decode_dtrace module"
#endif

/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, "%s\n", (e))

#define DECODE_DTRACE_TABLE


/* hack : Enable cache if gep option is on 
(without having to  move decode32.c to templates) */
$(if GLISS_INF_DECODE_CACHE)
#define $(PROC)_INF_DECODE_CACHE
$(end)
$(if GLISS_FIXED_DECODE_CACHE)
#define $(PROC)_FIXED_DECODE_CACHE
$(end)
$(if GLISS_LRU_DECODE_CACHE)
#define $(PROC)_LRU_DECODE_CACHE
$(end)
$(if GLISS_NO_MALLOC)
#define $(PROC)_NO_MALLOC
$(end)


/* decoder macros */
$(if !is_multi_set)$(if is_RISC)
#define __EXTRACT(mask, offset_mask, inst)	  ( (uint$(C_inst_size)_t)((inst) & (mask)) >> (offset_mask))
#define __EXTS(mask, offset_mask, inst, n)    (((int$(C_inst_size)_t)__EXTRACT(mask, offset_mask, inst) << (n)) >> (n))
$(else)
/* CISC, decoded parameters should be 64 bit max */
#define __EXTRACT(mask, inst)	extract_mask(inst, mask)
#define __EXTS(mask, inst, n)	(((int64_t)__EXTRACT(mask, inst) << (n)) >> (n))
$(end)$(end)
$(if is_multi_set)
$(foreach instr_sets_sizes)
$(if is_RISC_size)
#define __EXTRACT_$(C_size)(mask, offset_mask, inst)	  ( (uint$(C_size)_t)((inst) & (mask)) >> (offset_mask))
#define __EXTS_$(C_size)(mask, offset_mask, inst, n)    (((int$(C_size)_t)__EXTRACT_$(C_size)(mask, offset_mask, inst) << (n)) >> (n))
$(else)
/* decoded parameters should be 64 bit max */
#define __EXTRACT_CISC(mask, inst)	extract_mask(inst, mask)
#define __EXTS_CISC(mask, inst, n)	(((int64_t)__EXTRACT_CISC(mask, inst) << (n)) >> (n))
$(end)$(end)$(end)


static int $(proc)_instr_UNKNOWN_decode($(code_read_param_decl)code_inst, $(proc)_inst_t *inst)
{
	inst->ident = $(PROC)_UNKNOWN;

	return 0;
}

$(foreach instructions)
static int $(proc)_instr_$(IDENT)_decode($(code_read_param_decl)code_inst, $(proc)_inst_t *inst)
{
	$(if has_param)
	inst->ident = $(PROC)_$(IDENT);

	/* put other parameters */

$(if is_complex_decode)
$(if !is_RISC_inst)$(mask_decl_all)$(end)
	$(foreach params)
	$(PROC)_$(IDENT)_$(PARAM) = $(decoder_complex);
	
	$(end)
$(else)
	$(foreach params)
$(if !is_RISC_inst)$(mask_decl)$(end)
	$(PROC)_$(IDENT)_$(PARAM) = $(decoder);
	
	$(end)
$(end)
$(if is_inst_branch)return 1;$(else)return 0;$(end)

}

$(else)	
	inst->ident = $(PROC)_$(IDENT);

	$(if is_inst_branch)return 1;$(else)return 0;$(end)

}

$(end)
$(end)


typedef int $(proc)_decode_function_t($(code_read_param_decl)code_inst, $(proc)_inst_t *inst);

static $(proc)_decode_function_t *$(proc)_decode_table[] =
{
	$(proc)_instr_UNKNOWN_decode$(foreach instructions),
	$(proc)_instr_$(IDENT)_decode$(end)
};

/* free a dynamically allocated instruction, we try not to free an already freed or NULL pointer */
void $(proc)_free_inst($(proc)_inst_t *inst) {
	assert(inst);
	/* NB : inst->instrinput is allocate with the same malloc which allocate an instr */

	$(if !GLISS_NO_MALLOC)$(if !GLISS_INF_DECODE_CACHE)$(if !GLISS_FIXED_DECODE_CACHE)$(if !GLISS_LRU_DECODE_CACHE)
	/* finally free it */
	free(inst);
	$(end)$(end)$(end)$(end)
}

#if defined(__cplusplus)
}
#endif

#endif /* GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H */
