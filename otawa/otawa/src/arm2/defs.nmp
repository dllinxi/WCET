let NO_KIND		= 0x00000000
let IS_COND		= 0x00000001
let IS_CONTROL	= 0x00000002
let IS_CALL		= 0x00000004	// save PC before branching
let IS_RETURN	= 0x00000008
let IS_MEM		= 0x00000010
let IS_LOAD		= 0x00000020
let IS_STORE	= 0x00000040
let IS_INT		= 0x00000080
let IS_FLOAT	= 0x00000100
let IS_ALU		= 0x00000200	// basic arithmetic operations (like "+", "-")
let IS_MUL		= 0x00000400
let IS_DIV		= 0x00000800
let IS_SHIFT	= 0x00001000
let IS_TRAP		= 0x00002000
let IS_INTERN	= 0x00004000
let IS_MULTI	= 0x00008000
let IS_SPECIAL	= 0x00010000
let IS_DATA_PROCESSING	= 0x80000000
let IS_IMMEDIATE		= 0x40000000
let IS_SHIFTED			= 0x20000000
let IS_NO_DEST			= 0x10000000
let IS_BL_0				= 0x08000000
let IS_BL_1				= 0x04000000
let IS_BX_IP			= 0x02000000
let IS_THUMB_BX			= 0x01000000
let IS_SWP				= 0x00800000
let IS_MLA				= 0x00400000
let IS_TWO_REG			= 0x00200000


let NO_TYPE = 0
let INT8 = 1
let INT16 = 2
let INT32 = 3
let INT64 = 4
let UINT8 = 5
let UINT16 = 6
let UINT32 = 7
let UINT64 = 8
let FLOAT32 = 9
let FLOAT64 = 10


let t1					= -1
let t2					= -2
let t3					= -3

macro R(i) 				= "_GPR"(i)
macro _CPSR				= "_CPSR"()
macro _branch(t)		= "block.add"("sem::branch"(t))
macro trap				= "block.add"("sem::trap"())
macro cont				= "block.add"("sem::cont"())
macro _if(c, r, o)		= "block.add"("sem::_if"(c, r, o))
macro load(d, a, b)		= "block.add"("sem::load"(d, a, b))
macro store(d, a, b)	= "block.add"("sem::store"(d, a, b))
macro scratch(d)		= "block.add"("sem::scratch"(d))
macro _set(d, a)		= "block.add"("sem::set"(d, a))
macro seti(d, a)		= "block.add"("sem::seti"(d, a))
macro cmp(d, a, b)		= "block.add"("sem::cmp"(d, a, b))
macro cmpu(d, a, b)		= "block.add"("sem::cmpu"(d, a, b))
macro add(d, a, b)		= "block.add"("sem::add"(d, a, b))
macro sub(d, a, b)		= "block.add"("sem::sub"(d, a, b))
macro shl(d, a, b)		= "block.add"("sem::shl"(d, a, b))
macro shr(d, a, b)		= "block.add"("sem::shr"(d, a, b))
macro asr(d, a, b)		= "block.add"("sem::asr"(d, a, b))
macro neg(d, a)			= "block.add"("sem::neg"(d, a))
macro not(d, a)			= "block.add"("sem::_not"(d, a))
macro and(d, a, b)		= "block.add"("sem::_and"(d, a, b))
macro or(d, a, b)		= "block.add"("sem::_or"(d, a, b))
macro xor(d, a, b)		= "block.add"("sem::_xor"(d, a, b))
macro mul(d, a, b)		= "block.add"("sem::mul"(d, a, b))
macro mulh(d, a, b)		= "block.add"("sem::mulh"(d, a, b))
macro mulu(d, a, b)		= "block.add"("sem::mulu"(d, a, b))
macro div(d, a, b)		= "block.add"("sem::div"(d, a, b))
macro divu(d, a, b)		= "block.add"("sem::divu"(d, a, b))
macro mod(d, a, b)		= "block.add"("sem::mod"(d, a, b))
macro modu(d, a, b)		= "block.add"("sem::modu"(d, a, b))


macro exts(v) = (coerce(int(32), v))
macro extu(v) = (coerce(card(32), v))
