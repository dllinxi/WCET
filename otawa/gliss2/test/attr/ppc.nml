// ****************************************************************************
//                                   ppc.nmp
//                              ------------------
//    date            : May 2003
//    copyright       : Institut de Recherche en Informatique de Toulouse
//    author          : Marc Finet
//    email           : sainrat@irit.fr
// ****************************************************************************
//
// ****************************************************************************
// *                                                                          *
// *   This program is free software; you can redistribute it and/or modify   *
// *   it under the terms of the GNU General Public License as published by   *
// *   the Free Software Foundation; either version 2 of the License, or      *
// *   (at your option) any later version.                                    *
// *                                                                          *
// ****************************************************************************


            //***********************************************//
            //       PowerPc 755 description in nMP          //
            //    By: Daniel Gracia Perez & Marc Finet       //
            //    Revised by: Pascal Sainrat, Hugues Casse,  //
	    //        Tahiry Ratsiambahotra                 //
            //     Original ppc603: Subhash Chandra Y        //
            //          Last Modified: 17/05/2006            //
            //***********************************************//




// ========================================================================= //
// 1. Definitions                                                            //
// ========================================================================= //

let proc = "ppc"
let bit_order = "uppermost" // Be careful ; this is not the convention used in PPC manuals.
let M_is_little = "MSR & (0x01<<MSR_LE)" // MSR should be correctly initialized in the init rule below

let gliss_isize = "32"

// ------------------------------------------------------------------------- //
// 1.1 Constants                                                             //
// ------------------------------------------------------------------------- //

let REGS = 5
let nDBAT = 16 // ppc755, 8 otherwise
let nIBAT = 16 // ppc755, 8 otherwise
let nSR = 16
let nSPRG = 8 // ppc755, 4 otherwise

// 1.1.1 CR indexes (int)

let LT = 3
let GT = 2
let EQ = 1
let SO = 0

// 1.1.2 CR indexes (float)
let FX = 3
let FEX= 2
let VX = 1
let OX = 0

// 1.1.3 XER indexes
let SO_XER = 31
let OV_XER = 30
let CA_XER = 29

// 1.1.4 MSR indexes
let MSR_POW = 18
let MSR_ILE = 16
let MSR_EE = 15
let MSR_PR = 14
let MSR_FP = 13
let MSR_ME = 12
let MSR_FE0 = 11
let MSR_SE = 10
let MSR_BE = 9
let MSR_FE1 = 8
let MSR_IP = 6
let MSR_IR = 5
let MSR_DR = 4
let MSR_RI = 1
let MSR_LE = 0

// 1.1.5 exception types
let RESET = 0
let MACHINE_CHECK = 1
let DSI = 2
let ISI = 3
let EXTERNAL = 4
let ALIGNMENT = 5
let PROGRAM = 6
let FP_UNAVAIL = 7
let DECR = 8
let SYST_CALL = 9
let TRACE = 10
let FP_ASSIST = 11

// 1.1.6 Category of instructions
// Might be used to know in which functional unit the instruction is executed
let ARITH = "0"       // Integer Add and Sub Instructions
let MULDIV = "1"     // Integer Mul and Div Instructions
let INTCMP = "2"     // Integer Compare Instructions
let LOGIC = "3"       // Integer Logical instructions
let SHIFTROT = "4" // Int shift and rotate
let STORE = "5"       // Integer Stores including byte reverse, multiple and string
let LOAD = "6"         // Integer Loads including byte reverse, multiple and string
let MEMSYNC = "7"   // Memory Synchronization Instructions
let BRANCH = "8"
let CRLI = "9"         // Condition Register Logical Instructions
let SYSTEM = "10"     // System Linkage Instructions
let TRAP = "11"
let EXT = "12"           // External Control Instructions
let CONTROL = "13"   // Processor Control Instructions
let CACHE = "14"       // Cache Management Instructions



// ------------------------------------------------------------------------- //
// 1.2 Types                                                                 //
// ------------------------------------------------------------------------- //
type bit       = card ( 1 )
type half_byte = card ( 4 )
type byte      = card ( 8 )
type word      = card ( 32 )
type long      = card ( 32 )
type double    = card ( 64 )
type slong     = int ( 32 )
type address   = card ( 32 )
type index     = card ( REGS )
type flot      = float ( 52 , 12 )
type flots     = float ( 23 , 9 )
type xflot     = float ( 64 , 16 )
type sflot     = float ( 31 , 9 )

// ------------------------------------------------------------------------- //
// 1.3  Memory and registers                                                 //
// ------------------------------------------------------------------------- //

// 1.3.1 GEP registers

reg PIA     [ 1 , address ]	__attr(ppc)
reg CIA     [ 1 , address ]	__attr(pc)
reg NIA     [ 1 , address ] __attr(npc)

// 1.3.2 UISA model registers

mem M       [ 32 , byte ]
reg GPR     [ 2 ** REGS , slong ]
reg CR      [ 8 , half_byte ]
reg XER     [ 1 , long ]
reg FPSCR   [ 1 , long ]
reg LR      [ 1 , long ]
reg CTR     [ 1 , long ]
reg UPMC	[ 4 , long ] // 750-755 specific register
reg USIA	[ 1 , address ] // 750-755 specific register
reg UMMCR	[ 2 , long ] // 750-755 specific register
reg FPR     [ 2 ** REGS , flot ]

// 1.3.3 VEA model registers
reg TB		[ 1 , double ] // TBL and TBU

// 1.3.4 OEA model registers
  // Configuration registers
reg HID		[ 2 , long ] // 750-755 specific register. HID[2] : 755 only.
reg PVR		[ 1 , long ]
reg MSR 	[ 1 , long ]
  // Exception handling registers
reg SPRG	[ nSPRG , long ]
reg DAR		[ 1 , long ]
reg SRR		[ 2 , long ]
reg DSISR	[ 1 , long ]
  // Memory management registers
reg SDR1	[ 1 , long ]
reg IBAT	[ nIBAT , long ]
reg DBAT	[ nDBAT , long ]
reg DMISS       [ 1 , long ] // 750-755 specific register
reg DCMP        [ 1 , long ] // 750-755 specific register
reg HASH        [ 2 , long ] // 750-755 specific register
reg IMISS       [ 1 , long ] // 750-755 specific register
reg ICMP        [ 1 , long ] // 750-755 specific register
reg RPA         [ 1 , long ] // 750-755 specific register
reg SR		[ nSR , long ]
  // Performance monitor registers
reg PMC		[ 4 , long ] // 750-755 specific register
reg SIA		[ 1 , long ] // 750-755 specific register
reg MMCR	[ 2 , long ] // 750-755 specific register
  // Power/Thermal Management registers
reg THRM	[ 3 , long ] // 750-755 specific register
reg ICTC	[ 1 , long ] // 750-755 specific register
  // Miscellaneous registers
reg EAR 	[ 1 , long ]
reg DEC		[ 1 , long ]
reg DABR	[ 1 , long ]
reg IABR	[ 1 , long ] // 750-755 specific register
reg L2CR	[ 1 , long ] // 750-755 specific register Not supported on the 745
reg L2PM	[ 1 , long ] // 755 specific register


// ------------------------------------------------------------------------- //
// 1.4  Internal variables                                                   //
// ------------------------------------------------------------------------- //

var TMP_RES	         [ 1 , slong ]
var TMP_EA           [ 1 , address ]
var TMP_RESERVE      [ 1 , int ( 8 ) ]
var TMP_RESERVE_ADDR [ 1 , address ]

// TMP_ means local variables
var TMP_BYTE     [ 1 , byte ]
var TMP_SBYTE    [ 1 , int ( 8 ) ]
var TMP_HBYTE    [ 1 , half_byte ]
var TMP_HWORD    [ 1 , card ( 16 ) ]
var TMP_SHWORD   [ 1 , int ( 16 ) ]
var TMP_WORD     [ 1 , word ]
var TMP_MACRO    [ 1 , word ] // to be used in macros
var TMP_WORD1    [ 1 , word ]
var TMP_WORD2    [ 1 , word ]
var TMP_WORD3    [ 1 , word ]
var TMP_WORD4    [ 1 , word ]
var TMP_WORD5    [ 1 , word ]
var TMP_SWORD    [ 1 , int ( 32 ) ]
var TMP_SWORD1   [ 1 , int ( 32 ) ]
var TMP_SDWORD   [ 1 , int ( 64 ) ]
var TMP_DWORD    [ 1 , card ( 64 ) ]
var TMP_M_OP1    [ 1 , int ( 64 ) ]
var TMP_M_OP2    [ 1 , int ( 64 ) ]
var TMP_M_RES    [ 1 , int ( 64 ) ]



// 1.4.1 Aliases for TB
reg TBL [ 1 , card ( 32 ) ]
	alias = TB [ 31 ]
reg TBU [ 1 , card ( 32 ) ]
	alias = TB [ 63 ]

// 1.4.2 Aliases for Integer Temps

reg TMP_WORD_A1 [ 1 , card ( 16 ) ]
	alias = TMP_WORD [ 31 ]
reg TMP_WORD_A0 [ 1 , card ( 16 ) ]
	alias = TMP_WORD [ 15 ]
reg TMP_M_OP1_H1 [ 1 , int ( 32 ) ]
	alias = TMP_M_OP1 [ 63 ]
reg TMP_M_OP1_H0 [ 1 , int ( 32 ) ]
	alias = TMP_M_OP1 [ 31 ]
reg TMP_M_OP2_H1 [ 1 , int ( 32 ) ]
	alias = TMP_M_OP2 [ 63 ]
reg TMP_M_OP2_H0 [ 1 , int ( 32 ) ]
	alias = TMP_M_OP2 [ 31 ]
reg TMP_M_RES_H1 [ 1 , int ( 32 ) ]
	alias = TMP_M_RES [ 63 ]
reg TMP_M_RES_H0 [ 1 , int ( 32 ) ]
	alias = TMP_M_RES [ 31 ]

// 1.4.3 HalfWord Integer

reg TMP_SHWORD_A1 [ 1 , int ( 8 ) ]
    alias = TMP_SHWORD [ 15 ]

reg TMP_SHWORD_A0 [ 1 , int ( 8 ) ]
    alias = TMP_SHWORD [ 7 ]

// 1.4.4 Word Integers

reg TMP_SWORD_A3 [ 1 , int ( 8 ) ]
    alias = TMP_SWORD [ 31 ]

reg TMP_SWORD_A2 [ 1 , int ( 8 ) ]
    alias = TMP_SWORD [ 23 ]

reg TMP_SWORD_A1 [ 1 , int ( 8 ) ]
    alias = TMP_SWORD [ 15 ]

reg TMP_SWORD_A0 [ 1 , int ( 8 ) ]
    alias = TMP_SWORD [ 7 ]


// ------------------------------------------------------------------------- //
// 1.5 Addressing Modes                                                      //
// ------------------------------------------------------------------------- //


mode REG_IND_ZERO ( r : index ) =
     if r == 0 then
        0
     else
        GPR [ r ]
     endif
   syntax = format ( "r%d", r )
   image  = format ( "%5b", r )

mode REG_IND ( r : index ) = GPR [ r ]
   syntax = format ( "r%d", r )
   image  = format ( "%5b", r )

mode IMM24 ( n : int ( 24 ) ) = n
   syntax = format ( "%d", n )
   image  = format ( "%24b", n )

mode IMM16 ( n : int ( 16 ) ) = n
   syntax = format ( "%d", n )
   image  = format ( "%16b", n )

mode LS_COUNT ( NB : card ( 5 ) ) =
     if NB == 0 then
        32
     else
        NB
     endif
   syntax = format ( "%d", NB )
   image  = format ( "%5b", NB )

mode IADDR ( d : int ( 16 ) ) = d
   syntax = format ( "%d", d )
   image  = format ( "%16b", d )

mode SIMM ( n : int ( 14 ) ) = n
   syntax = format ( "%d", n )
   image  = format ( "%14b", n )

mode SIMM5 ( n : int ( 5 ) ) = n
	syntax = format ( "%d", n )
	image  = format ( "%5b", n )

mode SIMM16 ( n : int ( 16 ) ) = n
	syntax = format ( "%d", n )
	image  = format ( "%16b", n )

mode UIMM16 ( n : card ( 16 ) ) = n
   syntax = format ( "%d", n )
   image  = format ( "%16b", n )

// ------------------------------------------------------------------------- //
// 1.6 Macros                                                                //
// ------------------------------------------------------------------------- //


#line 348 "nmp/ppc.nmp"
#line 361 "nmp/ppc.nmp"

#line 377 "nmp/ppc.nmp"
#line 388 "nmp/ppc.nmp"
#line 418 "nmp/ppc.nmp"
#line 425 "nmp/ppc.nmp"

#line 449 "nmp/ppc.nmp"
#line 477 "nmp/ppc.nmp"
#line 485 "nmp/ppc.nmp"
#line 493 "nmp/ppc.nmp"
#line 499 "nmp/ppc.nmp"


// ========================================================================= //
//  2. Instructions                                                          //
// ========================================================================= //

op instruction ( x : allinstr)
  syntax = x.syntax
  image = x.image
  action = { x.action ; }
  user0 = "0"  // Default : R0 is R0 not 0

op allinstr  =  uisa_instr
                | vea_instr
                | oea_instr


op uisa_instr   = uisa_base_instr
                | uisa_fp_instr

op init ()
	action = {
    	MSR = 0;
		MSR<MSR_FP..MSR_FP> = 1;
		MSR<MSR_PR..MSR_PR> = 0;
		MSR<MSR_FE1..MSR_FE1> = 0;
		MSR<MSR_FE0..MSR_FE0> = 0;
        MSR<MSR_LE..MSR_LE> = 0;
		TB = 0;
		FPR[0]=0; FPR[1]=0; FPR[2]=0; FPR[3]=0; FPR[4]=0; FPR[5]=0; FPR[6]=0; FPR[7]=0; FPR[8]=0; FPR[9]=0;
		FPR[10]=0; FPR[11]=0; FPR[12]=0; FPR[13]=0; FPR[14]=0; FPR[15]=0; FPR[16]=0; FPR[17]=0; FPR[18]=0; FPR[19]=0;
		FPR[20]=0; FPR[21]=0; FPR[22]=0; FPR[23]=0; FPR[24]=0; FPR[25]=0; FPR[26]=0; FPR[27]=0; FPR[28]=0; FPR[29]=0;
		FPR[30]=0; FPR[31]=0;
		CR[0]=0; CR[1]=0; CR[2]=0; CR[3]=0; CR[4]=0; CR[5]=0; CR[6]=0; CR[7]=0;
		L2PM = 0;
		XER = 0;
		FPSCR = 0;	// Fixed by casse@irit.fr
	}

op uisa_base_instr  = branch_instr
                    | non_branch_instr

// ------------------------------------------------------------------------- //
// 2.1 Branch Instructions
// ------------------------------------------------------------------------- //

op branch_instr ( x : branch_instr_action )
   image   = x.image
   syntax  = x.syntax
   action  = { x.action; }
   category = BRANCH

op branch_instr_action  = branch_uncond
                        | branch_cond

op branch_cond          = branch_cond_mem
                        | branch_cond_reg

// OTAWA kind constants
let IS_CONTROL = 0x1000
let IS_CALL = 0x2000

// Unconditional Branch Instructions

op branch_uncond    = branch_rel
                    | branch_abs
                    | call_uncond

op call_uncond      = branch_link
                    | branch_link_abs


op branch_rel ( BRANCH_ADDR : IMM24 )
   syntax = format ( "b %s", BRANCH_ADDR.syntax )
   image  = format ( "010010%24b00", BRANCH_ADDR.image )
   action = {
               TMP_SWORD = BRANCH_ADDR; // sign extension
               NIA = CIA + ( TMP_SWORD << 2 );
            }
   otawa_kind = IS_CONTROL | IS_CALL

op branch_abs ( BRANCH_ADDR : IMM24 )
   syntax = format ( "ba %s", BRANCH_ADDR.syntax )
   image  = format ( "010010%24b10", BRANCH_ADDR.image )
   action = {
               TMP_SWORD = BRANCH_ADDR; // sign extension
               NIA = ( TMP_SWORD << 2 );
            }
	otawa_kind = IS_CONTROL

op branch_link ( BRANCH_ADDR : IMM24 )
   syntax = format ( "bl %s", BRANCH_ADDR.syntax )
   image  = format ( "010010%24b01", BRANCH_ADDR.image )
   action = {
                TMP_SWORD = BRANCH_ADDR; // sign extension
                NIA = CIA + ( TMP_SWORD << 2 );
                LR  = CIA + 4;
             }
	otawa_kind = if BRANCH_ADDR == 0 then IS_CONTROL else 0 endif

op branch_link_abs ( BRANCH_ADDR : IMM24 )
   syntax = format ( "bla %s", BRANCH_ADDR.syntax )
   image  = format ( "010010%24b11", BRANCH_ADDR.image )
   action = {
               TMP_SWORD = BRANCH_ADDR; // sign extension
               NIA = ( TMP_SWORD << 2 );
               LR  = CIA + 4;
            }

// Conditional Branch Instructions

op branch_cond_mem ( x : bran_cond_action )
   syntax = x.syntax
   image  = x.image
   action = {
               x.action;
            }

// Conditional Branch Instructions

op bran_cond_action =   bran_cond_rel
                      | bran_cond_abs
                      | bran_cond_link
                      | bran_cond_link_abs

op bran_cond_rel ( BO : card ( 5 ), BI : card ( 5 ), BD : SIMM )
   syntax = format ( "bc %d,%d,%s", BO, BI, BD.syntax )
   image  = format ( "010000%5b%5b%14b00", BO, BI, BD.image )
   action = {
		if (!BO<2..2>) then
			CTR = CTR - 1;
		endif;
		TMP_SWORD = 31 - BI;
		TMP_SWORD1 = TMP_SWORD/4;
		TMP_SWORD = TMP_SWORD - TMP_SWORD1 * 4;
		if  ( ( BO<2..2> | ( CTR!=0 ^ BO<1..1> ) ) &
			  ( BO<4..4> | ( CR[TMP_SWORD1]<TMP_SWORD..TMP_SWORD> ^ !BO<3..3> ) ) ) then
			TMP_SWORD = BD;
            NIA = CIA + ( TMP_SWORD << 2 );
		endif;

		}

op bran_cond_abs ( BO : card ( 5 ), BI : card ( 5 ), BD : SIMM )
   syntax = format ( "bca %d,%d,%s", BO, BI, BD.syntax )
   image  = format ( "010000%5b%5b%14b10", BO, BI, BD.image )
   action = {
		if !BO<2..2> then
			CTR = CTR - 1;
		endif;
		TMP_SWORD = 31 - BI;
		TMP_SWORD1 = TMP_SWORD/4;
		TMP_SWORD = (TMP_SWORD - TMP_SWORD1 * 4);
		if  ( ( BO<2..2> | ( CTR!=0 ^ BO<1..1> ) ) &
			  ( BO<4..4> | ( CR[TMP_SWORD1]<TMP_SWORD..TMP_SWORD> ^ ! BO<3..3> ) ) ) then
			TMP_SWORD = BD;
            NIA = ( TMP_SWORD << 2 );
		endif;

	    }

op bran_cond_link ( BO : card ( 5 ), BI : card ( 5 ), BD : SIMM )
   syntax = format ( "bcl %d,%d,%s", BO, BI, BD.syntax )
   image  = format ( "010000%5b%5b%14b01", BO, BI, BD.image )
   action = {
		if !BO<2..2> then
			CTR = CTR - 1;
		endif;
		TMP_SWORD = 31 - BI;
		TMP_SWORD1 = TMP_SWORD/4;
		TMP_SWORD = (TMP_SWORD - TMP_SWORD1 * 4);
		if  ( ( BO<2..2> | ( CTR!=0 ^ BO<1..1> ) ) &
			  ( BO<4..4> | ( CR[TMP_SWORD1]<TMP_SWORD..TMP_SWORD> ^ !BO<3..3> ) ) ) then
			TMP_SWORD = BD;
            NIA = CIA + ( TMP_SWORD << 2 );
		endif;

		LR = CIA + 4;

		}

op bran_cond_link_abs ( BO : card ( 5 ), BI : card ( 5 ), BD : SIMM )
   syntax = format ( "bcla %d,%d,%s", BO, BI, BD.syntax )
   image  = format ( "010000%5b%5b%14b11", BO, BI, BD.image )
   action = {
		if !BO<2..2> then
			CTR = CTR - 1;
		endif;
		TMP_SWORD = 31 - BI;
		TMP_SWORD1 = TMP_SWORD/4;
		TMP_SWORD = (TMP_SWORD - TMP_SWORD1 * 4);
		if  ( ( BO<2..2> | ( CTR!=0 ^ BO<1..1> ) ) &
			  ( BO<4..4> | ( CR[TMP_SWORD1]<TMP_SWORD..TMP_SWORD> ^ !BO<3..3> ) ) ) then
			TMP_SWORD = BD;
            NIA = ( TMP_SWORD << 2 );
		endif;
		LR = CIA + 4;

		}

// Branch Conditonal with Registers CTR and LR

op branch_cond_reg ( x : bran_cond_reg_action )
   syntax = x.syntax
   image  = x.image
   action = {
               x.action;
            }

// Branch Conditional on LR and CTR

op bran_cond_reg_action =   bran_cond_ctr
                          | bran_cond_lr

op bran_cond_ctr =   branch_cond_ctr
                   | branch_cond_ctr_link


op branch_cond_ctr ( BO : card ( 5 ), BI : card ( 5 ) )
   syntax = format ( "bcctr %d,%d", BO, BI )
   image  = format ( "010011%5b%5b0000010000100000", BO, BI )
   action = {
		TMP_SWORD = 31 - BI;
		TMP_SWORD1 = TMP_SWORD/4;
		TMP_SWORD = (TMP_SWORD - TMP_SWORD1 * 4);
		if ( BO<4..4> | ( CR[TMP_SWORD1]<TMP_SWORD..TMP_SWORD>  ^ !BO <3..3> ) ) then
			NIA = ( CTR & 0xfffffffc );
		endif;
		}

op branch_cond_ctr_link ( BO : card ( 5 ), BI : card ( 5 ) )
   syntax = format ( "bcctrl %d,%d", BO, BI )
   image  = format ( "010011%5b%5b0000010000100001", BO, BI )
   action = {
		TMP_SWORD = 31 - BI;
		TMP_SWORD1 = TMP_SWORD/4;
		TMP_SWORD = (TMP_SWORD - TMP_SWORD1 * 4);
		if ( BO<4..4> | ( CR[TMP_SWORD1]<TMP_SWORD..TMP_SWORD>  ^ !BO <3..3> ) ) then
			NIA = ( CTR & 0xfffffffc );
		endif;
		LR = ( CIA + 4 );
		}

op bran_cond_lr =   branch_cond_lr
                  | branch_cond_lr_link

op branch_cond_lr ( BO : card ( 5 ), BI : card ( 5 ) )
   syntax = format ( "bclr %d,%d", BO, BI)
   image  = format ( "010011%5b%5b0000000000100000", BO, BI )
   action = {
		if !BO<2..2> then
			CTR = CTR - 1;
		endif;
		TMP_SWORD = 31 - BI;
		TMP_SWORD1 = TMP_SWORD/4;
		TMP_SWORD = (TMP_SWORD - TMP_SWORD1 * 4);
		if  ( ( BO<2..2> | ( CTR!=0 ^ BO<1..1> ) ) &
			  ( BO<4..4> | ( CR[TMP_SWORD1]<TMP_SWORD..TMP_SWORD> ^ !BO<3..3> ) ) ) then
			NIA = ( LR & 0xfffffffc );
		endif;
		}

op branch_cond_lr_link ( BO : card ( 5 ), BI : card ( 5 ) )
   syntax = format ( "bclrl %d,%d", BO, BI )
   image  = format ( "010011%5b%5b0000000000100001", BO, BI )
   action = {
		if !BO<2..2> then
			CTR = CTR - 1;
		endif;
		TMP_SWORD = 31 - BI;
		TMP_SWORD1 = TMP_SWORD/4;
		TMP_SWORD = (TMP_SWORD - TMP_SWORD1 * 4);
		if  ( ( BO<2..2> | ( CTR!=0 ^ BO<1..1> ) ) &
			  ( BO<4..4> | ( CR[TMP_SWORD1]<TMP_SWORD..TMP_SWORD> ^ !BO<3..3> ) ) ) then
			NIA = ( LR & 0xfffffffc );
		endif;
		LR = ( CIA + 4 );
		}

// ------------------------------------------------------------------------- //
// 2.2 Non Branch Instructions
// ------------------------------------------------------------------------- //

op non_branch_instr ( x : non_branch_instr_action )
   action = { x.action; }
   syntax = x.syntax
   image  = x.image

op non_branch_instr_action =   sys_call
                             | load_store_instr
                             | int_instr
                             | flow_control_instr
                             | proce_control_instr
			     | mem_sync_instr
			     | trap_instr

// 2.2.1 System Call

op sys_call ( )
   syntax = "sc"
   image  = "01000100000000000000000000000010"
   action = { "sc_impl"("instr","state",M);}
   category = SYSTEM
   is_branch = 1

// 2.2.2 Load and Store Instructions

op load_store_instr ( x : load_store_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }

op load_store_instr_action =   int_load
                             | int_store

// Integer Load Instructions
op int_load ( x : int_load_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = LOAD

op int_load_action =   int_load_byte
              | int_load_half_word
              | int_load_word
              | int_load_byte_rev   // New
              | int_load_multiple   // New
              | int_load_string     // New

// Integer Load Byte Instructions

op int_load_byte =   lb_zero
                   | lb_zero_indexed
                   | lb_zero_update
                   | lb_zero_update_indexed

op lb_zero ( rd : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "lbz r%d,%s(%s)", rd, d.syntax, ra.syntax )
   image  = format ( "100010%5b%s%16b", rd, ra.image, d.image )
   action = {
               TMP_EA = ra + d;
               TMP_BYTE = M [ TMP_EA ];
               GPR [ rd ] = TMP_BYTE;
               GPR [ rd ] = ( 0x000000ff & GPR [ rd ] );
            }
  user0 = "1"


op lb_zero_indexed ( rd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lbzx r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00010101110", rd, ra.image, rb.image )
   action = {
               TMP_EA = ra + rb;
               TMP_BYTE = M [ TMP_EA ];
               GPR [ rd ] = TMP_BYTE;
               GPR [ rd ] = ( 0x000000ff & GPR [ rd ] );
            }
  user0 = "2"


op lb_zero_update ( rd : index, ra : index, d : IADDR )
   syntax = format ( "lbzu r%d,%s(r%d)", rd, d.syntax, ra )
   image  = format ( "100011%5b%5b%16b", rd, ra, d.image )
   action = {
	       if ((ra==0) || (ra == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;
               TMP_EA = GPR [ ra ] + d;
               TMP_BYTE = M [ TMP_EA ];
               GPR [ rd ] = TMP_BYTE;
               GPR [ rd ] = ( 0x000000ff & GPR [ rd ] );
               GPR [ ra ] = TMP_EA;
            }

op lb_zero_update_indexed ( rd : index, ra : index, rb : REG_IND )
   syntax = format ( "lbzux r%d,r%d,%s", rd, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s00011101110", rd, ra, rb.image )
   action = {
	       if ((ra==0) || (ra == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;
               TMP_EA = GPR [ ra ] + rb;
               TMP_BYTE = M [ TMP_EA ];
               GPR [ rd ] = TMP_BYTE;
               GPR [ rd ] = ( 0x000000ff & GPR [ rd ] );
               GPR [ ra ] = TMP_EA;
            }

// Integer Load Half Word Instructions

op int_load_half_word =   lhw_zero
                        | lhw_zero_indexed
                        | lhw_zero_update
                        | lhw_zero_update_indexed
                        | lhw_alg
                        | lhw_alg_indexed
                        | lhw_alg_update
                        | lhw_alg_update_indexed

op lhw_zero ( rd : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "lhz r%d,%s(%s)", rd, d.syntax, ra.syntax )
   image  = format ( "101000%5b%s%16b", rd, ra.image, d.image )
   action = {

               TMP_EA = ra + d;
               //GPR [ rd ] = 0;

               TMP_SHWORD_A1 = M [ TMP_EA ];
               TMP_SHWORD_A0 = M [ TMP_EA + 1 ];

               GPR [ rd ] = TMP_SHWORD;

               GPR [ rd ] = (GPR [ rd ] & 0x0000ffff);

            }
  user0 = "1"

op lhw_zero_indexed ( rd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lhzx r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s01000101110", rd, ra.image, rb.image )
   action = {

               TMP_EA = ra + rb;

               TMP_SHWORD_A1 = M [ TMP_EA ];
               TMP_SHWORD_A0 = M [ TMP_EA + 1 ];

               GPR [ rd ] = TMP_SHWORD;

               GPR [ rd ] = (GPR [ rd ] & 0x0000ffff);
            }
   user0 = "2"

op lhw_zero_update ( rd : index, ra : index, d : IADDR )
   syntax = format ( "lhzu r%d,%s(r%d)", rd, d.syntax, ra )
   image  = format ( "101001%5b%5b%16b", rd, ra, d.image )
   action = {
 	       if ((ra==0) || (ra == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

               TMP_EA = GPR [ ra ] + d;
               GPR [ rd ] = 0;
               TMP_SHWORD_A1 = M [ TMP_EA ];
               TMP_SHWORD_A0 = M [ TMP_EA + 1 ];
               GPR [ rd ] = TMP_SHWORD;
               GPR [ ra ] = TMP_EA;
               GPR [ rd ] = (GPR [ rd ] & 0x0000ffff);
            }

op lhw_zero_update_indexed ( rd : index, ra : index, rb : REG_IND )
   syntax = format ( "lhzux r%d,r%d,%s", rd, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s01001101110", rd, ra, rb.image )
   action = {
	       if ((ra==0) || (ra == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

               TMP_EA = GPR [ ra ] + rb;
               //GPR [ rd ] = 0;
               TMP_SHWORD_A1 = M [ TMP_EA ];
               TMP_SHWORD_A0 = M [ TMP_EA + 1 ];
               GPR [ rd ] = TMP_SHWORD;
               GPR [ ra ] = TMP_EA;
               GPR [ rd ] = (GPR [ rd ] & 0x0000ffff);
            }

op lhw_alg ( rd : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "lha r%d,%s(%s)", rd, d.syntax, ra.syntax )
   image  = format ( "101010%5b%s%16b", rd, ra.image, d.image )
   action = {

               TMP_EA = ra + d;
               GPR [ rd ] = 0;
               TMP_BYTE = M [ TMP_EA ];
               TMP_SHWORD_A1 = M [ TMP_EA ];
               TMP_SHWORD_A0 = M [ TMP_EA + 1 ];
               GPR [ rd ] = TMP_SHWORD;
               GPR [ rd ] = (GPR [ rd ] & 0x0000ffff);
               if TMP_BYTE < 7..7 > then
                  GPR [ rd ] =  0xffff0000 | GPR [ rd ];
               endif;
            }
  user0 = "1"

op lhw_alg_indexed ( rd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lhax r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s01010101110", rd, ra.image, rb.image )
   action = {
               TMP_EA = ra + rb;
               GPR [ rd ] = 0;
               TMP_BYTE = M [ TMP_EA ];
               TMP_SHWORD_A1 = M [ TMP_EA ];
               TMP_SHWORD_A0 = M [ TMP_EA + 1 ];
               GPR [ rd ] = TMP_SHWORD;
               GPR [ rd ] = (GPR [ rd ] & 0x0000ffff);
               if TMP_BYTE < 7..7 > then
                  GPR [ rd ] =  0xffff0000 | GPR [ rd ];
               endif;

            }
   user0 = "2"

op lhw_alg_update ( rd : index, ra : index, d : IADDR )
   syntax = format ( "lhau r%d,%s(r%d)", rd, d.syntax, ra )
   image  = format ( "101011%5b%5b%16b", rd, ra, d.image )
   action = {
	       if ((ra==0) || (ra == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

               TMP_EA = GPR [ ra ] + d;
               GPR [ rd ] = 0;
               TMP_BYTE = M [ TMP_EA ];

               TMP_SHWORD_A1 = M [ TMP_EA ];
               TMP_SHWORD_A0 = M [ TMP_EA + 1 ];

               GPR [ rd ] = TMP_SHWORD;

               GPR [ rd ] = (GPR [ rd ] & 0x0000ffff);

               if TMP_BYTE < 7..7 > then
                  GPR [ rd ] =  0xffff0000 | GPR [ rd ];
               endif;

               GPR [ ra ] = TMP_EA;

            }

op lhw_alg_update_indexed ( rd : index, ra : index, rb : REG_IND )
   syntax = format ( "lhaux r%d,r%d,%s", rd, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s01011101110", rd, ra, rb.image )
   action = {
	       if ((ra==0) || (ra == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

               TMP_EA = GPR [ ra ] + rb;
               GPR [ rd ] = 0;
               TMP_BYTE = M [ TMP_EA ];

               TMP_SHWORD_A1 = M [ TMP_EA ];
               TMP_SHWORD_A0 = M [ TMP_EA + 1 ];

               GPR [ rd ] = TMP_SHWORD;

               GPR [ rd ] = (GPR [ rd ] & 0x0000ffff);

               if TMP_BYTE < 7..7 > then
                  GPR [ rd ] =  0xffff0000 | GPR [ rd ];
               endif;

               GPR [ ra ] = TMP_EA;

            }

// Interger Load Word Instructions

op int_load_word =   lw_zero
                   | lw_zero_indexed
                   | lw_zero_update
                   | lw_zero_update_indexed

op lw_zero ( rd : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "lwz r%d,%s(%s)", rd, d.syntax, ra.syntax )
   image  = format ( "100000%5b%s%16b", rd, ra.image, d.image )
   action = {

               TMP_EA = ra + d;

               TMP_SWORD_A3 = M [ TMP_EA ];
               TMP_SWORD_A2 = M [ TMP_EA + 1 ];
               TMP_SWORD_A1 = M [ TMP_EA + 2 ];
               TMP_SWORD_A0 = M [ TMP_EA + 3 ];

               GPR [ rd ] = TMP_SWORD;

            }
  user0 = "1"

op lw_zero_indexed ( rd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lwzx r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00000101110", rd, ra.image, rb.image )
   action = {

               TMP_EA = ra + rb;

               TMP_SWORD_A3 = M [ TMP_EA ];
               TMP_SWORD_A2 = M [ TMP_EA + 1 ];
               TMP_SWORD_A1 = M [ TMP_EA + 2 ];
               TMP_SWORD_A0 = M [ TMP_EA + 3 ];

               GPR [ rd ] = TMP_SWORD;

            }
   user0 = "2"

op lw_zero_update ( rd : index, ra : index, d : IADDR )
   syntax = format ( "lwzu r%d,%s(r%d)", rd, d.syntax, ra )
   image  = format ( "100001%5b%5b%16b", rd, ra, d.image )
   action = {
	       if ((ra==0) || (ra == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

               TMP_EA = GPR [ ra ] + d;

               TMP_SWORD_A3 = M [ TMP_EA ];
               TMP_SWORD_A2 = M [ TMP_EA + 1 ];
               TMP_SWORD_A1 = M [ TMP_EA + 2 ];
               TMP_SWORD_A0 = M [ TMP_EA + 3 ];

               GPR [ rd ] = TMP_SWORD;

               GPR [ ra ] = TMP_EA;

            }

op lw_zero_update_indexed ( rd : index, ra : index, rb : REG_IND )
   syntax = format ( "lwzux r%d,r%d,%s", rd, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s00001101110", rd, ra, rb.image )
   action = {
	       if ((ra==0) || (ra == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

               TMP_EA = GPR [ ra ] + rb;

               TMP_SWORD_A3 = M [ TMP_EA ];
               TMP_SWORD_A2 = M [ TMP_EA + 1 ];
               TMP_SWORD_A1 = M [ TMP_EA + 2 ];
               TMP_SWORD_A0 = M [ TMP_EA + 3 ];

               GPR [ rd ] = TMP_SWORD;

               GPR [ ra ] = TMP_EA;

            }

// Integer Load with Byte reversal Instructions

op int_load_byte_rev =   lhw_br_index
                       | lw_br_index

op lhw_br_index ( rd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lhbrx r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s11000101100", rd, ra.image, rb.image )
   action = {

               TMP_EA = ra + rb;
               //GPR [ rd ] = 0;

               TMP_SHWORD_A1 = M [ TMP_EA + 1 ];
               TMP_SHWORD_A0 = M [ TMP_EA ];

               GPR [ rd ] = TMP_SHWORD;
			   GPR [ rd ] = GPR [ rd ] & 0x0000ffff;
            }
   user0 = "2"

op lw_br_index ( rd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lwbrx r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10000101100", rd, ra.image, rb.image )
   action = {

               TMP_EA = ra + rb;
               //GPR [ rd ] = 0;

               TMP_SWORD_A3 = M [ TMP_EA + 3 ];
               TMP_SWORD_A2 = M [ TMP_EA + 2 ];
               TMP_SWORD_A1 = M [ TMP_EA + 1 ];
               TMP_SWORD_A0 = M [ TMP_EA ];

               GPR [ rd ] = TMP_SWORD;

            }
   user0 = "2"

// Integer Load Multiple Instructions

op int_load_multiple ( rd : index, ra : REG_IND_ZERO, d : IMM16 )
   syntax = format ( "lmw r%d,%s(%s)", rd , d.syntax, ra.syntax )
   image  = format ( "101110%5b%s%s", rd, ra.image, d.image )
   action = {

               TMP_EA = ra + d;
               TMP_BYTE =  rd;
               recurs;

            }
    recurs = {

                if TMP_BYTE <= 31 then

                   TMP_SWORD_A3 = M [ TMP_EA ];
                   TMP_SWORD_A2 = M [ TMP_EA + 1 ];
                   TMP_SWORD_A1 = M [ TMP_EA + 2 ];
                   TMP_SWORD_A0 = M [ TMP_EA + 3 ];

                   GPR [ TMP_BYTE ] = TMP_SWORD;

                   TMP_BYTE = TMP_BYTE + 1;
                   TMP_EA = TMP_EA + 4;
                   recurs; // recursiveness is OK : it is compiled as labels and gotos
                endif;

             }
  user0 = "7"

// Integer Load String Instructions

op int_load_string =   lstw_imm
                     | lstw_index

op lstw_imm ( rd : index, ra : REG_IND_ZERO, NB : LS_COUNT )
   syntax = format ( "lswi r%d,%s,%s", rd, ra.syntax, NB.syntax )
   image  = format ( "011111%5b%s%5b10010101010", rd, ra.image, NB.image )
   action = {

               TMP_WORD = rd - 1;
               TMP_BYTE = 0;
               TMP_EA = ra;
			   TMP_SHWORD = NB;
               recurs;

            }
   recurs = {

               if TMP_SHWORD >= 0 then

                  if TMP_BYTE == 0 then
                     TMP_WORD = ( TMP_WORD + 1 ) % 32;
                     GPR [ TMP_WORD ] = 0;
                  endif;

                  TMP_WORD1 = M [ TMP_EA ];
                  TMP_WORD1 = TMP_WORD1 << ( ( 31 - TMP_BYTE ) - 7);
                  TMP_WORD1 = TMP_WORD1 & ( 0x000000ff << ( ( 31 - TMP_BYTE ) - 7));
                  GPR [ TMP_WORD ] = GPR [ TMP_WORD ] | TMP_WORD1;

                  TMP_BYTE = TMP_BYTE + 8;
				  if TMP_BYTE == 32 then TMP_BYTE = 0; endif;
                  TMP_EA = TMP_EA + 1;
                  TMP_SHWORD = TMP_SHWORD - 1;
                  recurs;

               endif;

           }
  user0 = "7"

op lstw_index ( rd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lswx r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10000101010", rd, ra.image, rb.image )
   action = {
	       if (((ra==0) && (rd == 0)) || (ra == rd) || (rb == rd))
               then
		  "launch_exception"("instr",PROGRAM);
               endif;


               TMP_WORD = rd - 1;
               TMP_SBYTE = XER < 6..0 >;
               TMP_BYTE = 0;
               TMP_EA = ra + rb;
               recurs;

            }
   recurs = {

               if TMP_SBYTE >= 0 then

                  if TMP_BYTE == 0 then
                     TMP_WORD = ( TMP_WORD + 1 ) % 32;
                     GPR [ TMP_WORD ] = 0;
                  endif;

                  TMP_WORD1 = M [ TMP_EA ];
                  TMP_WORD1 = TMP_WORD1 << ( ( 31 - TMP_BYTE ) - 7);
                  TMP_WORD1 = TMP_WORD1 & ( 0x000000ff << ( ( 31 - TMP_BYTE ) - 7));
                  GPR [ TMP_WORD ] = GPR [ TMP_WORD ] | TMP_WORD1;

                  TMP_BYTE = TMP_BYTE + 8;
				  if TMP_BYTE == 32 then TMP_BYTE = 0; endif;
                  TMP_EA = TMP_EA + 1;
                  TMP_SBYTE = TMP_SBYTE - 1;
                  recurs;

               endif;

           }
          user0 = "7"


// Integer Store Instructions
op int_store ( x : int_store_action )
   image   = x.image
   syntax  = x.syntax
   action  = { x.action; }
   category = STORE

op int_store_action =   int_store_byte
               | int_store_half_word
               | int_store_word
               | int_store_byte_rev   // New
               | int_store_multiple   // New
               | int_store_string     // New

// Integer Store Byte Instructions

op int_store_byte =   st_byte
                    | st_byte_indexed
                    | st_byte_update
                    | st_byte_update_indexed

op st_byte ( rs : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "stb r%d,%s(%s)", rs, d.syntax, ra.syntax )
   image  = format ( "100110%5b%s%16b", rs, ra.image, d.image )
   action = {

               TMP_EA = ra + d;

               TMP_SWORD = GPR [ rs ];

               M [ TMP_EA ] = TMP_SWORD_A0;

            }
  user0 = "4"

op st_byte_indexed ( rs : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "stbx r%d,%s,%s", rs, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00110101110", rs, ra.image, rb.image )
   action = {

               TMP_EA = ra + rb;

               TMP_SWORD = GPR [ rs ];

               M [ TMP_EA ] = TMP_SWORD_A0;

            }
  user0 = "3"

op st_byte_update ( rs : index, ra : index, d : IADDR )
   syntax = format ( "stbu r%d,%s(r%d)", rs, d.syntax, ra )
   image  = format ( "100111%5b%5b%16b", rs, ra, d.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

		TMP_EA = GPR [ ra ] + d;

		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A0;

		GPR [ ra ] = TMP_EA;

		}

op st_byte_update_indexed ( rs : index, ra : index, rb : REG_IND )
   syntax = format ( "stbux r%d,r%d,%s", rs, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s00111101110", rs, ra, rb.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

		TMP_EA = GPR [ ra ] + rb;

		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A0;

		GPR [ ra ] = TMP_EA;

		}

// Integer Store Half Word Instructions

op int_store_half_word =   st_half_word
                         | st_half_word_indexed
                         | st_half_word_update
                         | st_half_word_update_indexed

op st_half_word ( rs : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "sth r%d,%s(%s)", rs, d.syntax, ra.syntax )
   image  = format ( "101100%5b%s%16b", rs, ra.image, d.image )
   action = {

               TMP_EA = ra + d;

               TMP_SWORD = GPR [ rs ];

               M [ TMP_EA ] = TMP_SWORD_A1;
               M [ TMP_EA + 1 ] = TMP_SWORD_A0;

            }
    user0 = "4"


op st_half_word_indexed ( rs : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "sthx r%d,%s,%s", rs, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s01100101110", rs, ra.image, rb.image )
   action = {

               TMP_EA = ra + rb;

               TMP_SWORD = GPR [ rs ];

               M [ TMP_EA ] = TMP_SWORD_A1;
               M [ TMP_EA + 1 ] = TMP_SWORD_A0;

            }
   user0 = "3"

op st_half_word_update ( rs : index, ra : index, d : IADDR )
   syntax = format ( "sthu r%d,%s(r%d)", rs, d.syntax, ra )
   image  = format ( "101101%5b%5b%16b", rs, ra, d.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

		TMP_EA = GPR [ ra ] + d;

		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A1;
		M [ TMP_EA + 1 ] = TMP_SWORD_A0;

		GPR [ ra ] = TMP_EA;

		}

op st_half_word_update_indexed ( rs : index, ra : index, rb : REG_IND )
   syntax = format ( "sthux r%d,r%d,%s", rs, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s01101101110", rs, ra, rb.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

		TMP_EA = GPR [ ra ] + rb;

		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A1;
		M [ TMP_EA + 1 ] = TMP_SWORD_A0;

		GPR [ ra ] = TMP_EA;

		}

// Integer Store Word Instructions

op int_store_word =   st_word
                    | st_word_indexed
                    | st_word_update
                    | st_word_update_indexed

op st_word ( rs : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "stw r%d,%s(%s)", rs, d.syntax, ra.syntax )
   image  = format ( "100100%5b%s%16b", rs, ra.image, d.image )
   action = {

		TMP_EA = ra + d;

		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A3;
		M [ TMP_EA + 1 ] = TMP_SWORD_A2;
		M [ TMP_EA + 2 ] = TMP_SWORD_A1;
		M [ TMP_EA + 3 ] = TMP_SWORD_A0;

		}
   user0 = "4"

op st_word_indexed ( rs : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "stwx r%d,%s,%s", rs, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00100101110", rs, ra.image, rb.image )
   action = {

		TMP_EA = ra + rb;

		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A3;
		M [ TMP_EA + 1 ] = TMP_SWORD_A2;
		M [ TMP_EA + 2 ] = TMP_SWORD_A1;
		M [ TMP_EA + 3 ] = TMP_SWORD_A0;

		}
   user0 = "3"

op st_word_update ( rs : index, ra : index, d : IADDR )
   syntax = format ( "stwu r%d,%s(r%d)", rs, d.syntax, ra )
   image  = format ( "100101%5b%5b%16b", rs, ra, d.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

		TMP_EA = GPR [ ra ] + d;

		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A3;
		M [ TMP_EA + 1 ] = TMP_SWORD_A2;
		M [ TMP_EA + 2 ] = TMP_SWORD_A1;
		M [ TMP_EA + 3 ] = TMP_SWORD_A0;

		GPR [ ra ] = TMP_EA;

		}

op st_word_update_indexed ( rs : index, ra : index, rb : REG_IND )
   syntax = format ( "stwux r%d,r%d,%s", rs, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s00101101110", rs, ra, rb.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

		TMP_EA = GPR [ ra ] + rb;

		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A3;
		M [ TMP_EA + 1 ] = TMP_SWORD_A2;
		M [ TMP_EA + 2 ] = TMP_SWORD_A1;
		M [ TMP_EA + 3 ] = TMP_SWORD_A0;

		GPR [ ra ] = TMP_EA;

		}

// Integer Store with Byte reversal Instructions

op int_store_byte_rev =   sthw_br_index
                        | stw_br_index

op sthw_br_index ( rs : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "sthbrx r%d,%s,%s", rs, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s11100101100", rs, ra.image, rb.image )
   action = {

		TMP_EA = ra + rb;
		TMP_SHWORD = GPR [ rs ];

		M [ TMP_EA ]  = TMP_SHWORD_A0;
		M [ TMP_EA + 1 ]  = TMP_SHWORD_A1;

		}
   user0 = "3"

op stw_br_index ( rs : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "stwbrx r%d,%s,%s", rs, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10100101100", rs, ra.image, rb.image )
   action = {

		TMP_EA = ra + rb;
		TMP_SWORD = GPR [ rs ];

		M [ TMP_EA ] = TMP_SWORD_A0;
		M [ TMP_EA + 1 ] = TMP_SWORD_A1;
		M [ TMP_EA + 2 ] = TMP_SWORD_A2;
		M [ TMP_EA + 3 ] = TMP_SWORD_A3;

		}
   user0 = "3"

// Integer Store Multiple Instructions

op int_store_multiple ( rs : index, ra : REG_IND_ZERO, d : IMM16 )
   syntax = format ( "stmw r%d,%s(%s)", rs, d.syntax, ra.syntax )
   image  = format ( "101111%5b%s%s", rs, ra.image, d.image )
   action = {

		TMP_EA = ra + d;
		TMP_WORD = rs;
		recurs;
// ToDo: TMP_EA must be a multiple of four. Otherwise aljgnment exception or results boundedly undefined

		}
    recurs = {

		if TMP_WORD <= 31 then
			TMP_SWORD = GPR [ TMP_WORD ];
			M [ TMP_EA ] = TMP_SWORD_A3;
			M [ TMP_EA + 1 ] = TMP_SWORD_A2;
			M [ TMP_EA + 2 ] = TMP_SWORD_A1;
			M [ TMP_EA + 3 ] = TMP_SWORD_A0;
			TMP_WORD = TMP_WORD + 1;
			TMP_EA = TMP_EA + 4;
			recurs;
		endif;

		}
   user0 = "7"

// Integer Store Stirng Instructions

op int_store_string =   ststw_imm
                      | ststw_index

op ststw_imm ( rs : index, ra : REG_IND_ZERO, NB : LS_COUNT )
   syntax = format ( "stswi r%d,%s,%s", rs, ra.syntax, NB.syntax )
   image  = format ( "011111%5b%s%5b10110101010", rs, ra.image, NB.image )
   action = {

		TMP_WORD = rs - 1;
		TMP_BYTE = 0;
		TMP_EA = ra;
		if NB == 0 then
			TMP_SWORD = 32;
		else
			TMP_SWORD = NB;
		endif;
		recurs;

		}
   recurs = {

		if TMP_SWORD >= 0 then

			if TMP_BYTE == 0 then
				TMP_WORD = ( TMP_WORD + 1 ) % 32;
			endif;

			M [ TMP_EA ] = GPR [ TMP_WORD ] < (31-TMP_BYTE)..( (31-TMP_BYTE) -7) >;
			TMP_BYTE = TMP_BYTE + 8;

			if TMP_BYTE == 32 then
				TMP_BYTE = 0;
			endif;

			TMP_EA = TMP_EA + 1;
			TMP_SWORD = TMP_SWORD - 1;
			recurs;

		endif;

		}
   user0 = "7"

op ststw_index ( rs : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "stswx r%d,%s,%s", rs, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10100101010", rs, ra.image, rb.image )
   action = {

		TMP_WORD = rs - 1;
		TMP_SBYTE = XER < 6..0 >;
		TMP_BYTE = 0;
		TMP_EA = ra + rb;
		recurs;

		}
   recurs = {

		if TMP_SBYTE >= 0 then

			if TMP_BYTE == 0 then
				TMP_WORD = ( TMP_WORD + 1 ) % 32;
			endif;

			M [ TMP_EA ] = GPR [ TMP_WORD ] < (31-TMP_BYTE)..( (31-TMP_BYTE) - 7 ) >;
			TMP_BYTE = TMP_BYTE + 8;

			if TMP_BYTE == 32 then
				TMP_BYTE = 0;
			endif;

			TMP_EA = TMP_EA + 1;
			TMP_SBYTE = TMP_SBYTE - 1;
			recurs;

		endif;

		}
   user0 = "7"

// 2.2.3 Integer Instructions

op int_instr ( x : int_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }

op int_instr_action =   int_arithmetic
                      | int_compare
                      | int_logical
                      | int_rotate_shift

// Integer Arithmetic Instructions

op int_arithmetic =   int_add
                    | int_subtract
                    | int_multiply
                    | int_divide
                    | int_negate

// Integer Add Instructions
op int_add ( x : int_add_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = ARITH

op int_add_action =   add
             | add_immediate
             | add_carry
             | add_extended
             | add_mone_extended
             | add_zero_extended


// Add Instructions
op add ( rd : index, ra : REG_IND, rb : REG_IND ,Rc : card (1) , Oe : card(1))
   syntax = format ( "add r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s%1b100001010%1b", rd, ra.image, rb.image, Oe, Rc )
   action = {

		TMP_RES = ra + rb;
		if Oe then
				if (ra >= 0 &&  rb >= 0 && TMP_RES < 0) then
#line 1733 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 1733 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 1733 "nmp/ppc.nmp"
    else
#line 1733 "nmp/ppc.nmp"
		if (ra < 0 &&  rb < 0 && TMP_RES >= 0) then
#line 1733 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 1733 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 1733 "nmp/ppc.nmp"
     	else
#line 1733 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 1733 "nmp/ppc.nmp"
		endif;
#line 1733 "nmp/ppc.nmp"
	endif;
#line 1733 "nmp/ppc.nmp"
	;
#line 1733 "nmp/ppc.nmp"
#line 1734 "nmp/ppc.nmp"
		endif;

		GPR[rd] = TMP_RES;

		if Rc then
				CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1739 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1739 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1739 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1739 "nmp/ppc.nmp"
;
#line 1739 "nmp/ppc.nmp"
#line 1740 "nmp/ppc.nmp"
       	endif;
        }


// Add Immediate Instructions

op add_immediate =   add_imm
                   | add_imm_shifted
                   | add_imm_carry
                   | add_imm_carry_record

op add_imm ( rd : index, ra : REG_IND_ZERO, da : SIMM16 )
   syntax = format ( "addi r%d,%s,%s", rd, ra.syntax, da.syntax)
   image  = format ( "001110%5b%s%s", rd, ra.image, da.image)
   action = {
                GPR [ rd ] = ra + da;
            }
  user0 = "1"

op add_imm_shifted ( rd : index, ra : REG_IND_ZERO, da : SIMM16 )
   syntax = format ( "addis r%d,%s,%s", rd, ra.syntax, da.syntax)
   image  = format ( "001111%5b%s%s", rd, ra.image, da.image)
   action = {
               TMP_SWORD = da;
                GPR [ rd ] = ra + ( TMP_SWORD << 16 );
            }
  user0 = "1"

op add_imm_carry ( rd : index, ra : REG_IND, imm : SIMM16 )
   syntax = format ( "addic r%d,%s,%s", rd, ra.syntax, imm.syntax )
   image  = format ( "001100%5b%s%s", rd, ra.image, imm.image )
   action = {

		TMP_RES = ra + imm;         // Set carry bit
			if (ra >= 0 &&  imm >= 0) then
#line 1774 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1774 "nmp/ppc.nmp"
	else
#line 1774 "nmp/ppc.nmp"
		if (ra<0 &&  imm<0) then
#line 1774 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1774 "nmp/ppc.nmp"
		else
#line 1774 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1774 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1774 "nmp/ppc.nmp"
			else
#line 1774 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1774 "nmp/ppc.nmp"
			endif;
#line 1774 "nmp/ppc.nmp"
		endif;
#line 1774 "nmp/ppc.nmp"
	endif;
#line 1774 "nmp/ppc.nmp"
;
#line 1774 "nmp/ppc.nmp"
#line 1775 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

       	}

op add_imm_carry_record ( rd : index, ra : REG_IND, imm : SIMM16 )
   syntax = format ( "addic. r%d,%s,%s", rd, ra.syntax, imm.syntax )
   image  = format ( "001101%5b%s%s", rd, ra.image, imm.image )
   action = {

		TMP_RES = ra + imm;         // Set carry bit
			if (ra >= 0 &&  imm >= 0) then
#line 1785 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1785 "nmp/ppc.nmp"
	else
#line 1785 "nmp/ppc.nmp"
		if (ra<0 &&  imm<0) then
#line 1785 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1785 "nmp/ppc.nmp"
		else
#line 1785 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1785 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1785 "nmp/ppc.nmp"
			else
#line 1785 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1785 "nmp/ppc.nmp"
			endif;
#line 1785 "nmp/ppc.nmp"
		endif;
#line 1785 "nmp/ppc.nmp"
	endif;
#line 1785 "nmp/ppc.nmp"
;
#line 1785 "nmp/ppc.nmp"
#line 1786 "nmp/ppc.nmp"

		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1789 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1789 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1789 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1789 "nmp/ppc.nmp"
;
#line 1789 "nmp/ppc.nmp"
#line 1790 "nmp/ppc.nmp"
  		}

// Add with carry Instructions

op add_carry =   add_carrying
               | add_carry_cr_update
               | add_carry_overflow
               | add_carry_overflow_cr_update

op add_carrying ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "addc r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00000010100", rd, ra.image, rb.image )
   action = {

		TMP_RES = ra + rb;
			if (ra >= 0 &&  rb >= 0) then
#line 1805 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1805 "nmp/ppc.nmp"
	else
#line 1805 "nmp/ppc.nmp"
		if (ra<0 &&  rb<0) then
#line 1805 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1805 "nmp/ppc.nmp"
		else
#line 1805 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1805 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1805 "nmp/ppc.nmp"
			else
#line 1805 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1805 "nmp/ppc.nmp"
			endif;
#line 1805 "nmp/ppc.nmp"
		endif;
#line 1805 "nmp/ppc.nmp"
	endif;
#line 1805 "nmp/ppc.nmp"
;
#line 1805 "nmp/ppc.nmp"
#line 1806 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;
        }

op add_carry_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "addc. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00000010101", rd, ra.image, rb.image )
   action = {

		TMP_RES = ra + rb;
			if (ra >= 0 &&  rb >= 0) then
#line 1815 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1815 "nmp/ppc.nmp"
	else
#line 1815 "nmp/ppc.nmp"
		if (ra<0 &&  rb<0) then
#line 1815 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1815 "nmp/ppc.nmp"
		else
#line 1815 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1815 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1815 "nmp/ppc.nmp"
			else
#line 1815 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1815 "nmp/ppc.nmp"
			endif;
#line 1815 "nmp/ppc.nmp"
		endif;
#line 1815 "nmp/ppc.nmp"
	endif;
#line 1815 "nmp/ppc.nmp"
;
#line 1815 "nmp/ppc.nmp"
#line 1816 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1818 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1818 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1818 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1818 "nmp/ppc.nmp"
;
#line 1818 "nmp/ppc.nmp"
#line 1819 "nmp/ppc.nmp"
        }

op add_carry_overflow ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "addco r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10000010100", rd, ra.image, rb.image )
   action = {

		TMP_RES = ra + rb;

			if (ra >= 0 &&  rb >= 0) then
#line 1828 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1828 "nmp/ppc.nmp"
	else
#line 1828 "nmp/ppc.nmp"
		if (ra<0 &&  rb<0) then
#line 1828 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1828 "nmp/ppc.nmp"
		else
#line 1828 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1828 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1828 "nmp/ppc.nmp"
			else
#line 1828 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1828 "nmp/ppc.nmp"
			endif;
#line 1828 "nmp/ppc.nmp"
		endif;
#line 1828 "nmp/ppc.nmp"
	endif;
#line 1828 "nmp/ppc.nmp"
;
#line 1828 "nmp/ppc.nmp"
#line 1829 "nmp/ppc.nmp"
			if (ra >= 0 &&  rb >= 0 && TMP_RES < 0) then
#line 1829 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 1829 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 1829 "nmp/ppc.nmp"
    else
#line 1829 "nmp/ppc.nmp"
		if (ra < 0 &&  rb < 0 && TMP_RES >= 0) then
#line 1829 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 1829 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 1829 "nmp/ppc.nmp"
     	else
#line 1829 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 1829 "nmp/ppc.nmp"
		endif;
#line 1829 "nmp/ppc.nmp"
	endif;
#line 1829 "nmp/ppc.nmp"
	;
#line 1829 "nmp/ppc.nmp"
#line 1830 "nmp/ppc.nmp"

		GPR[rd] = TMP_RES;
      	}

op add_carry_overflow_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "addco. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10000010101", rd, ra.image, rb.image )
   action = {

		TMP_RES = ra + rb;

			if (ra >= 0 &&  rb >= 0) then
#line 1841 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1841 "nmp/ppc.nmp"
	else
#line 1841 "nmp/ppc.nmp"
		if (ra<0 &&  rb<0) then
#line 1841 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1841 "nmp/ppc.nmp"
		else
#line 1841 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1841 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1841 "nmp/ppc.nmp"
			else
#line 1841 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1841 "nmp/ppc.nmp"
			endif;
#line 1841 "nmp/ppc.nmp"
		endif;
#line 1841 "nmp/ppc.nmp"
	endif;
#line 1841 "nmp/ppc.nmp"
;
#line 1841 "nmp/ppc.nmp"
#line 1842 "nmp/ppc.nmp"
			if (ra >= 0 &&  rb >= 0 && TMP_RES < 0) then
#line 1842 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 1842 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 1842 "nmp/ppc.nmp"
    else
#line 1842 "nmp/ppc.nmp"
		if (ra < 0 &&  rb < 0 && TMP_RES >= 0) then
#line 1842 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 1842 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 1842 "nmp/ppc.nmp"
     	else
#line 1842 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 1842 "nmp/ppc.nmp"
		endif;
#line 1842 "nmp/ppc.nmp"
	endif;
#line 1842 "nmp/ppc.nmp"
	;
#line 1842 "nmp/ppc.nmp"
#line 1843 "nmp/ppc.nmp"

		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1846 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1846 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1846 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1846 "nmp/ppc.nmp"
;
#line 1846 "nmp/ppc.nmp"
#line 1847 "nmp/ppc.nmp"
	  	}

// Add extended Instructions

op add_extended =   add_extend
                  | add_extend_cr_update
                  | add_extend_overflow
                  | add_extd_overflow_cr_upd

op add_extend ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "adde r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00100010100", rd, ra.image, rb.image )
   action = {

    	TMP_RES = ra + rb + XER < CA_XER..CA_XER >;
			//if (XER < CA_XER..CA_XER> == 1 && ra == 0 &&  rb == -1) then \
#line 1862 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1862 "nmp/ppc.nmp"
	//else \
#line 1862 "nmp/ppc.nmp"
		if (XER < CA_XER..CA_XER> == 0 || (((ra>=0 &&  rb>=0) || (ra<0 &&  rb<0)) &&  TMP_RES!=0) ) then
#line 1862 "nmp/ppc.nmp"
				if (ra >= 0 &&  rb >= 0) then
#line 1862 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1862 "nmp/ppc.nmp"
	else
#line 1862 "nmp/ppc.nmp"
		if (ra<0 &&  rb<0) then
#line 1862 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1862 "nmp/ppc.nmp"
		else
#line 1862 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1862 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1862 "nmp/ppc.nmp"
			else
#line 1862 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1862 "nmp/ppc.nmp"
			endif;
#line 1862 "nmp/ppc.nmp"
		endif;
#line 1862 "nmp/ppc.nmp"
	endif;
#line 1862 "nmp/ppc.nmp"
;
#line 1862 "nmp/ppc.nmp"
		else
#line 1862 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1862 "nmp/ppc.nmp"
		endif;
#line 1862 "nmp/ppc.nmp"
	//endif; \
#line 1862 "nmp/ppc.nmp"
;
#line 1862 "nmp/ppc.nmp"
#line 1863 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

       	}

op add_extend_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "adde. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00100010101", rd, ra.image, rb.image )
   action = {

      	TMP_RES = ra + rb + XER <CA_XER..CA_XER>;
			//if (XER < CA_XER..CA_XER> == 1 && ra == 0 &&  rb == -1) then \
#line 1873 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1873 "nmp/ppc.nmp"
	//else \
#line 1873 "nmp/ppc.nmp"
		if (XER < CA_XER..CA_XER> == 0 || (((ra>=0 &&  rb>=0) || (ra<0 &&  rb<0)) &&  TMP_RES!=0) ) then
#line 1873 "nmp/ppc.nmp"
				if (ra >= 0 &&  rb >= 0) then
#line 1873 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1873 "nmp/ppc.nmp"
	else
#line 1873 "nmp/ppc.nmp"
		if (ra<0 &&  rb<0) then
#line 1873 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1873 "nmp/ppc.nmp"
		else
#line 1873 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1873 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1873 "nmp/ppc.nmp"
			else
#line 1873 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1873 "nmp/ppc.nmp"
			endif;
#line 1873 "nmp/ppc.nmp"
		endif;
#line 1873 "nmp/ppc.nmp"
	endif;
#line 1873 "nmp/ppc.nmp"
;
#line 1873 "nmp/ppc.nmp"
		else
#line 1873 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1873 "nmp/ppc.nmp"
		endif;
#line 1873 "nmp/ppc.nmp"
	//endif; \
#line 1873 "nmp/ppc.nmp"
;
#line 1873 "nmp/ppc.nmp"
#line 1874 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1876 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1876 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1876 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1876 "nmp/ppc.nmp"
;
#line 1876 "nmp/ppc.nmp"
#line 1877 "nmp/ppc.nmp"
		}

op add_extend_overflow ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "addeo r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10100010100", rd, ra.image, rb.image )
   action = {

      	TMP_RES = ra + rb + XER <CA_XER..CA_XER>;
			//if (XER < CA_XER..CA_XER> == 1 && ra == 0 &&  rb == -1) then \
#line 1885 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1885 "nmp/ppc.nmp"
	//else \
#line 1885 "nmp/ppc.nmp"
		if (XER < CA_XER..CA_XER> == 0 || (((ra>=0 &&  rb>=0) || (ra<0 &&  rb<0)) &&  TMP_RES!=0) ) then
#line 1885 "nmp/ppc.nmp"
				if (ra >= 0 &&  rb >= 0) then
#line 1885 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1885 "nmp/ppc.nmp"
	else
#line 1885 "nmp/ppc.nmp"
		if (ra<0 &&  rb<0) then
#line 1885 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1885 "nmp/ppc.nmp"
		else
#line 1885 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1885 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1885 "nmp/ppc.nmp"
			else
#line 1885 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1885 "nmp/ppc.nmp"
			endif;
#line 1885 "nmp/ppc.nmp"
		endif;
#line 1885 "nmp/ppc.nmp"
	endif;
#line 1885 "nmp/ppc.nmp"
;
#line 1885 "nmp/ppc.nmp"
		else
#line 1885 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1885 "nmp/ppc.nmp"
		endif;
#line 1885 "nmp/ppc.nmp"
	//endif; \
#line 1885 "nmp/ppc.nmp"
;
#line 1885 "nmp/ppc.nmp"
#line 1886 "nmp/ppc.nmp"
			if (ra >= 0 &&  rb >= 0 && TMP_RES < 0) then
#line 1886 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 1886 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 1886 "nmp/ppc.nmp"
    else
#line 1886 "nmp/ppc.nmp"
		if (ra < 0 &&  rb < 0 && TMP_RES >= 0) then
#line 1886 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 1886 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 1886 "nmp/ppc.nmp"
     	else
#line 1886 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 1886 "nmp/ppc.nmp"
		endif;
#line 1886 "nmp/ppc.nmp"
	endif;
#line 1886 "nmp/ppc.nmp"
	;
#line 1886 "nmp/ppc.nmp"
#line 1887 "nmp/ppc.nmp"
		TMP_RES = GPR[rd];

     	}

op add_extd_overflow_cr_upd ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "addeo. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10100010101", rd, ra.image, rb.image )
   action = {

      	TMP_RES = ra + rb + XER <CA_XER..CA_XER>;
			//if (XER < CA_XER..CA_XER >  == 1 && ra == 0 &&  rb == -1) then \
#line 1897 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1897 "nmp/ppc.nmp"
	//else \
#line 1897 "nmp/ppc.nmp"
		if (XER < CA_XER..CA_XER >  == 0 || (((ra>=0 &&  rb>=0) || (ra<0 &&  rb<0)) &&  TMP_RES!=0) ) then
#line 1897 "nmp/ppc.nmp"
				if (ra >= 0 &&  rb >= 0) then
#line 1897 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1897 "nmp/ppc.nmp"
	else
#line 1897 "nmp/ppc.nmp"
		if (ra<0 &&  rb<0) then
#line 1897 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1897 "nmp/ppc.nmp"
		else
#line 1897 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1897 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1897 "nmp/ppc.nmp"
			else
#line 1897 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1897 "nmp/ppc.nmp"
			endif;
#line 1897 "nmp/ppc.nmp"
		endif;
#line 1897 "nmp/ppc.nmp"
	endif;
#line 1897 "nmp/ppc.nmp"
;
#line 1897 "nmp/ppc.nmp"
		else
#line 1897 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1897 "nmp/ppc.nmp"
		endif;
#line 1897 "nmp/ppc.nmp"
	//endif; \
#line 1897 "nmp/ppc.nmp"
;
#line 1897 "nmp/ppc.nmp"
#line 1898 "nmp/ppc.nmp"
			if (ra >= 0 &&  rb >= 0 && TMP_RES < 0) then
#line 1898 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 1898 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 1898 "nmp/ppc.nmp"
    else
#line 1898 "nmp/ppc.nmp"
		if (ra < 0 &&  rb < 0 && TMP_RES >= 0) then
#line 1898 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 1898 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 1898 "nmp/ppc.nmp"
     	else
#line 1898 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 1898 "nmp/ppc.nmp"
		endif;
#line 1898 "nmp/ppc.nmp"
	endif;
#line 1898 "nmp/ppc.nmp"
	;
#line 1898 "nmp/ppc.nmp"
#line 1899 "nmp/ppc.nmp"

		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1902 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1902 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1902 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1902 "nmp/ppc.nmp"
;
#line 1902 "nmp/ppc.nmp"
#line 1903 "nmp/ppc.nmp"
  		}

// Add minus one Instructions

op add_mone_extended =   add_me
                       | add_me_cr_update
                       | add_me_overflow
                       | add_me_overflow_cr_update

op add_me ( rd : index, ra : REG_IND)
   syntax = format ( "addme r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000111010100", rd, ra.image )
   action = {

 		TMP_RES = ra + XER <CA_XER..CA_XER> + 0xffffffff;
			//if (XER<CA_XER..CA_XER> == 1 && ra == 0 && -1 == -1) then \
#line 1918 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1918 "nmp/ppc.nmp"
	//else \
#line 1918 "nmp/ppc.nmp"
		if (XER<CA_XER..CA_XER> == 0 || (((ra>=0 && -1>=0) || (ra<0 && -1<0)) && TMP_RES!=0) ) then
#line 1918 "nmp/ppc.nmp"
				if (ra >= 0 && -1 >= 0) then
#line 1918 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1918 "nmp/ppc.nmp"
	else
#line 1918 "nmp/ppc.nmp"
		if (ra<0 && -1<0) then
#line 1918 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1918 "nmp/ppc.nmp"
		else
#line 1918 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1918 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1918 "nmp/ppc.nmp"
			else
#line 1918 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1918 "nmp/ppc.nmp"
			endif;
#line 1918 "nmp/ppc.nmp"
		endif;
#line 1918 "nmp/ppc.nmp"
	endif;
#line 1918 "nmp/ppc.nmp"
;
#line 1918 "nmp/ppc.nmp"
		else
#line 1918 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1918 "nmp/ppc.nmp"
		endif;
#line 1918 "nmp/ppc.nmp"
	//endif; \
#line 1918 "nmp/ppc.nmp"
;
#line 1918 "nmp/ppc.nmp"
#line 1919 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;
       	}

op add_me_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "addme. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000111010101", rd, ra.image )
   action = {

 		TMP_RES = ra + XER <CA_XER..CA_XER> + 0xffffffff;
			//if (XER <CA_XER..CA_XER> == 1 && ra == 0 && -1 == -1) then \
#line 1928 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1928 "nmp/ppc.nmp"
	//else \
#line 1928 "nmp/ppc.nmp"
		if (XER <CA_XER..CA_XER> == 0 || (((ra>=0 && -1>=0) || (ra<0 && -1<0)) && TMP_RES!=0) ) then
#line 1928 "nmp/ppc.nmp"
				if (ra >= 0 && -1 >= 0) then
#line 1928 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1928 "nmp/ppc.nmp"
	else
#line 1928 "nmp/ppc.nmp"
		if (ra<0 && -1<0) then
#line 1928 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1928 "nmp/ppc.nmp"
		else
#line 1928 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1928 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1928 "nmp/ppc.nmp"
			else
#line 1928 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1928 "nmp/ppc.nmp"
			endif;
#line 1928 "nmp/ppc.nmp"
		endif;
#line 1928 "nmp/ppc.nmp"
	endif;
#line 1928 "nmp/ppc.nmp"
;
#line 1928 "nmp/ppc.nmp"
		else
#line 1928 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1928 "nmp/ppc.nmp"
		endif;
#line 1928 "nmp/ppc.nmp"
	//endif; \
#line 1928 "nmp/ppc.nmp"
;
#line 1928 "nmp/ppc.nmp"
#line 1929 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1931 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1931 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1931 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1931 "nmp/ppc.nmp"
;     	}
#line 1931 "nmp/ppc.nmp"
#line 1932 "nmp/ppc.nmp"

op add_me_overflow ( rd : index, ra : REG_IND)
   syntax = format ( "addmeo r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010111010100", rd, ra.image )
   action = {

 		TMP_RES = ra + XER <CA_XER..CA_XER> + 0xffffffff;
			//if (XER <CA_XER..CA_XER> == 1 && ra == 0 && -1 == -1) then \
#line 1939 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1939 "nmp/ppc.nmp"
	//else \
#line 1939 "nmp/ppc.nmp"
		if (XER <CA_XER..CA_XER> == 0 || (((ra>=0 && -1>=0) || (ra<0 && -1<0)) && TMP_RES!=0) ) then
#line 1939 "nmp/ppc.nmp"
				if (ra >= 0 && -1 >= 0) then
#line 1939 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1939 "nmp/ppc.nmp"
	else
#line 1939 "nmp/ppc.nmp"
		if (ra<0 && -1<0) then
#line 1939 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1939 "nmp/ppc.nmp"
		else
#line 1939 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1939 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1939 "nmp/ppc.nmp"
			else
#line 1939 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1939 "nmp/ppc.nmp"
			endif;
#line 1939 "nmp/ppc.nmp"
		endif;
#line 1939 "nmp/ppc.nmp"
	endif;
#line 1939 "nmp/ppc.nmp"
;
#line 1939 "nmp/ppc.nmp"
		else
#line 1939 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1939 "nmp/ppc.nmp"
		endif;
#line 1939 "nmp/ppc.nmp"
	//endif; \
#line 1939 "nmp/ppc.nmp"
;
#line 1939 "nmp/ppc.nmp"
#line 1940 "nmp/ppc.nmp"
			if (ra >= 0 &&  -1 >= 0 && TMP_RES < 0) then
#line 1940 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 1940 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 1940 "nmp/ppc.nmp"
    else
#line 1940 "nmp/ppc.nmp"
		if (ra < 0 &&  -1 < 0 && TMP_RES >= 0) then
#line 1940 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 1940 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 1940 "nmp/ppc.nmp"
     	else
#line 1940 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 1940 "nmp/ppc.nmp"
		endif;
#line 1940 "nmp/ppc.nmp"
	endif;
#line 1940 "nmp/ppc.nmp"
	;
#line 1940 "nmp/ppc.nmp"
#line 1941 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

    	}

op add_me_overflow_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "addmeo. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010111010101", rd, ra.image )
   action = {

 		TMP_RES = ra + XER <CA_XER..CA_XER> + 0xffffffff;
			//if (XER <CA_XER..CA_XER> == 1 && ra == 0 && -1 == -1) then \
#line 1951 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1951 "nmp/ppc.nmp"
	//else \
#line 1951 "nmp/ppc.nmp"
		if (XER <CA_XER..CA_XER> == 0 || (((ra>=0 && -1>=0) || (ra<0 && -1<0)) && TMP_RES!=0) ) then
#line 1951 "nmp/ppc.nmp"
				if (ra >= 0 && -1 >= 0) then
#line 1951 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1951 "nmp/ppc.nmp"
	else
#line 1951 "nmp/ppc.nmp"
		if (ra<0 && -1<0) then
#line 1951 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1951 "nmp/ppc.nmp"
		else
#line 1951 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1951 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1951 "nmp/ppc.nmp"
			else
#line 1951 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1951 "nmp/ppc.nmp"
			endif;
#line 1951 "nmp/ppc.nmp"
		endif;
#line 1951 "nmp/ppc.nmp"
	endif;
#line 1951 "nmp/ppc.nmp"
;
#line 1951 "nmp/ppc.nmp"
		else
#line 1951 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1951 "nmp/ppc.nmp"
		endif;
#line 1951 "nmp/ppc.nmp"
	//endif; \
#line 1951 "nmp/ppc.nmp"
;
#line 1951 "nmp/ppc.nmp"
#line 1952 "nmp/ppc.nmp"
			if (ra >= 0 &&  -1 >= 0 && TMP_RES < 0) then
#line 1952 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 1952 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 1952 "nmp/ppc.nmp"
    else
#line 1952 "nmp/ppc.nmp"
		if (ra < 0 &&  -1 < 0 && TMP_RES >= 0) then
#line 1952 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 1952 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 1952 "nmp/ppc.nmp"
     	else
#line 1952 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 1952 "nmp/ppc.nmp"
		endif;
#line 1952 "nmp/ppc.nmp"
	endif;
#line 1952 "nmp/ppc.nmp"
	;
#line 1952 "nmp/ppc.nmp"
#line 1953 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1955 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1955 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1955 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1955 "nmp/ppc.nmp"
;
#line 1955 "nmp/ppc.nmp"
#line 1956 "nmp/ppc.nmp"
  		}

// Add zero extended Instructions

op add_zero_extended =   add_ze
                       | add_ze_cr_update
                       | add_ze_overflow
                       | add_ze_overflow_cr_update

op add_ze ( rd : index, ra : REG_IND)
   syntax = format ( "addze r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000110010100", rd, ra.image )
   action = {

 		TMP_RES = ra + XER <CA_XER..CA_XER>;
			//if (XER<CA_XER..CA_XER> == 1 && ra == 0 && 0 == -1) then \
#line 1971 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1971 "nmp/ppc.nmp"
	//else \
#line 1971 "nmp/ppc.nmp"
		if (XER<CA_XER..CA_XER> == 0 || (((ra>=0 && 0>=0) || (ra<0 && 0<0)) && TMP_RES!=0) ) then
#line 1971 "nmp/ppc.nmp"
				if (ra >= 0 && 0 >= 0) then
#line 1971 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1971 "nmp/ppc.nmp"
	else
#line 1971 "nmp/ppc.nmp"
		if (ra<0 && 0<0) then
#line 1971 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1971 "nmp/ppc.nmp"
		else
#line 1971 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1971 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1971 "nmp/ppc.nmp"
			else
#line 1971 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1971 "nmp/ppc.nmp"
			endif;
#line 1971 "nmp/ppc.nmp"
		endif;
#line 1971 "nmp/ppc.nmp"
	endif;
#line 1971 "nmp/ppc.nmp"
;
#line 1971 "nmp/ppc.nmp"
		else
#line 1971 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1971 "nmp/ppc.nmp"
		endif;
#line 1971 "nmp/ppc.nmp"
	//endif; \
#line 1971 "nmp/ppc.nmp"
;
#line 1971 "nmp/ppc.nmp"
#line 1972 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

  		}

op add_ze_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "addze. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000110010101", rd, ra.image )
   action = {
 		TMP_RES = ra + XER <CA_XER..CA_XER>;
			//if (XER<CA_XER..CA_XER> == 1 && ra == 0 && 0 == -1) then \
#line 1981 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1981 "nmp/ppc.nmp"
	//else \
#line 1981 "nmp/ppc.nmp"
		if (XER<CA_XER..CA_XER> == 0 || (((ra>=0 && 0>=0) || (ra<0 && 0<0)) && TMP_RES!=0) ) then
#line 1981 "nmp/ppc.nmp"
				if (ra >= 0 && 0 >= 0) then
#line 1981 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1981 "nmp/ppc.nmp"
	else
#line 1981 "nmp/ppc.nmp"
		if (ra<0 && 0<0) then
#line 1981 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1981 "nmp/ppc.nmp"
		else
#line 1981 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1981 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1981 "nmp/ppc.nmp"
			else
#line 1981 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1981 "nmp/ppc.nmp"
			endif;
#line 1981 "nmp/ppc.nmp"
		endif;
#line 1981 "nmp/ppc.nmp"
	endif;
#line 1981 "nmp/ppc.nmp"
;
#line 1981 "nmp/ppc.nmp"
		else
#line 1981 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1981 "nmp/ppc.nmp"
		endif;
#line 1981 "nmp/ppc.nmp"
	//endif; \
#line 1981 "nmp/ppc.nmp"
;
#line 1981 "nmp/ppc.nmp"
#line 1982 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 1984 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 1984 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 1984 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 1984 "nmp/ppc.nmp"
;
#line 1984 "nmp/ppc.nmp"
#line 1985 "nmp/ppc.nmp"
      	}

op add_ze_overflow ( rd : index, ra : REG_IND)
   syntax = format ( "addzeo r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010110010100", rd, ra.image )
   action = {

 		TMP_RES = ra + XER <CA_XER..CA_XER>;
			//if (XER<CA_XER..CA_XER> == 1 && ra == 0 && 0 == -1) then \
#line 1993 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 1993 "nmp/ppc.nmp"
	//else \
#line 1993 "nmp/ppc.nmp"
		if (XER<CA_XER..CA_XER> == 0 || (((ra>=0 && 0>=0) || (ra<0 && 0<0)) && TMP_RES!=0) ) then
#line 1993 "nmp/ppc.nmp"
				if (ra >= 0 && 0 >= 0) then
#line 1993 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 1993 "nmp/ppc.nmp"
	else
#line 1993 "nmp/ppc.nmp"
		if (ra<0 && 0<0) then
#line 1993 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1993 "nmp/ppc.nmp"
		else
#line 1993 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 1993 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 1993 "nmp/ppc.nmp"
			else
#line 1993 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 1993 "nmp/ppc.nmp"
			endif;
#line 1993 "nmp/ppc.nmp"
		endif;
#line 1993 "nmp/ppc.nmp"
	endif;
#line 1993 "nmp/ppc.nmp"
;
#line 1993 "nmp/ppc.nmp"
		else
#line 1993 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 1993 "nmp/ppc.nmp"
		endif;
#line 1993 "nmp/ppc.nmp"
	//endif; \
#line 1993 "nmp/ppc.nmp"
;
#line 1993 "nmp/ppc.nmp"
#line 1994 "nmp/ppc.nmp"
			if (ra >= 0 && 0 >= 0 && TMP_RES < 0) then
#line 1994 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 1994 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 1994 "nmp/ppc.nmp"
    else
#line 1994 "nmp/ppc.nmp"
		if (ra < 0 && 0 < 0 && TMP_RES >= 0) then
#line 1994 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 1994 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 1994 "nmp/ppc.nmp"
     	else
#line 1994 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 1994 "nmp/ppc.nmp"
		endif;
#line 1994 "nmp/ppc.nmp"
	endif;
#line 1994 "nmp/ppc.nmp"
	;
#line 1994 "nmp/ppc.nmp"
#line 1995 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

		}

op add_ze_overflow_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "addzeo. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010110010101", rd, ra.image )
   action = {

 		TMP_RES = ra + XER <CA_XER..CA_XER>;
			//if (XER<CA_XER..CA_XER> == 1 && ra == 0 && 0 == -1) then \
#line 2005 "nmp/ppc.nmp"
	//	XER <CA_XER..CA_XER> = 0; \
#line 2005 "nmp/ppc.nmp"
	//else \
#line 2005 "nmp/ppc.nmp"
		if (XER<CA_XER..CA_XER> == 0 || (((ra>=0 && 0>=0) || (ra<0 && 0<0)) && TMP_RES!=0) ) then
#line 2005 "nmp/ppc.nmp"
				if (ra >= 0 && 0 >= 0) then
#line 2005 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 0;
#line 2005 "nmp/ppc.nmp"
	else
#line 2005 "nmp/ppc.nmp"
		if (ra<0 && 0<0) then
#line 2005 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 2005 "nmp/ppc.nmp"
		else
#line 2005 "nmp/ppc.nmp"
			if (TMP_RES>=0) then
#line 2005 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 1;
#line 2005 "nmp/ppc.nmp"
			else
#line 2005 "nmp/ppc.nmp"
				XER <CA_XER..CA_XER> = 0;
#line 2005 "nmp/ppc.nmp"
			endif;
#line 2005 "nmp/ppc.nmp"
		endif;
#line 2005 "nmp/ppc.nmp"
	endif;
#line 2005 "nmp/ppc.nmp"
;
#line 2005 "nmp/ppc.nmp"
		else
#line 2005 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 1;
#line 2005 "nmp/ppc.nmp"
		endif;
#line 2005 "nmp/ppc.nmp"
	//endif; \
#line 2005 "nmp/ppc.nmp"
;
#line 2005 "nmp/ppc.nmp"
#line 2006 "nmp/ppc.nmp"
			if (ra >= 0 && 0 >= 0 && TMP_RES < 0) then
#line 2006 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2006 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 2006 "nmp/ppc.nmp"
    else
#line 2006 "nmp/ppc.nmp"
		if (ra < 0 && 0 < 0 && TMP_RES >= 0) then
#line 2006 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2006 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 2006 "nmp/ppc.nmp"
     	else
#line 2006 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2006 "nmp/ppc.nmp"
		endif;
#line 2006 "nmp/ppc.nmp"
	endif;
#line 2006 "nmp/ppc.nmp"
	;
#line 2006 "nmp/ppc.nmp"
#line 2007 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2009 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2009 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2009 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2009 "nmp/ppc.nmp"
;
#line 2009 "nmp/ppc.nmp"
#line 2010 "nmp/ppc.nmp"
		}

// Integer Subtract Instructions
op int_subtract (x: int_subtract_action)
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = ARITH

op int_subtract_action =   sub_from
                  | sub_imm_carry_rec
                  | sub_carry
                  | sub_extended
                  | sub_mone_extended
                  | sub_zero_extended

op sub_from =   sub
              | sub_cr_update
              | sub_overflow_enable
              | sub_crup_overen

// Subtract Instructions

op sub ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subf r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00001010000", rd, ra.image, rb.image )
   action = {

               GPR [ rd ] = ~ra + rb + 1;

            }

op sub_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subf. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00001010001", rd, ra.image, rb.image )
   action = {

		TMP_RES = ~ra + rb + 1;
	  	GPR [ rd ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2049 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2049 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2049 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2049 "nmp/ppc.nmp"
;
#line 2049 "nmp/ppc.nmp"
#line 2050 "nmp/ppc.nmp"
		}

op sub_overflow_enable ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfo r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10001010000", rd, ra.image, rb.image )
   action = {

      	TMP_RES = ~ra + rb + 1;

			if ra >= 0 then
#line 2059 "nmp/ppc.nmp"
		if  rb >= 0 then
#line 2059 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2059 "nmp/ppc.nmp"
		else
#line 2059 "nmp/ppc.nmp"
			if TMP_RES < 0 then
#line 2059 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2059 "nmp/ppc.nmp"
			else
#line 2059 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2059 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2059 "nmp/ppc.nmp"
			endif;
#line 2059 "nmp/ppc.nmp"
		endif;
#line 2059 "nmp/ppc.nmp"
	else
#line 2059 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2059 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2059 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2059 "nmp/ppc.nmp"
		else
#line 2059 "nmp/ppc.nmp"
			if  rb < 0 then
#line 2059 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2059 "nmp/ppc.nmp"
			else
#line 2059 "nmp/ppc.nmp"
				if TMP_RES < 0 then
#line 2059 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2059 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2059 "nmp/ppc.nmp"
				else
#line 2059 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2059 "nmp/ppc.nmp"
				endif;
#line 2059 "nmp/ppc.nmp"
			endif;
#line 2059 "nmp/ppc.nmp"
		endif;
#line 2059 "nmp/ppc.nmp"
	endif;
#line 2059 "nmp/ppc.nmp"
;
#line 2059 "nmp/ppc.nmp"
#line 2060 "nmp/ppc.nmp"
  		GPR[rd] = TMP_RES;
		}

op sub_crup_overen ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfo. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10001010001", rd, ra.image, rb.image )
   action = {

      	TMP_RES = ~ra + rb + 1;
			if ra >= 0 then
#line 2069 "nmp/ppc.nmp"
		if  rb >= 0 then
#line 2069 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2069 "nmp/ppc.nmp"
		else
#line 2069 "nmp/ppc.nmp"
			if TMP_RES < 0 then
#line 2069 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2069 "nmp/ppc.nmp"
			else
#line 2069 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2069 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2069 "nmp/ppc.nmp"
			endif;
#line 2069 "nmp/ppc.nmp"
		endif;
#line 2069 "nmp/ppc.nmp"
	else
#line 2069 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2069 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2069 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2069 "nmp/ppc.nmp"
		else
#line 2069 "nmp/ppc.nmp"
			if  rb < 0 then
#line 2069 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2069 "nmp/ppc.nmp"
			else
#line 2069 "nmp/ppc.nmp"
				if TMP_RES < 0 then
#line 2069 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2069 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2069 "nmp/ppc.nmp"
				else
#line 2069 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2069 "nmp/ppc.nmp"
				endif;
#line 2069 "nmp/ppc.nmp"
			endif;
#line 2069 "nmp/ppc.nmp"
		endif;
#line 2069 "nmp/ppc.nmp"
	endif;
#line 2069 "nmp/ppc.nmp"
;
#line 2069 "nmp/ppc.nmp"
#line 2070 "nmp/ppc.nmp"
		GPR[rd]=TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2071 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2071 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2071 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2071 "nmp/ppc.nmp"
;
#line 2071 "nmp/ppc.nmp"
#line 2072 "nmp/ppc.nmp"
		}

// Subtract Immediate Instruction

op sub_imm_carry_rec ( rd : index, ra : REG_IND, imm : IMM16 )
   syntax = format ( "subfic r%d,%s,%s", rd, ra.syntax, imm.syntax )
   image  = format ( "001000%5b%s%s", rd, ra.image, imm.image )
   action = {

		TMP_RES = ~ra + 1 + imm;
        	if (ra >= 0 && imm < 0) then
#line 2082 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2082 "nmp/ppc.nmp"
	else
#line 2082 "nmp/ppc.nmp"
		if (ra < 0 && imm >= 0) then
#line 2082 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2082 "nmp/ppc.nmp"
		else
#line 2082 "nmp/ppc.nmp"
			if 1 == 1 then
#line 2082 "nmp/ppc.nmp"
				if ra > imm then
#line 2082 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2082 "nmp/ppc.nmp"
				else
#line 2082 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2082 "nmp/ppc.nmp"
				endif;
#line 2082 "nmp/ppc.nmp"
			else
#line 2082 "nmp/ppc.nmp"
				if ra >= imm then
#line 2082 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2082 "nmp/ppc.nmp"
				else
#line 2082 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2082 "nmp/ppc.nmp"
				endif;
#line 2082 "nmp/ppc.nmp"
			endif;
#line 2082 "nmp/ppc.nmp"
		endif;
#line 2082 "nmp/ppc.nmp"
	endif;
#line 2082 "nmp/ppc.nmp"
;
#line 2082 "nmp/ppc.nmp"
#line 2083 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

    	}

// Subtract with carry Instructions

op sub_carry =   sub_carrying
               | sub_carry_cr_update
               | sub_carry_overflow
               | sub_carry_overflow_cr_update

op sub_carrying ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfc r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00000010000", rd, ra.image, rb.image )
   action = {

  		TMP_RES = ~ra + rb + 1;
			if (ra >= 0 && rb < 0) then
#line 2100 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2100 "nmp/ppc.nmp"
	else
#line 2100 "nmp/ppc.nmp"
		if (ra < 0 && rb >= 0) then
#line 2100 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2100 "nmp/ppc.nmp"
		else
#line 2100 "nmp/ppc.nmp"
			if 1 == 1 then
#line 2100 "nmp/ppc.nmp"
				if ra > rb then
#line 2100 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2100 "nmp/ppc.nmp"
				else
#line 2100 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2100 "nmp/ppc.nmp"
				endif;
#line 2100 "nmp/ppc.nmp"
			else
#line 2100 "nmp/ppc.nmp"
				if ra >= rb then
#line 2100 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2100 "nmp/ppc.nmp"
				else
#line 2100 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2100 "nmp/ppc.nmp"
				endif;
#line 2100 "nmp/ppc.nmp"
			endif;
#line 2100 "nmp/ppc.nmp"
		endif;
#line 2100 "nmp/ppc.nmp"
	endif;
#line 2100 "nmp/ppc.nmp"
;
#line 2100 "nmp/ppc.nmp"
#line 2101 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;
   		}

op sub_carry_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfc. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00000010001", rd, ra.image, rb.image )
   action = {

    	TMP_RES = ~ra + rb + 1;

			if (ra >= 0 && rb < 0) then
#line 2111 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2111 "nmp/ppc.nmp"
	else
#line 2111 "nmp/ppc.nmp"
		if (ra < 0 && rb >= 0) then
#line 2111 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2111 "nmp/ppc.nmp"
		else
#line 2111 "nmp/ppc.nmp"
			if 1 == 1 then
#line 2111 "nmp/ppc.nmp"
				if ra > rb then
#line 2111 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2111 "nmp/ppc.nmp"
				else
#line 2111 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2111 "nmp/ppc.nmp"
				endif;
#line 2111 "nmp/ppc.nmp"
			else
#line 2111 "nmp/ppc.nmp"
				if ra >= rb then
#line 2111 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2111 "nmp/ppc.nmp"
				else
#line 2111 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2111 "nmp/ppc.nmp"
				endif;
#line 2111 "nmp/ppc.nmp"
			endif;
#line 2111 "nmp/ppc.nmp"
		endif;
#line 2111 "nmp/ppc.nmp"
	endif;
#line 2111 "nmp/ppc.nmp"
;
#line 2111 "nmp/ppc.nmp"
#line 2112 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2113 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2113 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2113 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2113 "nmp/ppc.nmp"
;
#line 2113 "nmp/ppc.nmp"
#line 2114 "nmp/ppc.nmp"
     	}

op sub_carry_overflow ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfco r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10000010000", rd, ra.image, rb.image )
   action = {

    	TMP_RES = ~ra + rb + 1;

			if (ra >= 0 && rb < 0) then
#line 2123 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2123 "nmp/ppc.nmp"
	else
#line 2123 "nmp/ppc.nmp"
		if (ra < 0 && rb >= 0) then
#line 2123 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2123 "nmp/ppc.nmp"
		else
#line 2123 "nmp/ppc.nmp"
			if 1 == 1 then
#line 2123 "nmp/ppc.nmp"
				if ra > rb then
#line 2123 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2123 "nmp/ppc.nmp"
				else
#line 2123 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2123 "nmp/ppc.nmp"
				endif;
#line 2123 "nmp/ppc.nmp"
			else
#line 2123 "nmp/ppc.nmp"
				if ra >= rb then
#line 2123 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2123 "nmp/ppc.nmp"
				else
#line 2123 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2123 "nmp/ppc.nmp"
				endif;
#line 2123 "nmp/ppc.nmp"
			endif;
#line 2123 "nmp/ppc.nmp"
		endif;
#line 2123 "nmp/ppc.nmp"
	endif;
#line 2123 "nmp/ppc.nmp"
;
#line 2123 "nmp/ppc.nmp"
#line 2124 "nmp/ppc.nmp"
			if ra >= 0 then
#line 2124 "nmp/ppc.nmp"
		if rb >= 0 then
#line 2124 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2124 "nmp/ppc.nmp"
		else
#line 2124 "nmp/ppc.nmp"
			if TMP_RES < 0 then
#line 2124 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2124 "nmp/ppc.nmp"
			else
#line 2124 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2124 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2124 "nmp/ppc.nmp"
			endif;
#line 2124 "nmp/ppc.nmp"
		endif;
#line 2124 "nmp/ppc.nmp"
	else
#line 2124 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2124 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2124 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2124 "nmp/ppc.nmp"
		else
#line 2124 "nmp/ppc.nmp"
			if rb < 0 then
#line 2124 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2124 "nmp/ppc.nmp"
			else
#line 2124 "nmp/ppc.nmp"
				if TMP_RES < 0 then
#line 2124 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2124 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2124 "nmp/ppc.nmp"
				else
#line 2124 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2124 "nmp/ppc.nmp"
				endif;
#line 2124 "nmp/ppc.nmp"
			endif;
#line 2124 "nmp/ppc.nmp"
		endif;
#line 2124 "nmp/ppc.nmp"
	endif;
#line 2124 "nmp/ppc.nmp"
;
#line 2124 "nmp/ppc.nmp"
#line 2125 "nmp/ppc.nmp"

		GPR[rd] = TMP_RES;
		}

op sub_carry_overflow_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfco. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10000010001", rd, ra.image, rb.image )
   action = {

    	TMP_RES = ~ra + rb + 1;

			if (ra >= 0 && rb < 0) then
#line 2136 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2136 "nmp/ppc.nmp"
	else
#line 2136 "nmp/ppc.nmp"
		if (ra < 0 && rb >= 0) then
#line 2136 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2136 "nmp/ppc.nmp"
		else
#line 2136 "nmp/ppc.nmp"
			if 1 == 1 then
#line 2136 "nmp/ppc.nmp"
				if ra > rb then
#line 2136 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2136 "nmp/ppc.nmp"
				else
#line 2136 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2136 "nmp/ppc.nmp"
				endif;
#line 2136 "nmp/ppc.nmp"
			else
#line 2136 "nmp/ppc.nmp"
				if ra >= rb then
#line 2136 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2136 "nmp/ppc.nmp"
				else
#line 2136 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2136 "nmp/ppc.nmp"
				endif;
#line 2136 "nmp/ppc.nmp"
			endif;
#line 2136 "nmp/ppc.nmp"
		endif;
#line 2136 "nmp/ppc.nmp"
	endif;
#line 2136 "nmp/ppc.nmp"
;
#line 2136 "nmp/ppc.nmp"
#line 2137 "nmp/ppc.nmp"
			if ra >= 0 then
#line 2137 "nmp/ppc.nmp"
		if rb >= 0 then
#line 2137 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2137 "nmp/ppc.nmp"
		else
#line 2137 "nmp/ppc.nmp"
			if TMP_RES < 0 then
#line 2137 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2137 "nmp/ppc.nmp"
			else
#line 2137 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2137 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2137 "nmp/ppc.nmp"
			endif;
#line 2137 "nmp/ppc.nmp"
		endif;
#line 2137 "nmp/ppc.nmp"
	else
#line 2137 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2137 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2137 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2137 "nmp/ppc.nmp"
		else
#line 2137 "nmp/ppc.nmp"
			if rb < 0 then
#line 2137 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2137 "nmp/ppc.nmp"
			else
#line 2137 "nmp/ppc.nmp"
				if TMP_RES < 0 then
#line 2137 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2137 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2137 "nmp/ppc.nmp"
				else
#line 2137 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2137 "nmp/ppc.nmp"
				endif;
#line 2137 "nmp/ppc.nmp"
			endif;
#line 2137 "nmp/ppc.nmp"
		endif;
#line 2137 "nmp/ppc.nmp"
	endif;
#line 2137 "nmp/ppc.nmp"
;
#line 2137 "nmp/ppc.nmp"
#line 2138 "nmp/ppc.nmp"

		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2141 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2141 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2141 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2141 "nmp/ppc.nmp"
;
#line 2141 "nmp/ppc.nmp"
#line 2142 "nmp/ppc.nmp"
     	}

// Subtract extended Instructions

op sub_extended =   sub_extend
                  | sub_extend_cr_update
                  | sub_extend_overflow
                  | sub_extd_overflow_cr_upd

op sub_extend ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfe r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00100010000", rd, ra.image, rb.image )
   action = {

		TMP_RES = ~ra + rb + XER <CA_XER..CA_XER>;
			if (ra >= 0 && rb < 0) then
#line 2157 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2157 "nmp/ppc.nmp"
	else
#line 2157 "nmp/ppc.nmp"
		if (ra < 0 && rb >= 0) then
#line 2157 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2157 "nmp/ppc.nmp"
		else
#line 2157 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2157 "nmp/ppc.nmp"
				if ra > rb then
#line 2157 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2157 "nmp/ppc.nmp"
				else
#line 2157 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2157 "nmp/ppc.nmp"
				endif;
#line 2157 "nmp/ppc.nmp"
			else
#line 2157 "nmp/ppc.nmp"
				if ra >= rb then
#line 2157 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2157 "nmp/ppc.nmp"
				else
#line 2157 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2157 "nmp/ppc.nmp"
				endif;
#line 2157 "nmp/ppc.nmp"
			endif;
#line 2157 "nmp/ppc.nmp"
		endif;
#line 2157 "nmp/ppc.nmp"
	endif;
#line 2157 "nmp/ppc.nmp"
;
#line 2157 "nmp/ppc.nmp"
#line 2158 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

     	}

op sub_extend_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfe. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00100010001", rd, ra.image, rb.image )
   action = {

		TMP_RES = ~ra + rb + XER <CA_XER..CA_XER>;
			if (ra >= 0 && rb < 0) then
#line 2168 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2168 "nmp/ppc.nmp"
	else
#line 2168 "nmp/ppc.nmp"
		if (ra < 0 && rb >= 0) then
#line 2168 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2168 "nmp/ppc.nmp"
		else
#line 2168 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2168 "nmp/ppc.nmp"
				if ra > rb then
#line 2168 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2168 "nmp/ppc.nmp"
				else
#line 2168 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2168 "nmp/ppc.nmp"
				endif;
#line 2168 "nmp/ppc.nmp"
			else
#line 2168 "nmp/ppc.nmp"
				if ra >= rb then
#line 2168 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2168 "nmp/ppc.nmp"
				else
#line 2168 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2168 "nmp/ppc.nmp"
				endif;
#line 2168 "nmp/ppc.nmp"
			endif;
#line 2168 "nmp/ppc.nmp"
		endif;
#line 2168 "nmp/ppc.nmp"
	endif;
#line 2168 "nmp/ppc.nmp"
;
#line 2168 "nmp/ppc.nmp"
#line 2169 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2171 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2171 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2171 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2171 "nmp/ppc.nmp"
;      	}
#line 2171 "nmp/ppc.nmp"
#line 2172 "nmp/ppc.nmp"

op sub_extend_overflow ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfeo r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10100010000", rd, ra.image, rb.image )
   action = {

		TMP_RES = ~ra + rb + XER <CA_XER..CA_XER>;
			if (ra >= 0 && rb < 0) then
#line 2179 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2179 "nmp/ppc.nmp"
	else
#line 2179 "nmp/ppc.nmp"
		if (ra < 0 && rb >= 0) then
#line 2179 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2179 "nmp/ppc.nmp"
		else
#line 2179 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2179 "nmp/ppc.nmp"
				if ra > rb then
#line 2179 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2179 "nmp/ppc.nmp"
				else
#line 2179 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2179 "nmp/ppc.nmp"
				endif;
#line 2179 "nmp/ppc.nmp"
			else
#line 2179 "nmp/ppc.nmp"
				if ra >= rb then
#line 2179 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2179 "nmp/ppc.nmp"
				else
#line 2179 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2179 "nmp/ppc.nmp"
				endif;
#line 2179 "nmp/ppc.nmp"
			endif;
#line 2179 "nmp/ppc.nmp"
		endif;
#line 2179 "nmp/ppc.nmp"
	endif;
#line 2179 "nmp/ppc.nmp"
;
#line 2179 "nmp/ppc.nmp"
#line 2180 "nmp/ppc.nmp"
			if TMP_RES==0 then
#line 2180 "nmp/ppc.nmp"
			if (~ra >= 0 && rb >= 0 && XER<CA_XER..CA_XER> < 0) then
#line 2180 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2180 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 2180 "nmp/ppc.nmp"
    else
#line 2180 "nmp/ppc.nmp"
		if (~ra < 0 && rb < 0 && XER<CA_XER..CA_XER> >= 0) then
#line 2180 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2180 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 2180 "nmp/ppc.nmp"
     	else
#line 2180 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2180 "nmp/ppc.nmp"
		endif;
#line 2180 "nmp/ppc.nmp"
	endif;
#line 2180 "nmp/ppc.nmp"
	;
#line 2180 "nmp/ppc.nmp"
	else
#line 2180 "nmp/ppc.nmp"
			if ra >= 0 then
#line 2180 "nmp/ppc.nmp"
		if rb >= 0 then
#line 2180 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2180 "nmp/ppc.nmp"
		else
#line 2180 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> < 0 then
#line 2180 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2180 "nmp/ppc.nmp"
			else
#line 2180 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2180 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2180 "nmp/ppc.nmp"
			endif;
#line 2180 "nmp/ppc.nmp"
		endif;
#line 2180 "nmp/ppc.nmp"
	else
#line 2180 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2180 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2180 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2180 "nmp/ppc.nmp"
		else
#line 2180 "nmp/ppc.nmp"
			if rb < 0 then
#line 2180 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2180 "nmp/ppc.nmp"
			else
#line 2180 "nmp/ppc.nmp"
				if XER<CA_XER..CA_XER> < 0 then
#line 2180 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2180 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2180 "nmp/ppc.nmp"
				else
#line 2180 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2180 "nmp/ppc.nmp"
				endif;
#line 2180 "nmp/ppc.nmp"
			endif;
#line 2180 "nmp/ppc.nmp"
		endif;
#line 2180 "nmp/ppc.nmp"
	endif;
#line 2180 "nmp/ppc.nmp"
;
#line 2180 "nmp/ppc.nmp"
	endif;
#line 2180 "nmp/ppc.nmp"
;
#line 2180 "nmp/ppc.nmp"
#line 2181 "nmp/ppc.nmp"
    	GPR[rd] = TMP_RES;

		}

op sub_extd_overflow_cr_upd ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "subfeo. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10100010001", rd, ra.image, rb.image )
   action = {

		TMP_RES = ~ra + rb + XER <CA_XER..CA_XER>;
			if (ra >= 0 && rb < 0) then
#line 2191 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2191 "nmp/ppc.nmp"
	else
#line 2191 "nmp/ppc.nmp"
		if (ra < 0 && rb >= 0) then
#line 2191 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2191 "nmp/ppc.nmp"
		else
#line 2191 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2191 "nmp/ppc.nmp"
				if ra > rb then
#line 2191 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2191 "nmp/ppc.nmp"
				else
#line 2191 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2191 "nmp/ppc.nmp"
				endif;
#line 2191 "nmp/ppc.nmp"
			else
#line 2191 "nmp/ppc.nmp"
				if ra >= rb then
#line 2191 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2191 "nmp/ppc.nmp"
				else
#line 2191 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2191 "nmp/ppc.nmp"
				endif;
#line 2191 "nmp/ppc.nmp"
			endif;
#line 2191 "nmp/ppc.nmp"
		endif;
#line 2191 "nmp/ppc.nmp"
	endif;
#line 2191 "nmp/ppc.nmp"
;
#line 2191 "nmp/ppc.nmp"
#line 2192 "nmp/ppc.nmp"
			if TMP_RES==0 then
#line 2192 "nmp/ppc.nmp"
			if (~ra >= 0 && rb >= 0 && XER<CA_XER..CA_XER> < 0) then
#line 2192 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2192 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 2192 "nmp/ppc.nmp"
    else
#line 2192 "nmp/ppc.nmp"
		if (~ra < 0 && rb < 0 && XER<CA_XER..CA_XER> >= 0) then
#line 2192 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2192 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 2192 "nmp/ppc.nmp"
     	else
#line 2192 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2192 "nmp/ppc.nmp"
		endif;
#line 2192 "nmp/ppc.nmp"
	endif;
#line 2192 "nmp/ppc.nmp"
	;
#line 2192 "nmp/ppc.nmp"
	else
#line 2192 "nmp/ppc.nmp"
			if ra >= 0 then
#line 2192 "nmp/ppc.nmp"
		if rb >= 0 then
#line 2192 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2192 "nmp/ppc.nmp"
		else
#line 2192 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> < 0 then
#line 2192 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2192 "nmp/ppc.nmp"
			else
#line 2192 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2192 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2192 "nmp/ppc.nmp"
			endif;
#line 2192 "nmp/ppc.nmp"
		endif;
#line 2192 "nmp/ppc.nmp"
	else
#line 2192 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2192 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2192 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2192 "nmp/ppc.nmp"
		else
#line 2192 "nmp/ppc.nmp"
			if rb < 0 then
#line 2192 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2192 "nmp/ppc.nmp"
			else
#line 2192 "nmp/ppc.nmp"
				if XER<CA_XER..CA_XER> < 0 then
#line 2192 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2192 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2192 "nmp/ppc.nmp"
				else
#line 2192 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2192 "nmp/ppc.nmp"
				endif;
#line 2192 "nmp/ppc.nmp"
			endif;
#line 2192 "nmp/ppc.nmp"
		endif;
#line 2192 "nmp/ppc.nmp"
	endif;
#line 2192 "nmp/ppc.nmp"
;
#line 2192 "nmp/ppc.nmp"
	endif;
#line 2192 "nmp/ppc.nmp"
;
#line 2192 "nmp/ppc.nmp"
#line 2193 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2195 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2195 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2195 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2195 "nmp/ppc.nmp"
;
#line 2195 "nmp/ppc.nmp"
#line 2196 "nmp/ppc.nmp"
		}

// Subtract minus one Instructions

op sub_mone_extended =   sub_me
                       | sub_me_cr_update
                       | sub_me_overflow
                       | sub_me_overflow_cr_update

op sub_me ( rd : index, ra : REG_IND)
   syntax = format ( "subfme r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000111010000", rd, ra.image )
   action = {

     	TMP_RES = ~ra + XER <CA_XER..CA_XER> + 0xffffffff;
			if (ra >= 0 && -1 < 0) then
#line 2211 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2211 "nmp/ppc.nmp"
	else
#line 2211 "nmp/ppc.nmp"
		if (ra < 0 && -1 >= 0) then
#line 2211 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2211 "nmp/ppc.nmp"
		else
#line 2211 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2211 "nmp/ppc.nmp"
				if ra > -1 then
#line 2211 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2211 "nmp/ppc.nmp"
				else
#line 2211 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2211 "nmp/ppc.nmp"
				endif;
#line 2211 "nmp/ppc.nmp"
			else
#line 2211 "nmp/ppc.nmp"
				if ra >= -1 then
#line 2211 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2211 "nmp/ppc.nmp"
				else
#line 2211 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2211 "nmp/ppc.nmp"
				endif;
#line 2211 "nmp/ppc.nmp"
			endif;
#line 2211 "nmp/ppc.nmp"
		endif;
#line 2211 "nmp/ppc.nmp"
	endif;
#line 2211 "nmp/ppc.nmp"
;
#line 2211 "nmp/ppc.nmp"
#line 2212 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;
       	}

op sub_me_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "subfme. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000111010001", rd, ra.image )
   action = {

     	TMP_RES = ~ra + XER <CA_XER..CA_XER> + 0xffffffff;
			if (ra >= 0 && -1 < 0) then
#line 2221 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2221 "nmp/ppc.nmp"
	else
#line 2221 "nmp/ppc.nmp"
		if (ra < 0 && -1 >= 0) then
#line 2221 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2221 "nmp/ppc.nmp"
		else
#line 2221 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2221 "nmp/ppc.nmp"
				if ra > -1 then
#line 2221 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2221 "nmp/ppc.nmp"
				else
#line 2221 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2221 "nmp/ppc.nmp"
				endif;
#line 2221 "nmp/ppc.nmp"
			else
#line 2221 "nmp/ppc.nmp"
				if ra >= -1 then
#line 2221 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2221 "nmp/ppc.nmp"
				else
#line 2221 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2221 "nmp/ppc.nmp"
				endif;
#line 2221 "nmp/ppc.nmp"
			endif;
#line 2221 "nmp/ppc.nmp"
		endif;
#line 2221 "nmp/ppc.nmp"
	endif;
#line 2221 "nmp/ppc.nmp"
;
#line 2221 "nmp/ppc.nmp"
#line 2222 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2224 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2224 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2224 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2224 "nmp/ppc.nmp"
;
#line 2224 "nmp/ppc.nmp"
#line 2225 "nmp/ppc.nmp"
       	}

op sub_me_overflow ( rd : index, ra : REG_IND)
   syntax = format ( "subfmeo r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010111010000", rd, ra.image )
   action = {
     	TMP_RES = ~ra + XER <CA_XER..CA_XER> + 0xffffffff;
			if (ra >= 0 && -1 < 0) then
#line 2232 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2232 "nmp/ppc.nmp"
	else
#line 2232 "nmp/ppc.nmp"
		if (ra < 0 && -1 >= 0) then
#line 2232 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2232 "nmp/ppc.nmp"
		else
#line 2232 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2232 "nmp/ppc.nmp"
				if ra > -1 then
#line 2232 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2232 "nmp/ppc.nmp"
				else
#line 2232 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2232 "nmp/ppc.nmp"
				endif;
#line 2232 "nmp/ppc.nmp"
			else
#line 2232 "nmp/ppc.nmp"
				if ra >= -1 then
#line 2232 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2232 "nmp/ppc.nmp"
				else
#line 2232 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2232 "nmp/ppc.nmp"
				endif;
#line 2232 "nmp/ppc.nmp"
			endif;
#line 2232 "nmp/ppc.nmp"
		endif;
#line 2232 "nmp/ppc.nmp"
	endif;
#line 2232 "nmp/ppc.nmp"
;
#line 2232 "nmp/ppc.nmp"
#line 2233 "nmp/ppc.nmp"
			if TMP_RES==0 then
#line 2233 "nmp/ppc.nmp"
			if (~ra >= 0 && -1 >= 0 && XER<CA_XER..CA_XER> < 0) then
#line 2233 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2233 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 2233 "nmp/ppc.nmp"
    else
#line 2233 "nmp/ppc.nmp"
		if (~ra < 0 && -1 < 0 && XER<CA_XER..CA_XER> >= 0) then
#line 2233 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2233 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 2233 "nmp/ppc.nmp"
     	else
#line 2233 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2233 "nmp/ppc.nmp"
		endif;
#line 2233 "nmp/ppc.nmp"
	endif;
#line 2233 "nmp/ppc.nmp"
	;
#line 2233 "nmp/ppc.nmp"
	else
#line 2233 "nmp/ppc.nmp"
			if ra >= 0 then
#line 2233 "nmp/ppc.nmp"
		if -1 >= 0 then
#line 2233 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2233 "nmp/ppc.nmp"
		else
#line 2233 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> < 0 then
#line 2233 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2233 "nmp/ppc.nmp"
			else
#line 2233 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2233 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2233 "nmp/ppc.nmp"
			endif;
#line 2233 "nmp/ppc.nmp"
		endif;
#line 2233 "nmp/ppc.nmp"
	else
#line 2233 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2233 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2233 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2233 "nmp/ppc.nmp"
		else
#line 2233 "nmp/ppc.nmp"
			if -1 < 0 then
#line 2233 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2233 "nmp/ppc.nmp"
			else
#line 2233 "nmp/ppc.nmp"
				if XER<CA_XER..CA_XER> < 0 then
#line 2233 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2233 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2233 "nmp/ppc.nmp"
				else
#line 2233 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2233 "nmp/ppc.nmp"
				endif;
#line 2233 "nmp/ppc.nmp"
			endif;
#line 2233 "nmp/ppc.nmp"
		endif;
#line 2233 "nmp/ppc.nmp"
	endif;
#line 2233 "nmp/ppc.nmp"
;
#line 2233 "nmp/ppc.nmp"
	endif;
#line 2233 "nmp/ppc.nmp"
;
#line 2233 "nmp/ppc.nmp"
#line 2234 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

		}

op sub_me_overflow_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "subfmeo. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010111010001", rd, ra.image )
   action = {

     	TMP_RES = ~ra + XER <CA_XER..CA_XER> + 0xffffffff;
			if (ra >= 0 && -1 < 0) then
#line 2244 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2244 "nmp/ppc.nmp"
	else
#line 2244 "nmp/ppc.nmp"
		if (ra < 0 && -1 >= 0) then
#line 2244 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2244 "nmp/ppc.nmp"
		else
#line 2244 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2244 "nmp/ppc.nmp"
				if ra > -1 then
#line 2244 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2244 "nmp/ppc.nmp"
				else
#line 2244 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2244 "nmp/ppc.nmp"
				endif;
#line 2244 "nmp/ppc.nmp"
			else
#line 2244 "nmp/ppc.nmp"
				if ra >= -1 then
#line 2244 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2244 "nmp/ppc.nmp"
				else
#line 2244 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2244 "nmp/ppc.nmp"
				endif;
#line 2244 "nmp/ppc.nmp"
			endif;
#line 2244 "nmp/ppc.nmp"
		endif;
#line 2244 "nmp/ppc.nmp"
	endif;
#line 2244 "nmp/ppc.nmp"
;
#line 2244 "nmp/ppc.nmp"
#line 2245 "nmp/ppc.nmp"
			if TMP_RES==0 then
#line 2245 "nmp/ppc.nmp"
			if (~ra >= 0 && -1 >= 0 && XER<CA_XER..CA_XER> < 0) then
#line 2245 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2245 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 2245 "nmp/ppc.nmp"
    else
#line 2245 "nmp/ppc.nmp"
		if (~ra < 0 && -1 < 0 && XER<CA_XER..CA_XER> >= 0) then
#line 2245 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2245 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 2245 "nmp/ppc.nmp"
     	else
#line 2245 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2245 "nmp/ppc.nmp"
		endif;
#line 2245 "nmp/ppc.nmp"
	endif;
#line 2245 "nmp/ppc.nmp"
	;
#line 2245 "nmp/ppc.nmp"
	else
#line 2245 "nmp/ppc.nmp"
			if ra >= 0 then
#line 2245 "nmp/ppc.nmp"
		if -1 >= 0 then
#line 2245 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2245 "nmp/ppc.nmp"
		else
#line 2245 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> < 0 then
#line 2245 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2245 "nmp/ppc.nmp"
			else
#line 2245 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2245 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2245 "nmp/ppc.nmp"
			endif;
#line 2245 "nmp/ppc.nmp"
		endif;
#line 2245 "nmp/ppc.nmp"
	else
#line 2245 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2245 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2245 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2245 "nmp/ppc.nmp"
		else
#line 2245 "nmp/ppc.nmp"
			if -1 < 0 then
#line 2245 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2245 "nmp/ppc.nmp"
			else
#line 2245 "nmp/ppc.nmp"
				if XER<CA_XER..CA_XER> < 0 then
#line 2245 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2245 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2245 "nmp/ppc.nmp"
				else
#line 2245 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2245 "nmp/ppc.nmp"
				endif;
#line 2245 "nmp/ppc.nmp"
			endif;
#line 2245 "nmp/ppc.nmp"
		endif;
#line 2245 "nmp/ppc.nmp"
	endif;
#line 2245 "nmp/ppc.nmp"
;
#line 2245 "nmp/ppc.nmp"
	endif;
#line 2245 "nmp/ppc.nmp"
;
#line 2245 "nmp/ppc.nmp"
#line 2246 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2248 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2248 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2248 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2248 "nmp/ppc.nmp"
;
#line 2248 "nmp/ppc.nmp"
#line 2249 "nmp/ppc.nmp"
       	}

// Subtract zero extended Instructions

op sub_zero_extended =   sub_ze
                       | sub_ze_cr_update
                       | sub_ze_overflow
                       | sub_ze_overflow_cr_update

op sub_ze ( rd : index, ra : REG_IND)
   syntax = format ( "subfze r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000110010000", rd, ra.image )
   action = {

		TMP_RES = ~ra + XER <CA_XER..CA_XER>;
			if (ra >= 0 && 0 < 0) then
#line 2264 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2264 "nmp/ppc.nmp"
	else
#line 2264 "nmp/ppc.nmp"
		if (ra < 0 && 0 >= 0) then
#line 2264 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2264 "nmp/ppc.nmp"
		else
#line 2264 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2264 "nmp/ppc.nmp"
				if ra > 0 then
#line 2264 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2264 "nmp/ppc.nmp"
				else
#line 2264 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2264 "nmp/ppc.nmp"
				endif;
#line 2264 "nmp/ppc.nmp"
			else
#line 2264 "nmp/ppc.nmp"
				if ra >= 0 then
#line 2264 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2264 "nmp/ppc.nmp"
				else
#line 2264 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2264 "nmp/ppc.nmp"
				endif;
#line 2264 "nmp/ppc.nmp"
			endif;
#line 2264 "nmp/ppc.nmp"
		endif;
#line 2264 "nmp/ppc.nmp"
	endif;
#line 2264 "nmp/ppc.nmp"
;
#line 2264 "nmp/ppc.nmp"
#line 2265 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;
		}

op sub_ze_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "subfze. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000110010001", rd, ra.image )
   action = {

		TMP_RES = ~ra + XER <CA_XER..CA_XER>;
			if (ra >= 0 && 0 < 0) then
#line 2274 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2274 "nmp/ppc.nmp"
	else
#line 2274 "nmp/ppc.nmp"
		if (ra < 0 && 0 >= 0) then
#line 2274 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2274 "nmp/ppc.nmp"
		else
#line 2274 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2274 "nmp/ppc.nmp"
				if ra > 0 then
#line 2274 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2274 "nmp/ppc.nmp"
				else
#line 2274 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2274 "nmp/ppc.nmp"
				endif;
#line 2274 "nmp/ppc.nmp"
			else
#line 2274 "nmp/ppc.nmp"
				if ra >= 0 then
#line 2274 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2274 "nmp/ppc.nmp"
				else
#line 2274 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2274 "nmp/ppc.nmp"
				endif;
#line 2274 "nmp/ppc.nmp"
			endif;
#line 2274 "nmp/ppc.nmp"
		endif;
#line 2274 "nmp/ppc.nmp"
	endif;
#line 2274 "nmp/ppc.nmp"
;
#line 2274 "nmp/ppc.nmp"
#line 2275 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2277 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2277 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2277 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2277 "nmp/ppc.nmp"
;
#line 2277 "nmp/ppc.nmp"
#line 2278 "nmp/ppc.nmp"
       	}

op sub_ze_overflow ( rd : index, ra : REG_IND)
   syntax = format ( "subfzeo r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010110010000", rd, ra.image )
   action = {

		TMP_RES = ~ra + XER <CA_XER..CA_XER>;
			if (ra >= 0 && 0 < 0) then
#line 2286 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2286 "nmp/ppc.nmp"
	else
#line 2286 "nmp/ppc.nmp"
		if (ra < 0 && 0 >= 0) then
#line 2286 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2286 "nmp/ppc.nmp"
		else
#line 2286 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2286 "nmp/ppc.nmp"
				if ra > 0 then
#line 2286 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2286 "nmp/ppc.nmp"
				else
#line 2286 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2286 "nmp/ppc.nmp"
				endif;
#line 2286 "nmp/ppc.nmp"
			else
#line 2286 "nmp/ppc.nmp"
				if ra >= 0 then
#line 2286 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2286 "nmp/ppc.nmp"
				else
#line 2286 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2286 "nmp/ppc.nmp"
				endif;
#line 2286 "nmp/ppc.nmp"
			endif;
#line 2286 "nmp/ppc.nmp"
		endif;
#line 2286 "nmp/ppc.nmp"
	endif;
#line 2286 "nmp/ppc.nmp"
;
#line 2286 "nmp/ppc.nmp"
#line 2287 "nmp/ppc.nmp"
			if TMP_RES==0 then
#line 2287 "nmp/ppc.nmp"
			if (~ra >= 0 && 0 >= 0 && XER<CA_XER..CA_XER> < 0) then
#line 2287 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2287 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 2287 "nmp/ppc.nmp"
    else
#line 2287 "nmp/ppc.nmp"
		if (~ra < 0 && 0 < 0 && XER<CA_XER..CA_XER> >= 0) then
#line 2287 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2287 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 2287 "nmp/ppc.nmp"
     	else
#line 2287 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2287 "nmp/ppc.nmp"
		endif;
#line 2287 "nmp/ppc.nmp"
	endif;
#line 2287 "nmp/ppc.nmp"
	;
#line 2287 "nmp/ppc.nmp"
	else
#line 2287 "nmp/ppc.nmp"
			if ra >= 0 then
#line 2287 "nmp/ppc.nmp"
		if 0 >= 0 then
#line 2287 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2287 "nmp/ppc.nmp"
		else
#line 2287 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> < 0 then
#line 2287 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2287 "nmp/ppc.nmp"
			else
#line 2287 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2287 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2287 "nmp/ppc.nmp"
			endif;
#line 2287 "nmp/ppc.nmp"
		endif;
#line 2287 "nmp/ppc.nmp"
	else
#line 2287 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2287 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2287 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2287 "nmp/ppc.nmp"
		else
#line 2287 "nmp/ppc.nmp"
			if 0 < 0 then
#line 2287 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2287 "nmp/ppc.nmp"
			else
#line 2287 "nmp/ppc.nmp"
				if XER<CA_XER..CA_XER> < 0 then
#line 2287 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2287 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2287 "nmp/ppc.nmp"
				else
#line 2287 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2287 "nmp/ppc.nmp"
				endif;
#line 2287 "nmp/ppc.nmp"
			endif;
#line 2287 "nmp/ppc.nmp"
		endif;
#line 2287 "nmp/ppc.nmp"
	endif;
#line 2287 "nmp/ppc.nmp"
;
#line 2287 "nmp/ppc.nmp"
	endif;
#line 2287 "nmp/ppc.nmp"
;
#line 2287 "nmp/ppc.nmp"
#line 2288 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

		}

op sub_ze_overflow_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "subfzeo. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010110010001", rd, ra.image )
   action = {
		TMP_RES = ~ra + XER <CA_XER..CA_XER>;
			if (ra >= 0 && 0 < 0) then
#line 2297 "nmp/ppc.nmp"
		XER <CA_XER..CA_XER> = 1;
#line 2297 "nmp/ppc.nmp"
	else
#line 2297 "nmp/ppc.nmp"
		if (ra < 0 && 0 >= 0) then
#line 2297 "nmp/ppc.nmp"
			XER <CA_XER..CA_XER> = 0;
#line 2297 "nmp/ppc.nmp"
		else
#line 2297 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> == 1 then
#line 2297 "nmp/ppc.nmp"
				if ra > 0 then
#line 2297 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2297 "nmp/ppc.nmp"
				else
#line 2297 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2297 "nmp/ppc.nmp"
				endif;
#line 2297 "nmp/ppc.nmp"
			else
#line 2297 "nmp/ppc.nmp"
				if ra >= 0 then
#line 2297 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 0;
#line 2297 "nmp/ppc.nmp"
				else
#line 2297 "nmp/ppc.nmp"
					XER <CA_XER..CA_XER> = 1;
#line 2297 "nmp/ppc.nmp"
				endif;
#line 2297 "nmp/ppc.nmp"
			endif;
#line 2297 "nmp/ppc.nmp"
		endif;
#line 2297 "nmp/ppc.nmp"
	endif;
#line 2297 "nmp/ppc.nmp"
;
#line 2297 "nmp/ppc.nmp"
#line 2298 "nmp/ppc.nmp"
			if TMP_RES==0 then
#line 2298 "nmp/ppc.nmp"
			if (~ra >= 0 && 0 >= 0 && XER<CA_XER..CA_XER> < 0) then
#line 2298 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2298 "nmp/ppc.nmp"
      	XER <SO_XER..SO_XER> = 1;
#line 2298 "nmp/ppc.nmp"
    else
#line 2298 "nmp/ppc.nmp"
		if (~ra < 0 && 0 < 0 && XER<CA_XER..CA_XER> >= 0) then
#line 2298 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2298 "nmp/ppc.nmp"
          	XER <SO_XER..SO_XER> = 1;
#line 2298 "nmp/ppc.nmp"
     	else
#line 2298 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2298 "nmp/ppc.nmp"
		endif;
#line 2298 "nmp/ppc.nmp"
	endif;
#line 2298 "nmp/ppc.nmp"
	;
#line 2298 "nmp/ppc.nmp"
	else
#line 2298 "nmp/ppc.nmp"
			if ra >= 0 then
#line 2298 "nmp/ppc.nmp"
		if 0 >= 0 then
#line 2298 "nmp/ppc.nmp"
          	XER <OV_XER..OV_XER> = 0;
#line 2298 "nmp/ppc.nmp"
		else
#line 2298 "nmp/ppc.nmp"
			if XER<CA_XER..CA_XER> < 0 then
#line 2298 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2298 "nmp/ppc.nmp"
			else
#line 2298 "nmp/ppc.nmp"
				XER <OV_XER..OV_XER> = 1;
#line 2298 "nmp/ppc.nmp"
	    	  	XER <SO_XER..SO_XER> = 1;
#line 2298 "nmp/ppc.nmp"
			endif;
#line 2298 "nmp/ppc.nmp"
		endif;
#line 2298 "nmp/ppc.nmp"
	else
#line 2298 "nmp/ppc.nmp"
		if ra == 0x80000000 then
#line 2298 "nmp/ppc.nmp"
			XER <OV_XER..OV_XER> = 1;
#line 2298 "nmp/ppc.nmp"
    	  	XER <SO_XER..SO_XER> = 1;
#line 2298 "nmp/ppc.nmp"
		else
#line 2298 "nmp/ppc.nmp"
			if 0 < 0 then
#line 2298 "nmp/ppc.nmp"
	          	XER <OV_XER..OV_XER> = 0;
#line 2298 "nmp/ppc.nmp"
			else
#line 2298 "nmp/ppc.nmp"
				if XER<CA_XER..CA_XER> < 0 then
#line 2298 "nmp/ppc.nmp"
					XER <OV_XER..OV_XER> = 1;
#line 2298 "nmp/ppc.nmp"
      				XER <SO_XER..SO_XER> = 1;
#line 2298 "nmp/ppc.nmp"
				else
#line 2298 "nmp/ppc.nmp"
		          	XER <OV_XER..OV_XER> = 0;
#line 2298 "nmp/ppc.nmp"
				endif;
#line 2298 "nmp/ppc.nmp"
			endif;
#line 2298 "nmp/ppc.nmp"
		endif;
#line 2298 "nmp/ppc.nmp"
	endif;
#line 2298 "nmp/ppc.nmp"
;
#line 2298 "nmp/ppc.nmp"
	endif;
#line 2298 "nmp/ppc.nmp"
;
#line 2298 "nmp/ppc.nmp"
#line 2299 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2301 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2301 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2301 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2301 "nmp/ppc.nmp"
;
#line 2301 "nmp/ppc.nmp"
#line 2302 "nmp/ppc.nmp"
  		}

// Integer Multiply Instructions
op int_multiply ( x : int_multiply_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = MULDIV

op int_multiply_action =   mult_low
                  | mult_low_imm
                  | mult_high
                  | mult_high_unsig

// Multiply Low Instructions

op mult_low =   mult_lw
              | mult_lw_cr_update
              | mult_lw_overflow
              | mult_lw_overflow_cr_upd

op mult_lw ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "mullw r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00111010110", rd, ra.image, rb.image )
   action = {

		GPR [ rd ] = ra * rb;

       	}

op mult_lw_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "mullw. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00111010111", rd, ra.image, rb.image )
   action = {

		 TMP_RES = ra * rb;
		 GPR [ rd ] = TMP_RES ;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2339 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2339 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2339 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2339 "nmp/ppc.nmp"
;
#line 2339 "nmp/ppc.nmp"
#line 2340 "nmp/ppc.nmp"
        }

op mult_lw_overflow ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "mullwo r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10111010110", rd, ra.image, rb.image )
   action = {

     	TMP_RES = ra * rb;
			TMP_M_OP1_H0 = ra;
#line 2348 "nmp/ppc.nmp"
	TMP_M_OP2_H0 =  rb;
#line 2348 "nmp/ppc.nmp"
	TMP_M_RES_H0 = TMP_RES ;
#line 2348 "nmp/ppc.nmp"

#line 2348 "nmp/ppc.nmp"
	if ra < 0 then
#line 2348 "nmp/ppc.nmp"
		TMP_M_OP1_H1 = 0xffffffff;
#line 2348 "nmp/ppc.nmp"
	else
#line 2348 "nmp/ppc.nmp"
		TMP_M_OP1_H1 = 0;
#line 2348 "nmp/ppc.nmp"
	endif;
#line 2348 "nmp/ppc.nmp"
	if  rb < 0 then
#line 2348 "nmp/ppc.nmp"
		TMP_M_OP2_H1 = 0xffffffff;
#line 2348 "nmp/ppc.nmp"
	else
#line 2348 "nmp/ppc.nmp"
		TMP_M_OP2_H1 = 0;
#line 2348 "nmp/ppc.nmp"
	endif;
#line 2348 "nmp/ppc.nmp"
	if TMP_RES  < 0 then
#line 2348 "nmp/ppc.nmp"
		TMP_M_RES_H1 = 0xffffffff;
#line 2348 "nmp/ppc.nmp"
	else
#line 2348 "nmp/ppc.nmp"
		TMP_M_RES_H1 = 0;
#line 2348 "nmp/ppc.nmp"
	endif;
#line 2348 "nmp/ppc.nmp"

#line 2348 "nmp/ppc.nmp"
	if TMP_M_OP1*TMP_M_OP2 != TMP_M_RES then
#line 2348 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2348 "nmp/ppc.nmp"
    	XER <SO_XER..SO_XER> = 1;
#line 2348 "nmp/ppc.nmp"
	else
#line 2348 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 0;
#line 2348 "nmp/ppc.nmp"
	endif;
#line 2348 "nmp/ppc.nmp"
;
#line 2348 "nmp/ppc.nmp"
#line 2349 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

		}

op mult_lw_overflow_cr_upd ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "mullwo. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10111010111", rd, ra.image, rb.image )
   action = {

     	TMP_RES = ra * rb;
			TMP_M_OP1_H0 = ra;
#line 2359 "nmp/ppc.nmp"
	TMP_M_OP2_H0 =  rb;
#line 2359 "nmp/ppc.nmp"
	TMP_M_RES_H0 = TMP_RES ;
#line 2359 "nmp/ppc.nmp"

#line 2359 "nmp/ppc.nmp"
	if ra < 0 then
#line 2359 "nmp/ppc.nmp"
		TMP_M_OP1_H1 = 0xffffffff;
#line 2359 "nmp/ppc.nmp"
	else
#line 2359 "nmp/ppc.nmp"
		TMP_M_OP1_H1 = 0;
#line 2359 "nmp/ppc.nmp"
	endif;
#line 2359 "nmp/ppc.nmp"
	if  rb < 0 then
#line 2359 "nmp/ppc.nmp"
		TMP_M_OP2_H1 = 0xffffffff;
#line 2359 "nmp/ppc.nmp"
	else
#line 2359 "nmp/ppc.nmp"
		TMP_M_OP2_H1 = 0;
#line 2359 "nmp/ppc.nmp"
	endif;
#line 2359 "nmp/ppc.nmp"
	if TMP_RES  < 0 then
#line 2359 "nmp/ppc.nmp"
		TMP_M_RES_H1 = 0xffffffff;
#line 2359 "nmp/ppc.nmp"
	else
#line 2359 "nmp/ppc.nmp"
		TMP_M_RES_H1 = 0;
#line 2359 "nmp/ppc.nmp"
	endif;
#line 2359 "nmp/ppc.nmp"

#line 2359 "nmp/ppc.nmp"
	if TMP_M_OP1*TMP_M_OP2 != TMP_M_RES then
#line 2359 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2359 "nmp/ppc.nmp"
    	XER <SO_XER..SO_XER> = 1;
#line 2359 "nmp/ppc.nmp"
	else
#line 2359 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 0;
#line 2359 "nmp/ppc.nmp"
	endif;
#line 2359 "nmp/ppc.nmp"
;
#line 2359 "nmp/ppc.nmp"
#line 2360 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2362 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2362 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2362 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2362 "nmp/ppc.nmp"
;
#line 2362 "nmp/ppc.nmp"
#line 2363 "nmp/ppc.nmp"
        }

// Multiply Low Immediate

op mult_low_imm ( rd : index, ra : REG_IND, imm : IMM16 )
   syntax = format ( "mulli r%d,%s,%s", rd, ra.syntax, imm.syntax )
   image  = format ( "000111%5b%s%s", rd, ra.image, imm.image )
   action = {

   		GPR [ rd ] = ra * imm;

      	}

// Multiply High Word

op mult_high =   mult_hi
               | mult_hi_cr_update

op mult_hi ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "mulhw r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00010010110", rd, ra.image, rb.image )
   action = {

   		TMP_SDWORD = ra;
		TMP_SDWORD = TMP_SDWORD * rb;
        GPR [ rd ] = TMP_SDWORD < 63..32 >;

        }

op mult_hi_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "mulhw. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00010010111", rd, ra.image, rb.image )
   action = {

		TMP_SDWORD = ra;
		TMP_SDWORD = TMP_SDWORD * rb;
		GPR [ rd ] = TMP_SDWORD < 63..32 >;

			CR[7]<LT..LT> = ((TMP_SDWORD < 63..32 >)<0);
#line 2401 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_SDWORD < 63..32 >)>0);
#line 2401 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_SDWORD < 63..32 >)==0);
#line 2401 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2401 "nmp/ppc.nmp"
;
#line 2401 "nmp/ppc.nmp"
#line 2402 "nmp/ppc.nmp"
		}

// Multiply High word unsigned

op mult_high_unsig =   mult_hi_us
                     | mult_hi_us_cr_update

op mult_hi_us ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "mulhwu r%d,%s,%s", rd , ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00000010110", rd, ra.image, rb.image)
   action = {
		TMP_DWORD = coerce ( card ( 32 ) , ra );
		TMP_DWORD = TMP_DWORD * coerce ( card ( 32 ) , rb );
		GPR [ rd ] = TMP_DWORD < 63..32 >;

        }

op mult_hi_us_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "mulhwu. r%d,%s,%s", rd , ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s00000010111", rd, ra.image, rb.image)
   action = {

        TMP_DWORD = coerce ( card ( 32 ) , ra );
	TMP_DWORD = TMP_DWORD * coerce ( card ( 32 ) , rb );
        GPR [ rd ] = TMP_DWORD < 63..32 >;

			CR[7]<LT..LT> = ((TMP_DWORD < 63..32 >)<0);
#line 2428 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_DWORD < 63..32 >)>0);
#line 2428 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_DWORD < 63..32 >)==0);
#line 2428 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2428 "nmp/ppc.nmp"
;
#line 2428 "nmp/ppc.nmp"
#line 2429 "nmp/ppc.nmp"
		}

// Integer Divide Instructions
op int_divide ( x : int_divide_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = MULDIV

op int_divide_action =   div_word
                | div_word_unsig

op div_word =   divw
              | divw_cr_update
              | divw_overflow
              | divw_overflow_cr_upd

op divw ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "divw r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s01111010110", rd, ra.image, rb.image )
   action = {

		if ( rb == 0 || ( ra == 0x80000000 & rb == -1 ) ) then
			GPR [ rd ] = 0;
		else
			GPR [ rd ] = ra / rb;
		endif;
        }

op divw_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "divw. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s01111010111", rd, ra.image, rb.image )
   action = {

		if ( rb == 0 || ( ra == 0x80000000 & rb == -1 ) ) then
			GPR [ rd ] = 0;
		else
	         TMP_RES = ra / rb;
		 GPR [ rd ] = TMP_RES;
		 	CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2468 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2468 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2468 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2468 "nmp/ppc.nmp"
;
#line 2468 "nmp/ppc.nmp"
#line 2469 "nmp/ppc.nmp"
		endif;

		}

op divw_overflow ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "divwo r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s11111010110", rd, ra.image, rb.image )
   action = {

		if ( rb == 0 || ( ra == 0x80000000 & rb == -1 ) ) then
			TMP_RES = 0;

		else
	        TMP_RES = ra / rb;
		endif;

			if ((ra == 0x80000000 && rb == -1) || (rb == 0)) then
#line 2485 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2485 "nmp/ppc.nmp"
		XER <SO_XER..SO_XER> = 1;
#line 2485 "nmp/ppc.nmp"
	else
#line 2485 "nmp/ppc.nmp"
		XER<OV_XER..OV_XER> = 0;
#line 2485 "nmp/ppc.nmp"
	endif;
#line 2485 "nmp/ppc.nmp"
 ;
#line 2485 "nmp/ppc.nmp"
#line 2486 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

		}

op divw_overflow_cr_upd ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "divwo. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s11111010111", rd, ra.image, rb.image )
   action = {

		if ( rb == 0 || ( ra == 0x80000000 & rb == -1 ) ) then
			TMP_RES = 0;
				if ((ra == 0x80000000 && rb == -1) || (rb == 0)) then
#line 2497 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2497 "nmp/ppc.nmp"
		XER <SO_XER..SO_XER> = 1;
#line 2497 "nmp/ppc.nmp"
	else
#line 2497 "nmp/ppc.nmp"
		XER<OV_XER..OV_XER> = 0;
#line 2497 "nmp/ppc.nmp"
	endif;
#line 2497 "nmp/ppc.nmp"
 ;
#line 2497 "nmp/ppc.nmp"
#line 2498 "nmp/ppc.nmp"
			GPR[rd] = TMP_RES;
			CR[7]<SO..SO> = XER<SO_XER..SO_XER>;
		else
	        TMP_RES = ra / rb;
				if ((ra == 0x80000000 && rb == -1) || (rb == 0)) then
#line 2502 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2502 "nmp/ppc.nmp"
		XER <SO_XER..SO_XER> = 1;
#line 2502 "nmp/ppc.nmp"
	else
#line 2502 "nmp/ppc.nmp"
		XER<OV_XER..OV_XER> = 0;
#line 2502 "nmp/ppc.nmp"
	endif;
#line 2502 "nmp/ppc.nmp"
 ;
#line 2502 "nmp/ppc.nmp"
#line 2503 "nmp/ppc.nmp"
			GPR[rd] = TMP_RES;
				CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2504 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2504 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2504 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2504 "nmp/ppc.nmp"
;
#line 2504 "nmp/ppc.nmp"
#line 2505 "nmp/ppc.nmp"
		endif;
		}

// Divide word unsigned

op div_word_unsig =   divwus
                    | divwus_cr_update
                    | divwus_overflow
                    | divwus_overflow_cr_upd


op divwus ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "divwu r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s01110010110", rd, ra.image, rb.image )
   action = {

		if rb == 0 then
			GPR [ rd ] = 0;
		else
			GPR [ rd ] = coerce ( card ( 32 ) , ra ) / coerce ( card ( 32 ) , rb );
		endif;
		}

op divwus_cr_update ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "divwu. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s01110010111", rd, ra.image, rb.image )
   action = {

		if rb == 0 then
			GPR [ rd ] = 0;
		else
			TMP_RES = coerce ( card ( 32 ) , ra ) / coerce ( card ( 32 ) , rb );
			GPR [ rd ] = TMP_RES;
				CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2538 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2538 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2538 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2538 "nmp/ppc.nmp"
;
#line 2538 "nmp/ppc.nmp"
#line 2539 "nmp/ppc.nmp"
		endif;

		}

op divwus_overflow ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "divwuo r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s11110010110", rd, ra.image, rb.image )
   action = {

		if rb == 0 then
			TMP_RES = 0;
		else
			TMP_RES = coerce ( card ( 32 ) , ra ) / coerce ( card ( 32 ) , rb );
		endif;

			if ((coerce ( card ( 32 ) , ra ) == 0x80000000 && coerce ( card ( 32 ) , rb ) == -1) || (coerce ( card ( 32 ) , rb ) == 0)) then
#line 2555 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2555 "nmp/ppc.nmp"
		XER <SO_XER..SO_XER> = 1;
#line 2555 "nmp/ppc.nmp"
	else
#line 2555 "nmp/ppc.nmp"
		XER<OV_XER..OV_XER> = 0;
#line 2555 "nmp/ppc.nmp"
	endif;
#line 2555 "nmp/ppc.nmp"
 ;
#line 2555 "nmp/ppc.nmp"
#line 2556 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

		}

op divwus_overflow_cr_upd ( rd : index, ra : REG_IND, rb : REG_IND )
   syntax = format ( "divwuo. r%d,%s,%s", rd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s11110010111", rd, ra.image, rb.image )
   action = {

		if rb == 0 then
			TMP_RES = 0;
				if ((coerce ( card ( 32 ) , ra ) == 0x80000000 && coerce ( card ( 32 ) , rb ) == -1) || (coerce ( card ( 32 ) , rb ) == 0)) then
#line 2568 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2568 "nmp/ppc.nmp"
		XER <SO_XER..SO_XER> = 1;
#line 2568 "nmp/ppc.nmp"
	else
#line 2568 "nmp/ppc.nmp"
		XER<OV_XER..OV_XER> = 0;
#line 2568 "nmp/ppc.nmp"
	endif;
#line 2568 "nmp/ppc.nmp"
 ;
#line 2568 "nmp/ppc.nmp"
#line 2569 "nmp/ppc.nmp"
			GPR[rd] = TMP_RES;
			CR[7]<SO..SO>=XER<SO_XER..SO_XER>;
		else
			TMP_RES = coerce ( card ( 32 ) , ra ) / coerce ( card ( 32 ) , rb );
				if ((coerce ( card ( 32 ) , ra ) == 0x80000000 && coerce ( card ( 32 ) , rb ) == -1) || (coerce ( card ( 32 ) , rb ) == 0)) then
#line 2574 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2574 "nmp/ppc.nmp"
		XER <SO_XER..SO_XER> = 1;
#line 2574 "nmp/ppc.nmp"
	else
#line 2574 "nmp/ppc.nmp"
		XER<OV_XER..OV_XER> = 0;
#line 2574 "nmp/ppc.nmp"
	endif;
#line 2574 "nmp/ppc.nmp"
 ;
#line 2574 "nmp/ppc.nmp"
#line 2575 "nmp/ppc.nmp"
			GPR[rd] = TMP_RES;
				CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2576 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2576 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2576 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2576 "nmp/ppc.nmp"
;
#line 2576 "nmp/ppc.nmp"
#line 2577 "nmp/ppc.nmp"
		endif;
		}

// Integer Negate Instruction
op int_negate ( x : int_negate_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = ARITH

op int_negate_action =   neg
                | neg_cr_update
                | neg_overflow
                | neg_overflow_cr_upd

op neg ( rd : index, ra : REG_IND)
   syntax = format ( "neg r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000011010000", rd, ra.image )
   action = {

		GPR [ rd ] = ~ra + 1;

        }

op neg_cr_update ( rd : index, ra : REG_IND)
   syntax = format ( "neg. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000000011010001", rd, ra.image )
   action = {

		TMP_RES = ~ra + 1;
		GPR [ rd ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2608 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2608 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2608 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2608 "nmp/ppc.nmp"
;
#line 2608 "nmp/ppc.nmp"
#line 2609 "nmp/ppc.nmp"
        }

op neg_overflow ( rd : index, ra : REG_IND)
   syntax = format ( "nego r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010011010000", rd, ra.image )
   action = {

		TMP_RES = ~ra + 1;
			if ra == 0x80000000 then
#line 2617 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2617 "nmp/ppc.nmp"
		XER <SO_XER..SO_XER> = 1;
#line 2617 "nmp/ppc.nmp"
	else
#line 2617 "nmp/ppc.nmp"
		XER<OV_XER..OV_XER> = 0;
#line 2617 "nmp/ppc.nmp"
	endif;
#line 2617 "nmp/ppc.nmp"
;
#line 2617 "nmp/ppc.nmp"
#line 2618 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

        }

op neg_overflow_cr_upd ( rd : index, ra : REG_IND)
   syntax = format ( "nego. r%d,%s", rd, ra.syntax )
   image  = format ( "011111%5b%s0000010011010001", rd, ra.image )
   action = {

		TMP_RES = ~ra + 1;
			if ra == 0x80000000 then
#line 2628 "nmp/ppc.nmp"
		XER <OV_XER..OV_XER> = 1;
#line 2628 "nmp/ppc.nmp"
		XER <SO_XER..SO_XER> = 1;
#line 2628 "nmp/ppc.nmp"
	else
#line 2628 "nmp/ppc.nmp"
		XER<OV_XER..OV_XER> = 0;
#line 2628 "nmp/ppc.nmp"
	endif;
#line 2628 "nmp/ppc.nmp"
;
#line 2628 "nmp/ppc.nmp"
#line 2629 "nmp/ppc.nmp"
		GPR[rd] = TMP_RES;

			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2631 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2631 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2631 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2631 "nmp/ppc.nmp"
;
#line 2631 "nmp/ppc.nmp"
#line 2632 "nmp/ppc.nmp"
        }

// Integer Compare Instructions

op int_compare ( x : int_compare_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = INTCMP

op int_compare_action  =   cmp_imm
                         | cmp
                         | cmp_log_imm
                         | cmp_log

op cmp_imm ( crfd : card ( 3 ), l : bit, ra : REG_IND, imm : IMM16 )
   syntax = format ( "cmpi %d,%d,%s,%s", crfd, l, ra.syntax, imm.syntax )
   image  = format ( "001011%3b0%1b%s%s", crfd, l, ra.image, imm.image )
   action = {

		TMP_BYTE = 0;
		if ra < imm then
        	TMP_BYTE = 8;
        else
        	if ra > imm then
        		TMP_BYTE = 4;
        	else
        		TMP_BYTE = 2;
        	endif;
        endif;

        //TMP_BYTE = TMP_BYTE << 1;

        if XER <SO_XER..SO_XER> then
        	TMP_BYTE = TMP_BYTE | 0x01;
        endif;

        CR[(7-crfd)] < LT..SO > = TMP_BYTE & 0x0f;

        }

op cmp ( crfd : card ( 3 ), l : bit, ra : REG_IND, rb : REG_IND )
   syntax = format ( "cmp %d,%d,%s,%s", crfd, l, ra.syntax, rb.syntax )
   image  = format ( "011111%3b0%1b%s%s00000000000", crfd, l, ra.image, rb.image)
   action = {

        if ra < rb then
        	TMP_BYTE = 0b100;
        else
        	if ra > rb then
        		TMP_BYTE = 0b010;
        	else
        		TMP_BYTE = 0b001;
        	endif;
        endif;

        TMP_BYTE = TMP_BYTE << 1;

        if XER < SO_XER..SO_XER > then
        	TMP_BYTE = TMP_BYTE | 0x01;
        endif;

        CR[(7-crfd)] < LT..SO > = TMP_BYTE & 0x0f;

        }


op cmp_log_imm ( crfd : card ( 3 ), l : bit, ra : REG_IND, imm : UIMM16 )
   syntax = format ( "cmpli %d,%d,%s,%s", crfd, l, ra.syntax, imm.syntax )
   image  = format ( "001010%3b0%1b%s%s", crfd, l, ra.image, imm.image )
   action = {

       	TMP_WORD = imm;
    	if coerce ( card ( 32 ) , ra ) < ( TMP_WORD ) then
        	TMP_BYTE = 0b100;
        else
        	if coerce ( card ( 32 ) , ra ) > ( TMP_WORD ) then
        		TMP_BYTE = 0b010;
        	else
        		TMP_BYTE = 0b001;
        	endif;
        endif;

        TMP_BYTE = TMP_BYTE << 1;

        if XER < SO_XER..SO_XER > then
        	TMP_BYTE = TMP_BYTE | 0x01;
        endif;

        CR[(7-crfd)] < LT..SO > = TMP_BYTE & 0x0f;
        //CR < (31-(4*crfd)-3)..(31-(4*crfd)) > = TMP_BYTE & 0x0f;

        }

op cmp_log ( crfd : card ( 3 ), l : bit, ra : REG_IND, rb : REG_IND )
   syntax = format ( "cmpl %d,%d,%s,%s", crfd, l, ra.syntax, rb.syntax )
   image  = format ( "011111%3b0%1b%s%s00001000000", crfd, l, ra.image, rb.image)
   action = {

		if coerce ( card ( 32 ) , ra ) < coerce ( card ( 32 ) , rb ) then
			TMP_BYTE = 0b100;
		else
			if coerce ( card ( 32 ) , ra ) > coerce ( card ( 32 ) , rb ) then
				TMP_BYTE = 0b010;
			else
				TMP_BYTE = 0b001;
			endif;
		endif;

		TMP_BYTE = TMP_BYTE << 1;

		if XER < SO_XER..SO_XER > then
			TMP_BYTE = TMP_BYTE | 0x01;
		endif;

		//CR < (31-(4*crfd)-3)..(31-(4*crfd)) > = TMP_BYTE & 0x0f;
		CR[(7-crfd)] < LT..SO > = TMP_BYTE & 0x0f;

		}

// Integer Logical Instructions
op int_logical ( x : int_logical_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = LOGIC

op int_logical_action  =   or_instr
                 | and_instr
                 | xor_instr
                 | nor_instr
                 | nand_instr
                 | equivalent_instr
                 | extended_sign_instr
                 | count_lead_zeros_instr

// OR Instructions

op or_instr =   simple_or
              | or_imm
              | or_imm_shift
              | or_comp

op simple_or =  or
              | or_cr_update

op or ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "or r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01101111000", rs.image, ra, rb.image )
   action = {

		GPR [ ra ] = rs | rb;

		}

op or_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "or. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01101111001", rs.image, ra, rb.image )
   action = {

		TMP_RES = rs | rb;
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2794 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2794 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2794 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2794 "nmp/ppc.nmp"
;
#line 2794 "nmp/ppc.nmp"
#line 2795 "nmp/ppc.nmp"
		}

op or_imm ( rs : REG_IND, ra : index, imm : UIMM16 )
   syntax = format ( "ori r%d,%s,%s", ra, rs.syntax, imm.syntax )
   image  = format ( "011000%s%5b%s", rs.image, ra, imm.image )
   action = {

		TMP_WORD_A1 = 0;
		TMP_WORD_A0 = imm;
		//TMP_WORD = imm & 0b00000000000000001111111111111111;
		GPR [ ra ] = rs | TMP_WORD;

		}

op or_imm_shift ( rs : REG_IND, ra : index, imm : UIMM16 )
   syntax = format ( "oris r%d,%s,%s", ra, rs.syntax, imm.syntax )
   image  = format ( "011001%s%5b%s", rs.image, ra, imm.image )
   action = {

		TMP_WORD_A1 = imm;
		TMP_WORD_A0 = 0;
		GPR [ ra ] = rs | TMP_WORD;

		}

op or_comp =   orc
             | orc_cr_update

op orc ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "orc r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01100111000", rs.image, ra, rb.image )
   action = {

		GPR [ ra ] = rs | ( ~rb );

        }

op orc_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "orc. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01100111001", rs.image, ra, rb.image )
   action = {

		TMP_RES = rs | ( ~rb );
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2839 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2839 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2839 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2839 "nmp/ppc.nmp"
;
#line 2839 "nmp/ppc.nmp"
#line 2840 "nmp/ppc.nmp"
		}

// AND Instructions

op and_instr =   simple_and
               | and_imm
               | and_imm_shift
               | and_comp

op simple_and =   and
                | and_cr_update

op and ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "and r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s00000111000", rs.image, ra, rb.image )
   action = {

		GPR [ ra ] = rs & rb;

		}

op and_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "and. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s00000111001", rs.image, ra, rb.image )
   action = {

		TMP_RES = rs & rb;
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2868 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2868 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2868 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2868 "nmp/ppc.nmp"
;
#line 2868 "nmp/ppc.nmp"
#line 2869 "nmp/ppc.nmp"

		}

op and_imm ( rs : REG_IND, ra : index, imm : UIMM16 )
   syntax = format ( "andi. r%d,%s,%s", ra, rs.syntax, imm.syntax )
   image  = format ( "011100%s%5b%s", rs.image, ra, imm.image )
   action = {

		TMP_WORD_A1 = 0;
		TMP_WORD_A0 = imm;
		GPR [ ra ] = rs & TMP_WORD;

			CR[7]<LT..LT> = ((rs & TMP_WORD)<0);
#line 2881 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((rs & TMP_WORD)>0);
#line 2881 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((rs & TMP_WORD)==0);
#line 2881 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2881 "nmp/ppc.nmp"
;
#line 2881 "nmp/ppc.nmp"
#line 2882 "nmp/ppc.nmp"
		}

op and_imm_shift ( rs : REG_IND, ra : index, imm : UIMM16 )
   syntax = format ( "andis. r%d,%s,%s", ra, rs.syntax, imm.syntax )
   image  = format ( "011101%s%5b%s", rs.image, ra, imm.image )
   action = {

		TMP_WORD_A1 = imm;
		TMP_WORD_A0 = 0;
		GPR [ ra ] = rs & TMP_WORD;

			CR[7]<LT..LT> = ((rs & TMP_WORD)<0);
#line 2893 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((rs & TMP_WORD)>0);
#line 2893 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((rs & TMP_WORD)==0);
#line 2893 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2893 "nmp/ppc.nmp"
;
#line 2893 "nmp/ppc.nmp"
#line 2894 "nmp/ppc.nmp"
		}

op and_comp =   andc
              | andc_cr_update

op andc ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "andc r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s00001111000", rs.image, ra, rb.image )
   action = {

		GPR [ ra ] = rs & ( ~rb );

		}

op andc_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "andc. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s00001111001", rs.image, ra, rb.image )
   action = {

		TMP_RES = rs & ( ~rb );
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2915 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2915 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2915 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2915 "nmp/ppc.nmp"
;
#line 2915 "nmp/ppc.nmp"
#line 2916 "nmp/ppc.nmp"

		}

// XOR Instructions

op xor_instr =   simple_xor
               | xor_imm
               | xor_imm_shift

op simple_xor =   xor
                | xor_cr_update

op xor ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "xor r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01001111000", rs.image, ra, rb.image )
   action = {

		GPR [ ra ] = rs ^ rb;

		}

op xor_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "xor. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01001111001", rs.image, ra, rb.image )
   action = {

		TMP_RES = rs ^ rb;
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2944 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2944 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2944 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2944 "nmp/ppc.nmp"
;
#line 2944 "nmp/ppc.nmp"
#line 2945 "nmp/ppc.nmp"

		}

op xor_imm ( rs : REG_IND, ra : index, imm : UIMM16 )
   syntax = format ( "xori r%d,%s,%s", ra, rs.syntax, imm.syntax )
   image  = format ( "011010%s%5b%s", rs.image, ra, imm.image )
   action = {

		TMP_WORD_A1 = 0;
		TMP_WORD_A0 = imm;

		GPR [ ra ] = rs ^ TMP_WORD;

		}

op xor_imm_shift ( rs : REG_IND, ra : index, imm : UIMM16 )
   syntax = format ( "xoris r%d,%s,%s", ra, rs.syntax, imm.syntax )
   image  = format ( "011011%s%5b%s", rs.image, ra, imm.image )
   action = {

		TMP_WORD_A1 = imm;
		TMP_WORD_A0 = 0;
		GPR [ ra ] = rs ^ TMP_WORD;

		}

// NOR Instructions

op nor_instr =   nor
               | nor_cr_update

op nor ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "nor r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s00011111000", rs.image, ra, rb.image )
   action = {

		GPR [ ra ] = ~(  rs | rb );

		}

op nor_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "nor. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s00011111001", rs.image, ra, rb.image )
   action = {

		TMP_RES = ~( rs | rb );
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 2992 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 2992 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 2992 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 2992 "nmp/ppc.nmp"
;
#line 2992 "nmp/ppc.nmp"
#line 2993 "nmp/ppc.nmp"
		}

// NAND Instructions

op nand_instr =   nand
                | nand_cr_update

op nand ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "nand r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01110111000", rs.image, ra, rb.image )
   action = {

		GPR [ ra ] = ~( rs & rb );

		}

op nand_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "nand. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01110111001", rs.image, ra, rb.image )
   action = {

		TMP_RES = ~( rs & rb );
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3016 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3016 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3016 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3016 "nmp/ppc.nmp"
;
#line 3016 "nmp/ppc.nmp"
#line 3017 "nmp/ppc.nmp"

		}

// Equivalent Instructions

op equivalent_instr =   eqv
                      | eqv_cr_update


op eqv ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "eqv r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01000111000", rs.image, ra, rb.image )
   action = {

		GPR [ ra ] = ~( rs ^ rb );

		}

op eqv_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "eqv. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s01000111001", rs.image, ra, rb.image )
   action = {

		TMP_RES = ~( rs ^ rb );

		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3043 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3043 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3043 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3043 "nmp/ppc.nmp"
;
#line 3043 "nmp/ppc.nmp"
#line 3044 "nmp/ppc.nmp"

		}

// Extended sign Instructions

op extended_sign_instr =   ext_sign_byte
                         | ext_sign_hword

op ext_sign_byte =   extsb
                   | extsb_cr_update

op extsb ( rs : index, ra : index )
   syntax = format ( "extsb r%d,r%d", ra, rs )
   image  = format ( "011111%5b%5b0000011101110100", rs, ra )
   action = {

		//TMP_SBYTE = GPR [ rs ] < 0..7 >;
		TMP_SBYTE = GPR [ rs ] < 7..0 >;
        GPR [ ra ] = TMP_SBYTE;   // sign extension

        }

op extsb_cr_update ( rs : index, ra : index )
   syntax = format ( "extsb. r%d,r%d", ra, rs )
   image  = format ( "011111%5b%5b0000011101110101", rs, ra )
   action = {

		//TMP_SBYTE = GPR [ rs ] < 0..7 >;
		TMP_SBYTE = GPR [ rs ] < 7..0 >;
		GPR [ ra ] = TMP_SBYTE;   // sign extension
			CR[7]<LT..LT> = ((TMP_SBYTE)<0);
#line 3074 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_SBYTE)>0);
#line 3074 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_SBYTE)==0);
#line 3074 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3074 "nmp/ppc.nmp"
;
#line 3074 "nmp/ppc.nmp"
#line 3075 "nmp/ppc.nmp"


		}

op ext_sign_hword =   extsh
                    | extsh_cr_update

op extsh ( rs : index, ra : index )
   syntax = format ( "extsh r%d,r%d", ra, rs )
   image  = format ( "011111%5b%5b0000011100110100", rs, ra )
   action = {

		//TMP_SHWORD = GPR [ rs ] < 0..15 >;
		TMP_SHWORD = GPR [ rs ] < 15..0 >;
		GPR [ ra ] = TMP_SHWORD; // sign extension

		}

op extsh_cr_update ( rs : index, ra : index )
   syntax = format ( "extsh. r%d,r%d", ra, rs )
   image  = format ( "011111%5b%5b0000011100110101", rs,ra )
   action = {

		//TMP_SHWORD = GPR [ rs ] < 0..15 >;
		TMP_SHWORD = GPR [ rs ] < 15..0 >;
		GPR [ ra ] = TMP_SHWORD; // sign extension

			CR[7]<LT..LT> = ((TMP_SHWORD)<0);
#line 3102 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_SHWORD)>0);
#line 3102 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_SHWORD)==0);
#line 3102 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3102 "nmp/ppc.nmp"
;
#line 3102 "nmp/ppc.nmp"
#line 3103 "nmp/ppc.nmp"

		}

// Count Leading zeros Instruction

op count_lead_zeros_instr =   cntlzw
                            | cntlzw_cr_update

op cntlzw ( rs : REG_IND, ra : index )
   syntax = format ( "cntlzw r%d, %s", ra, rs.syntax )
   image  = format ( "011111%s%5b0000000000110100", rs.image, ra )
   action = {
               TMP_SBYTE = 31;
               loop;
            }
   loop   = {
		if TMP_SBYTE >= 0 then
			if rs <TMP_SBYTE..TMP_SBYTE> == 0 then
				TMP_SBYTE = TMP_SBYTE - 1;
				loop;
			else
				GPR [ ra ] = 31 - TMP_SBYTE;
				TMP_SBYTE = -1;
			endif;
		else
			GPR [ ra ] = 32;
		endif;
		}

op cntlzw_cr_update ( rs : REG_IND, ra : index )
   syntax = format ( "cntlzw. r%d, %s", ra, rs.syntax )
   image  = format ( "011111%s%5b0000000000110101", rs.image, ra )
   action = {
		TMP_SBYTE = 31;
		loop;
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3139 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3139 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3139 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3139 "nmp/ppc.nmp"
;
#line 3139 "nmp/ppc.nmp"
#line 3140 "nmp/ppc.nmp"
		CR[7] <LT..LT> = 0;
		}
   loop   = {
		if TMP_SBYTE >= 0 then
			if rs <TMP_SBYTE..TMP_SBYTE> == 0 then
				TMP_SBYTE = TMP_SBYTE - 1;
				loop;
			else
				TMP_RES = 31 - TMP_SBYTE;
				TMP_SBYTE = -1;
			endif;
		else
			TMP_RES = 32;
		endif;
		}


// Integer Rotate and shift Instructions
op  int_rotate_shift ( x : int_rotate_shift_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = SHIFTROT

op int_rotate_shift_action =   int_rotate
                      | int_shift

// Rotate Instructions


op int_rotate =   rot_lw_imm_and_mask
                | rot_lw_and_mask
                | rot_lw_imm_mask_ins

op rot_lw_imm_and_mask =   rlwinm
                         | rlwinm_cr_update

op rlwinm ( rs : REG_IND, ra : index, sh : index, mb : index, me : index )
   syntax = format ( "rlwinm r%d,%s,%d,%d,%d", ra, rs.syntax, sh, mb, me )
   image  = format ( "010101%s%5b%5b%5b%5b0", rs.image, ra, sh, mb, me )
   action = {

		if (mb<=me) then
			TMP_WORD = 0;
			TMP_WORD < (31-mb)..(31-me) > = ~TMP_WORD < (31-mb)..(31-me) >;
        else
			TMP_WORD = 0xffffffff;
			TMP_WORD < (31-me)-1..(31-mb)+1> = ~TMP_WORD < (31-me)-1..(31-mb)+1 >;
		endif;

		GPR [ ra ] = ( ( rs <<< sh ) & TMP_WORD );

        }

op rlwinm_cr_update ( rs : REG_IND, ra : index, sh : index, mb : index, me : index )
   syntax = format ( "rlwinm. r%d,%s,%d,%d,%d", ra, rs.syntax, sh, mb, me )
   image  = format ( "010101%s%5b%5b%5b%5b1", rs.image, ra, sh, mb, me )
   action = {

		if (mb<=me) then
			TMP_WORD = 0;
			TMP_WORD < (31-mb)..(31-me) > = ~TMP_WORD < (31-mb)..(31-me) >;
        else
			TMP_WORD = 0xffffffff;
			TMP_WORD < (31-me)-1..(31-mb)+1> = ~TMP_WORD < (31-me)-1..(31-mb)+1 >;
		endif;

		TMP_RES = ( ( rs <<< sh ) & TMP_WORD );
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3209 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3209 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3209 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3209 "nmp/ppc.nmp"
;
#line 3209 "nmp/ppc.nmp"
#line 3210 "nmp/ppc.nmp"

        }

op rot_lw_and_mask =   rlwnm
                     | rlwnm_cr_update

op rlwnm ( rs : REG_IND, ra : index, rb : index, mb : index, me : index )
   syntax = format ( "rlwnm r%d,%s,r%d,%d,%d", ra, rs.syntax, rb, mb, me )
   image  = format ( "010111%s%5b%5b%5b%5b0", rs.image, ra, rb, mb, me )
   action = {

		if (mb<=me) then
			TMP_WORD = 0;
			TMP_WORD < (31-mb)..(31-me) > = ~TMP_WORD < (31-mb)..(31-me) >;
        else
			TMP_WORD = -1;
			TMP_WORD < (31-me)-1..(31-mb)+1> = ~TMP_WORD < (31-me)-1..(31-mb)+1 >;
		endif;

		GPR [ ra ] = ( ( rs <<< coerce ( card ( 5 ), GPR [ rb ] < 4..0 > ) ) & TMP_WORD );

		}

op rlwnm_cr_update ( rs : REG_IND, ra : index, rb : index, mb : index, me : index )
   syntax = format ( "rlwnm. r%d,%s,r%d,%d,%d", ra, rs.syntax, rb, mb, me )
   image  = format ( "010111%s%5b%5b%5b%5b1", rs.image, ra, rb, mb, me )
   action = {

		if (mb<=me) then
			TMP_WORD = 0;
			TMP_WORD < (31-mb)..(31-me) > = ~TMP_WORD < (31-mb)..(31-me) >;
        else
			TMP_WORD = -1;
			TMP_WORD < (31-me)-1..(31-mb)+1> = ~TMP_WORD < (31-me)-1..(31-mb)+1 >;
		endif;

		TMP_RES = ( ( rs <<< coerce ( card ( 5 ), GPR [ rb ] < 4..0 > ) ) & TMP_WORD );
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3248 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3248 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3248 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3248 "nmp/ppc.nmp"
;
#line 3248 "nmp/ppc.nmp"
#line 3249 "nmp/ppc.nmp"

		}

op rot_lw_imm_mask_ins =   rlwimi
                         | rlwimi_cr_update

op rlwimi ( rs : REG_IND, ra : index, sh : index, mb : index, me : index )
   syntax = format ( "rlwimi r%d,%s,%d,%d,%d", ra, rs.syntax, sh, mb, me )
   image  = format ( "010100%s%5b%5b%5b%5b0", rs.image, ra, sh, mb, me )
   action = {

		if (mb<=me) then
			TMP_WORD = 0;
			TMP_WORD < (31-mb)..(31-me) > = ~TMP_WORD < (31-mb)..(31-me) >;
        else
			TMP_WORD = -1;
			TMP_WORD < (31-me)-1..(31-mb)+1> = ~TMP_WORD < (31-me)-1..(31-mb)+1 >;
		endif;

		GPR [ ra ] = ( ( rs <<< sh ) & TMP_WORD ) | ( GPR [ ra ] & ~TMP_WORD );

		}

op rlwimi_cr_update ( rs : REG_IND, ra : index, sh : index, mb : index, me : index )
   syntax = format ( "rlwimi. r%d,%s,%d,%d,%d", ra, rs.syntax, sh, mb, me )
   image  = format ( "010100%s%5b%5b%5b%5b1", rs.image, ra, sh, mb, me )
   action = {

		if (mb<=me) then
			TMP_WORD = 0;
			TMP_WORD < (31-mb)..(31-me) > = ~TMP_WORD < (31-mb)..(31-me) >;
        else
			TMP_WORD = -1;
			TMP_WORD < (31-me)-1..(31-mb)+1> = ~TMP_WORD < (31-me)-1..(31-mb)+1 >;
		endif;

		TMP_RES = ( ( rs <<< sh ) & TMP_WORD ) | ( GPR [ ra ] & ~TMP_WORD );
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3287 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3287 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3287 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3287 "nmp/ppc.nmp"
;
#line 3287 "nmp/ppc.nmp"
#line 3288 "nmp/ppc.nmp"

		}

// Shift Instructions

op int_shift =   shift_left_word
               | shift_right_word
               | shift_right_alg_wimm
               | shift_right_alg_w

op shift_left_word =   slw
                     | slw_cr_update

op slw ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "slw r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s00000110000", rs.image, ra, rb.image )
   action = {

		if rb < 5..5 > == 0 then
			GPR [ ra ] = ( rs << coerce ( card ( 5 ), rb < 4..0 > ) );
		else
			GPR [ ra ] = 0;
		endif;

		}

op slw_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "slw. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s00000110001", rs.image, ra, rb.image )
   action = {

		if rb < 5..5 > == 0 then
			TMP_RES = ( rs << coerce ( card ( 5 ), rb < 4..0 > ) );
		else
			TMP_RES = 0;
		endif;

		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3326 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3326 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3326 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3326 "nmp/ppc.nmp"
;
#line 3326 "nmp/ppc.nmp"
#line 3327 "nmp/ppc.nmp"

		}

op shift_right_word =   srw
                      | srw_cr_update

op srw ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "srw r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s10000110000", rs.image, ra, rb.image )
   action = {

		TMP_WORD = 0;
		TMP_WORD1 = 31 - rb <4..0>;
		TMP_WORD < TMP_WORD1..0 > = ~TMP_WORD <TMP_WORD1..0>;
 		if rb < 5..5 > == 0 then
			GPR [ ra ] = ( rs >> coerce ( card ( 5 ), rb < 4..0 > ) ) & TMP_WORD;
		else
			GPR [ ra ] = 0;
		endif;

		}

op srw_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "srw. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s10000110001", rs.image, ra, rb.image )
   action = {

		TMP_WORD = 0;
		TMP_WORD1 = 31 - rb <4..0>;
		TMP_WORD<TMP_WORD1..0 > = ~TMP_WORD<TMP_WORD1..0>;
		if rb < 5..5 > == 0 then
			TMP_RES = ( rs >> coerce ( card ( 5 ), rb < 4..0 > ) ) & TMP_WORD;
		else
			TMP_RES = 0;
		endif;
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3363 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3363 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3363 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3363 "nmp/ppc.nmp"
;
#line 3363 "nmp/ppc.nmp"
#line 3364 "nmp/ppc.nmp"

		}

op shift_right_alg_wimm =   srawi
                          | srawi_cr_update

op srawi ( rs : REG_IND, ra : index, sh : index )
   syntax = format ( "srawi r%d,%s,%d", ra, rs.syntax, sh )
   image  = format ( "011111%s%5b%5b11001110000", rs.image, ra, sh )
   action = {

		if rs <31..31> == 0 then
			TMP_WORD = 0;
			TMP_WORD<31-sh..0>=~TMP_WORD<31-sh..0>;
			GPR [ ra ] = ( rs >> sh ) & TMP_WORD;
			XER<CA_XER..CA_XER>=0;
		else
			TMP_WORD = 0;
			TMP_WORD<31..31-sh>=~TMP_WORD<31..31-sh>;
			GPR [ ra ] = ( rs >> sh ) | TMP_WORD;
			TMP_WORD = 0;
			TMP_WORD<sh..0>=~TMP_WORD<sh..0>;
			TMP_WORD = TMP_WORD & rs;
			if TMP_WORD != 0 then
				XER<CA_XER..CA_XER>=1;
			else
				XER<CA_XER..CA_XER>=0;
			endif;
		endif;

		}

op srawi_cr_update ( rs : REG_IND, ra : index, sh : index )
   syntax = format ( "srawi. r%d,%s,%d", ra, rs.syntax, sh )
   image  = format ( "011111%s%5b%5b11001110001", rs.image, ra, sh )
   action = {

		if rs <31..31> == 0 then
			TMP_WORD = 0;
			TMP_WORD<31-sh..0>=~TMP_WORD<31-sh..0>;
			TMP_RES = ( rs >> sh ) & TMP_WORD;
			XER<CA_XER..CA_XER>=0;
		else
			TMP_WORD = 0;
			TMP_WORD<31..32-sh>=~TMP_WORD<31..32-sh>;
			TMP_RES = ( rs >> sh ) | TMP_WORD;
			TMP_WORD = 0;
			TMP_WORD<sh..0>=~TMP_WORD<sh..0>;
			TMP_WORD = TMP_WORD & rs;
			if TMP_WORD != 0 then
				XER<CA_XER..CA_XER>=1;
			else
				XER<CA_XER..CA_XER>=0;
			endif;
		endif;
		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3420 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3420 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3420 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3420 "nmp/ppc.nmp"
;
#line 3420 "nmp/ppc.nmp"
#line 3421 "nmp/ppc.nmp"


		}

op shift_right_alg_w =   sraw
                       | sraw_cr_update

op sraw ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "sraw r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s11000110000", rs.image, ra, rb.image )
   action = {

		TMP_WORD = 0;
		TMP_WORD1 = rb<4..0>;
		if rb<5..5> == 0 then
			TMP_WORD <31-TMP_WORD1..0>=~TMP_WORD<31-TMP_WORD1..0>;
		endif;
		TMP_WORD1 = 0;
		if rs<31..31> == 1 then
			TMP_WORD1 = ~TMP_WORD1;
		endif;
		GPR [ ra ] = ( ( rs >> rb <4..0>) & TMP_WORD ) | ( TMP_WORD1 & ~TMP_WORD );
		if ( rs<31..31> == 1 & ( ( rs >> rb < 4..0 >) & ~ TMP_WORD ) != 0 ) then
			XER < CA_XER..CA_XER > = 1;
		else
			XER < CA_XER..CA_XER > = 0;
		endif;

		}

op sraw_cr_update ( rs : REG_IND, ra : index, rb : REG_IND )
   syntax = format ( "sraw. r%d,%s,%s", ra, rs.syntax, rb.syntax )
   image  = format ( "011111%s%5b%s11000110001", rs.image, ra, rb.image )
   action = {

		TMP_WORD = 0;
		TMP_WORD1 = rb<4..0>;
		if rb<5..5> == 0 then
			TMP_WORD <31-TMP_WORD1..0>=~TMP_WORD<31-TMP_WORD1..0>;
		endif;
		TMP_WORD1 = 0;
		if rs<31..31> == 1 then
			TMP_WORD1 = ~TMP_WORD1;
		endif;
		TMP_RES = ( ( rs >> rb <4..0>) & TMP_WORD ) | ( TMP_WORD1 & ~TMP_WORD );
		if ( rs<31..31> == 1 & ( ( rs >> rb < 4..0 >) & ~ TMP_WORD ) != 0 ) then
			XER < CA_XER..CA_XER > = 1;
		else
			XER < CA_XER..CA_XER > = 0;
		endif;

		GPR [ ra ] = TMP_RES;
			CR[7]<LT..LT> = ((TMP_RES)<0);
#line 3473 "nmp/ppc.nmp"
    CR[7]<GT..GT> = ((TMP_RES)>0);
#line 3473 "nmp/ppc.nmp"
	CR[7]<EQ..EQ> = ((TMP_RES)==0);
#line 3473 "nmp/ppc.nmp"
	CR[7]<SO..SO> = XER <SO_XER..SO_XER>;
#line 3473 "nmp/ppc.nmp"
;
#line 3473 "nmp/ppc.nmp"
#line 3474 "nmp/ppc.nmp"

		}


// Flow control Instructions

op flow_control_instr ( x : cond_reg_log )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = CRLI

// Condition Register Logic Instructions

op cond_reg_log =   cr_and
                  | cr_or
                  | cr_xor
                  | cr_nand
                  | cr_nor
                  | cr_eqv
                  | cr_and_comp
                  | cr_or_comp
                  | mov_cr_field
                  | mov_to_cr_field
                  | mov_to_cr_xer

op cr_and ( crbd : index, crba : index, crbb : index)
   syntax = format ( "crand crb%d,crb%d,crb%d", crbd, crba, crbb )
   image  = format ( "010011%5b%5b%5b01000000010", crbd, crba, crbb )
   action = {

			CR[(31-(crbd))/4]<((31-(crbd))-(((31-(crbd))/4)*4))..((31-(crbd))-(((31-(crbd))/4)*4))>
#line 3505 "nmp/ppc.nmp"
 = 	CR[(31-(crba))/4]<((31-(crba))-(((31-(crba))/4)*4))..((31-(crba))-(((31-(crba))/4)*4))>
#line 3505 "nmp/ppc.nmp"
 & 	CR[(31-(crbb))/4]<((31-(crbb))-(((31-(crbb))/4)*4))..((31-(crbb))-(((31-(crbb))/4)*4))>
#line 3505 "nmp/ppc.nmp"
;
#line 3505 "nmp/ppc.nmp"
#line 3506 "nmp/ppc.nmp"

            }

op cr_or ( crbd : index, crba : index, crbb : index)
   syntax = format ( "cror crb%d,crb%d,crb%d", crbd, crba, crbb )
   image  = format ( "010011%5b%5b%5b01110000010", crbd, crba, crbb )
   action = {

			CR[(31-(crbd))/4]<((31-(crbd))-(((31-(crbd))/4)*4))..((31-(crbd))-(((31-(crbd))/4)*4))>
#line 3514 "nmp/ppc.nmp"
 = 	CR[(31-(crba))/4]<((31-(crba))-(((31-(crba))/4)*4))..((31-(crba))-(((31-(crba))/4)*4))>
#line 3514 "nmp/ppc.nmp"
 | 	CR[(31-(crbb))/4]<((31-(crbb))-(((31-(crbb))/4)*4))..((31-(crbb))-(((31-(crbb))/4)*4))>
#line 3514 "nmp/ppc.nmp"
;
#line 3514 "nmp/ppc.nmp"
#line 3515 "nmp/ppc.nmp"

            }

op cr_xor ( crbd : index, crba : index, crbb : index)
   syntax = format ( "crxor crb%d,crb%d,crb%d", crbd, crba, crbb )
   image  = format ( "010011%5b%5b%5b00110000010", crbd, crba, crbb )
   action = {
			CR[(31-(crbd))/4]<((31-(crbd))-(((31-(crbd))/4)*4))..((31-(crbd))-(((31-(crbd))/4)*4))>
#line 3522 "nmp/ppc.nmp"
 = 	CR[(31-(crba))/4]<((31-(crba))-(((31-(crba))/4)*4))..((31-(crba))-(((31-(crba))/4)*4))>
#line 3522 "nmp/ppc.nmp"
 ^ 	CR[(31-(crbb))/4]<((31-(crbb))-(((31-(crbb))/4)*4))..((31-(crbb))-(((31-(crbb))/4)*4))>
#line 3522 "nmp/ppc.nmp"
;
#line 3522 "nmp/ppc.nmp"
#line 3523 "nmp/ppc.nmp"

            }

op cr_nand ( crbd : index, crba : index, crbb : index)
   syntax = format ( "crnand crb%d,crb%d,crb%d", crbd, crba, crbb )
   image  = format ( "010011%5b%5b%5b00111000010", crbd, crba, crbb )
   action = {
			CR[(31-(crbd))/4]<((31-(crbd))-(((31-(crbd))/4)*4))..((31-(crbd))-(((31-(crbd))/4)*4))>
#line 3530 "nmp/ppc.nmp"
 = ~(	CR[(31-(crba))/4]<((31-(crba))-(((31-(crba))/4)*4))..((31-(crba))-(((31-(crba))/4)*4))>
#line 3530 "nmp/ppc.nmp"
 & 	CR[(31-(crbb))/4]<((31-(crbb))-(((31-(crbb))/4)*4))..((31-(crbb))-(((31-(crbb))/4)*4))>
#line 3530 "nmp/ppc.nmp"
);
#line 3530 "nmp/ppc.nmp"
#line 3531 "nmp/ppc.nmp"
            }

op cr_nor ( crbd : index, crba : index, crbb : index)
   syntax = format ( "crnor crb%d,crb%d,crb%d", crbd, crba, crbb )
   image  = format ( "010011%5b%5b%5b00001000010", crbd, crba, crbb )
   action = {
			CR[(31-(crbd))/4]<((31-(crbd))-(((31-(crbd))/4)*4))..((31-(crbd))-(((31-(crbd))/4)*4))>
#line 3537 "nmp/ppc.nmp"
 = ~(	CR[(31-(crba))/4]<((31-(crba))-(((31-(crba))/4)*4))..((31-(crba))-(((31-(crba))/4)*4))>
#line 3537 "nmp/ppc.nmp"
 | 	CR[(31-(crbb))/4]<((31-(crbb))-(((31-(crbb))/4)*4))..((31-(crbb))-(((31-(crbb))/4)*4))>
#line 3537 "nmp/ppc.nmp"
);
#line 3537 "nmp/ppc.nmp"
#line 3538 "nmp/ppc.nmp"
             }

op cr_eqv ( crbd : index, crba : index, crbb : index)
   syntax = format ( "creqv crb%d,crb%d,crb%d", crbd, crba, crbb )
   image  = format ( "010011%5b%5b%5b01001000010", crbd, crba, crbb )
   action = {
			CR[(31-(crbd))/4]<((31-(crbd))-(((31-(crbd))/4)*4))..((31-(crbd))-(((31-(crbd))/4)*4))>
#line 3544 "nmp/ppc.nmp"
 = 	CR[(31-(crba))/4]<((31-(crba))-(((31-(crba))/4)*4))..((31-(crba))-(((31-(crba))/4)*4))>
#line 3544 "nmp/ppc.nmp"
 ^ ~	CR[(31-(crbb))/4]<((31-(crbb))-(((31-(crbb))/4)*4))..((31-(crbb))-(((31-(crbb))/4)*4))>
#line 3544 "nmp/ppc.nmp"
;
#line 3544 "nmp/ppc.nmp"
#line 3545 "nmp/ppc.nmp"
            }

op cr_and_comp ( crbd : index, crba : index, crbb : index)
   syntax = format ( "crandc crb%d,crb%d,crb%d", crbd, crba, crbb )
   image  = format ( "010011%5b%5b%5b00100000010", crbd, crba, crbb )
   action = {
			CR[(31-(crbd))/4]<((31-(crbd))-(((31-(crbd))/4)*4))..((31-(crbd))-(((31-(crbd))/4)*4))>
#line 3551 "nmp/ppc.nmp"
 = 	CR[(31-(crba))/4]<((31-(crba))-(((31-(crba))/4)*4))..((31-(crba))-(((31-(crba))/4)*4))>
#line 3551 "nmp/ppc.nmp"
 & ~	CR[(31-(crbb))/4]<((31-(crbb))-(((31-(crbb))/4)*4))..((31-(crbb))-(((31-(crbb))/4)*4))>
#line 3551 "nmp/ppc.nmp"
;
#line 3551 "nmp/ppc.nmp"
#line 3552 "nmp/ppc.nmp"
            }

op cr_or_comp ( crbd : index, crba : index, crbb : index)
   syntax = format ( "crorc crb%d,crb%d,crb%d", crbd, crba, crbb )
   image  = format ( "010011%5b%5b%5b01101000010", crbd, crba, crbb )
   action = {
			CR[(31-(crbd))/4]<((31-(crbd))-(((31-(crbd))/4)*4))..((31-(crbd))-(((31-(crbd))/4)*4))>
#line 3558 "nmp/ppc.nmp"
 = 	CR[(31-(crba))/4]<((31-(crba))-(((31-(crba))/4)*4))..((31-(crba))-(((31-(crba))/4)*4))>
#line 3558 "nmp/ppc.nmp"
 | ~	CR[(31-(crbb))/4]<((31-(crbb))-(((31-(crbb))/4)*4))..((31-(crbb))-(((31-(crbb))/4)*4))>
#line 3558 "nmp/ppc.nmp"
;
#line 3558 "nmp/ppc.nmp"
#line 3559 "nmp/ppc.nmp"
            }

op mov_cr_field ( crfd : card ( 3 ), crfs : card ( 3 ) )
   syntax = format ( "mcrf crf%d,crf%d", crfd, crfs )
   image  = format ( "010011%3b00%3b000000000000000000", crfd, crfs )
   action = {

               //CR < (31-(4*crfd)-3)..(31-(4*crfd)) > =
               //          CR < (31-(4*crfs)-3)..(31-(4*crfs)) >;
               CR[7-crfd]=CR[7-crfs];
            }

op mov_to_cr_field ( rs : REG_IND, crm : card ( 8 ) )
   syntax = format ( "mtcrf %d,%s", crm, rs.syntax )
   image  = format ( "011111%s0%8b000100100000", rs.image, crm )
   action = {
               TMP_WORD = 0;
               TMP_BYTE = 0x00ff;

               if crm <7..7> then
                  //TMP_WORD = TMP_WORD | TMP_BYTE;
                  //TMP_WORD = TMP_WORD << 4;
                  CR[7]=rs<4*7+3..4*7>;
               endif;
               if crm <6..6> then
                  //TMP_WORD = TMP_WORD | TMP_BYTE;
                  //TMP_WORD = TMP_WORD << 4;
                  CR[6]=rs<4*6+3..4*6>;
               endif;
               if crm <5..5> then
                  //TMP_WORD = TMP_WORD | TMP_BYTE;
                  //TMP_WORD = TMP_WORD << 4;
                  CR[5]=rs<4*5+3..4*5>;
               endif;
               if crm <4..4> then
                  //TMP_WORD = TMP_WORD | TMP_BYTE;
                  //TMP_WORD = TMP_WORD << 4;
                  CR[4]=rs<4*4+3..4*4>;
               endif;
               if crm <3..3> then
                  //TMP_WORD = TMP_WORD | TMP_BYTE;
                  //TMP_WORD = TMP_WORD << 4;
                  CR[3]=rs<4*3+3..4*3>;
               endif;
               if crm <2..2> then
                  //TMP_WORD = TMP_WORD | TMP_BYTE;
                  //TMP_WORD = TMP_WORD << 4;
                  CR[2]=rs<4*2+3..4*2>;
               endif;
               if crm <1..1> then
                  //TMP_WORD = TMP_WORD | TMP_BYTE;
                  //TMP_WORD = TMP_WORD << 4;
                  CR[1]=rs<4*1+3..4*1>;
               endif;
               if crm <0..0> then
                  //TMP_WORD = TMP_WORD | TMP_BYTE;
                  CR[0]=rs<3..0>;
               endif;

               //CR = rs & TMP_WORD;

             }

op mov_to_cr_xer ( crfd : card ( 3 ) )
   syntax = format ( "mcrxr crf%d", crfd )
   image  = format ( "011111%3b00000000000010000000000", crfd )
   action = {
               //CR <(31-(4*crfd+3))..(31-(4*crfd))> = XER <28..31>;
               CR[7-crfd]=XER <31..28>;
               XER <31..28> = 0;
            }

// 2.2.4 Processor Control Instructions

op proce_control_instr ( x : proce_con_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = CONTROL

op proce_con_instr_action =   mov_from_cr
                            | mov_to_spr
                            | mov_from_spr

op mov_from_cr ( rd : index )
   syntax = format ( "mfcr r%d", rd )
   image  = format ( "011111%5b000000000000000100110", rd )
   action = {
              //GPR [ rd ] = CR;
              GPR[rd]<4*0+3..4*0>=CR[0];
              GPR[rd]<4*1+3..4*1>=CR[1];
              GPR[rd]<4*2+3..4*2>=CR[2];
              GPR[rd]<4*3+3..4*3>=CR[3];
              GPR[rd]<4*4+3..4*4>=CR[4];
              GPR[rd]<4*5+3..4*5>=CR[5];
              GPR[rd]<4*6+3..4*6>=CR[6];
              GPR[rd]<4*7+3..4*7>=CR[7];
            }

op mov_to_spr ( rs : index, spr : card ( 9 ) )
   syntax = format ( "mtspr %d,r%d", spr, rs )
   image  = format ( "011111%5b0%9b01110100110", rs, spr )
   action = {

              	TMP_HWORD = spr;
	      	TMP_WORD = 0;
              	TMP_WORD = TMP_HWORD < 4..0 >;
              	TMP_WORD = TMP_WORD << 5;
	      	TMP_WORD1 = 0;
	      	TMP_WORD1 = TMP_HWORD<8..5>;
              	TMP_WORD = TMP_WORD | ( TMP_WORD1 & 0x0000000f);

              	if TMP_WORD > 9 then
                	"print" ( "mtspr is only user level instruction set implementation." );
		endif;
            	switch ( TMP_WORD ) {
  			case 1 : XER = GPR [ rs ];
			case 8 : LR = GPR [ rs ];
			case 9 : CTR = GPR [ rs ];
			default : "print" ( "mtspr: rs error." );
		};
             }

op mov_from_spr ( rd : index, spr : card ( 9 ) )
   syntax = format ( "mfspr r%d,%d", rd, spr )
   image  = format ( "011111%5b0%9b01010100110", rd, spr )
   action = {

              	TMP_HWORD = spr;
		TMP_WORD = 0;
              	TMP_WORD = TMP_HWORD < 4..0 >;
              	TMP_WORD = TMP_WORD << 5;
              	TMP_WORD = TMP_WORD | ( TMP_HWORD < 8..5 > & 0x0000000f);

              	if TMP_WORD > 9 then
                   "print" ( "mfspr is only user level instruction set implementation." );
		endif;
		switch ( TMP_WORD ) {
			case 1 : GPR[rd]=XER;
			case 8 : GPR[rd]=LR;
			case 9 : GPR[rd]=CTR;
			default : "print" ( "mfspr: rd error." );
		};
	}



// 2.2.5 Memory Synchronization Instructions
// LWARX, STWCX., SYNC

op mem_sync_instr ( x : mem_sync_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = MEMSYNC

op mem_sync_instr_action =  lwarx | stwcx | sync

op lwarx ( rd: index, ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "lwarx r%d,%s,%s", rd, ra.syntax, rb.syntax)
	image  = format ( "011111%5b%s%s00000101000", rd, ra.image, rb.image )
	action = {

		TMP_EA = ra + rb;
		TMP_RESERVE = 1;
		TMP_RESERVE_ADDR = TMP_EA;
// ToDo: TMP_EA must be a multiple of four. Otherwise aljgnment exception or results boundedly undefined
		TMP_SWORD_A3 = M [ TMP_EA ];
		TMP_SWORD_A2 = M [ TMP_EA + 1 ];
		TMP_SWORD_A1 = M [ TMP_EA + 2 ];
		TMP_SWORD_A0 = M [ TMP_EA + 3 ];

		GPR [ rd ] = TMP_SWORD;

		}
	user0 = "2"

op stwcx ( rs: REG_IND, ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "stwcx. %s,%s,%s", rs.syntax, ra.syntax, rb.syntax )
	image  = format ( "011111%s%s%s00100101101", rs.image, ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		if TMP_RESERVE == 1 then
			TMP_SWORD = rs;
			M [ TMP_EA ] = TMP_SWORD_A3;
			M [ TMP_EA + 1 ] = TMP_SWORD_A2;
			M [ TMP_EA + 2 ] = TMP_SWORD_A1;
			M [ TMP_EA + 3 ] = TMP_SWORD_A0;
			CR[7] = 2;
			CR[7]<SO..SO> = XER<SO_XER..SO_XER>;
			TMP_RESERVE = 0;
		else
			CR[7] = 0;
			CR[7]<SO..SO> = XER<SO_XER..SO_XER>;
		endif;
		}
 	user0 = "3"

op sync ( )
	syntax = "sync"
	image  = "01111100000000000000010010101100"
	action = {
		}

// 2.2.6 Trap Instructions
// TW, TWI

op trap_instr ( x : trap_instr_action )
	syntax = x.syntax
	image = x.image
	action = { x.action; }
        category = TRAP

op trap_instr_action = tw | twi

op tw ( to: card(5), ra: REG_IND, rb: REG_IND )
	syntax = format ( "tw %d,%s,%s", to, ra.syntax, rb.syntax )
	image  = format ( "011111%5b%s%s00000001000", to, ra.image, rb.image )
	action = {
		if ( to == 1 & ra < rb ) then
			// TRAP how do we make a trap???
		endif;
		if ( to == 2 & ra > rb ) then
			// TRAP how do we make a trap???
		endif;
		if ( to == 4 & ra == rb ) then
			// TRAP how do we make a trap???
		endif;
		if ( to == 8 & ( ( ra > 0 & rb < 0 ) |
						 ( ra > 0 & rb > 0 & ra < rb ) |
						 ( ra < 0 & rb < 0 & ra > rb ) ) ) then
			// TRAP how do we make a trap???
		endif;
		if ( to == 16 & ( ( ra < 0 & rb > 0 ) |
						  ( ra > 0 & rb > 0 & ra > rb ) |
						  ( ra < 0 & rb < 0 & ra < rb ) ) ) then
			// TRAP how do we make a trap???
		endif;
		}

op twi ( to: card(5), ra: REG_IND, b: SIMM16 )
	syntax = format ( "twi %d,%s,%s", to, ra.syntax, b.syntax )
	image  = format ( "000011%5b%s%s", to, ra.image, b.image )
	action = {
		TMP_WORD = b;
		if ( to == 1 & ra < TMP_WORD ) then
			// TRAP how do we make a trap???
		endif;
		if ( to == 2 & ra > TMP_WORD ) then
			// TRAP how do we make a trap???
		endif;
		if ( to == 4 & ra == TMP_WORD ) then
			// TRAP how do we make a trap???
		endif;
		if ( to == 8 & ( ( ra > 0 & TMP_WORD < 0 ) |
						 ( ra > 0 & TMP_WORD > 0 & ra < TMP_WORD ) |
						 ( ra < 0 & TMP_WORD < 0 & ra > TMP_WORD ) ) ) then
			// TRAP how do we make a trap???
		endif;
		if ( to == 16 & ( ( ra < 0 & TMP_WORD > 0 ) |
						  ( ra > 0 & TMP_WORD > 0 & ra > TMP_WORD ) |
						  ( ra < 0 & TMP_WORD < 0 & ra < TMP_WORD ) ) ) then
			// TRAP how do we make a trap???
		endif;
		}

// End PowerPc755 Description
#line 1 "nmp/oea_instr.nmp"
///****************************************************************************
//                                oea_instr.nmp
//                              ------------------
//    date            : May 2003
//    copyright       : Institut de Recherche en Informatique de Toulouse
//    author          : Daniel Gracia-Perez
//    email           : sainrat@irit.fr
// ****************************************************************************/
//
///****************************************************************************
// *                                                                          *
// *   This program is free software; you can redistribute it and/or modify   *
// *   it under the terms of the GNU General Public License as published by   *
// *   the Free Software Foundation; either version 2 of the License, or      *
// *   (at your option) any later version.                                    *
// *                                                                          *
// ****************************************************************************/


// This file contains the nMP description of the OEA
// instructions of the PowerPC

// ========================================================================= //
// 1. Definitions                                                            //
// ========================================================================= //
//
// 1.1.6 Category of instructions
// Might be used to know in which functional unit the instruction is executed
let SEG = "15"   // Segment Register Manipulation Instructions
let TLB = "16"           // Lookaside Buffer Management Instructions


// ========================================================================= //
//  2. Instructions                                                          //
// ========================================================================= //

// checking if the processor is in superuser mode, if not exception
op oea_instr ( x: oea_instr_action)
	syntax = x.syntax
	image  = x.image
	action = {
		if MSR<MSR_PR..MSR_PR> then
			"launch_exception"("instr",PROGRAM);
		else
			x.action;
		endif;
		}


op oea_instr_action = oea_cache_man_instr       // cache management instructions
                    | oea_proc_control_instr    // processor control instructions
                    | oea_seg_reg_man_instr     // segment register manipulation instructions
                    | oea_sys_link_instr        // system linkage instructions (without sc)
                    | oea_tlb_man_instr         // lookaside buffer management instructions

// ------------------------------------------------------------------------- //
// 2.1 cache management instructions
// ------------------------------------------------------------------------- //
op  oea_cache_man_instr( x : oea_cache_man_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = CACHE

op oea_cache_man_instr_action = oea_dcbi

op oea_dcbi ( ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "dcbi %s,%s", ra.syntax, rb.syntax )
	image  = format ( "01111100000%s%s01110101100", ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		}

// ------------------------------------------------------------------------- //
// 2.2 processor control instructions
// ------------------------------------------------------------------------- //

op  oea_proc_control_instr ( x :oea_proc_control_instr_action  )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = CONTROL

op oea_proc_control_instr_action =   oea_mfmsr
                            | oea_mfspr
                            | oea_mtmsr
                            | oea_mtspr

op oea_mfmsr ( rd : REG_IND)
	syntax = format ( "mfmsr %s", rd.syntax )
	image  = format ( "011111%s000000000000010100110", rd.image )
	action = {
			rd = MSR;
		}

op oea_mfspr ( rd : REG_IND, spr : card ( 9 ) )
   syntax = format ( "mfspr %s,%d", rd.syntax , spr )
   image  = format ( "011111%s1%9b01010100110", rd.image, spr )
   action = {
              	TMP_HWORD = spr;
		TMP_WORD = 0;
              	TMP_WORD = TMP_HWORD < 4..0 >;
              	TMP_WORD = TMP_WORD << 5;
              	TMP_WORD = (TMP_WORD | ( TMP_HWORD < 8..5 > & 0x0000000f))|0x00000010;
		switch(TMP_WORD) {
			case 1:    GPR[rd] = XER      ;
			case 8:    GPR[rd] = LR       ;
			case 9:    GPR[rd] = CTR      ;
			case 18:   GPR[rd] = DSISR    ;
			case 19:   GPR[rd] = DAR      ;
                        case 22:   GPR[rd] = DEC      ;
			case 25:   GPR[rd] = SDR1     ;
                        case 26:   GPR[rd] = SRR[0]   ;
                        case 27:   GPR[rd] = SRR[1]   ;
                        case 268:  GPR[rd] = TBL      ;
                        case 269:  GPR[rd] = TBU      ;
                        case 272:  GPR[rd] = SPRG[0]  ;
                        case 273:  GPR[rd] = SPRG[1]  ;
			case 274:  GPR[rd] = SPRG[2]  ;
                        case 275:  GPR[rd] = SPRG[3]  ;
                        case 276:  GPR[rd] = SPRG[4]  ; // mpc755 ONLY
                        case 277:  GPR[rd] = SPRG[5]  ; // mpc755 ONLY
                        case 278:  GPR[rd] = SPRG[6]  ; // mpc755 ONLY
                        case 279:  GPR[rd] = SPRG[7]  ; // mpc755 ONLY
                        case 282:  GPR[rd] = EAR      ;
                        case 287:  GPR[rd] = PVR      ;
                        case 528:  GPR[rd] = IBAT[0]  ;
                        case 529:  GPR[rd] = IBAT[1]  ;
                        case 530:  GPR[rd] = IBAT[2]  ;
                        case 531:  GPR[rd] = IBAT[3]  ;
                        case 532:  GPR[rd] = IBAT[4]  ;
                        case 533:  GPR[rd] = IBAT[5]  ;
                        case 534:  GPR[rd] = IBAT[6]  ;
                        case 535:  GPR[rd] = IBAT[7]  ;
                        case 536:  GPR[rd] = DBAT[0]  ;
                        case 537:  GPR[rd] = DBAT[1]  ;
                        case 538:  GPR[rd] = DBAT[2]  ;
                        case 539:  GPR[rd] = DBAT[3]  ;
                        case 540:  GPR[rd] = DBAT[4]  ;
                        case 541:  GPR[rd] = DBAT[5]  ;
                        case 542:  GPR[rd] = DBAT[6]  ;
                        case 543:  GPR[rd] = DBAT[7]  ;
                        case 560:  GPR[rd] = IBAT[8]  ; // mpc755 ONLY
                        case 561:  GPR[rd] = IBAT[9]  ; // mpc755 ONLY
                        case 562:  GPR[rd] = IBAT[10] ; // mpc755 ONLY
                        case 563:  GPR[rd] = IBAT[11] ; // mpc755 ONLY
                        case 564:  GPR[rd] = IBAT[12] ; // mpc755 ONLY
                        case 565:  GPR[rd] = IBAT[13] ; // mpc755 ONLY
                        case 566:  GPR[rd] = IBAT[14] ; // mpc755 ONLY
                        case 567:  GPR[rd] = IBAT[15] ; // mpc755 ONLY
                        case 568:  GPR[rd] = DBAT[8]  ; // mpc755 ONLY
                        case 569:  GPR[rd] = DBAT[9]  ; // mpc755 ONLY
                        case 570:  GPR[rd] = DBAT[10] ; // mpc755 ONLY
                        case 571:  GPR[rd] = DBAT[11] ; // mpc755 ONLY
                        case 572:  GPR[rd] = DBAT[12] ; // mpc755 ONLY
                        case 573:  GPR[rd] = DBAT[13] ; // mpc755 ONLY
                        case 574:  GPR[rd] = DBAT[14] ; // mpc755 ONLY
                        case 575:  GPR[rd] = DBAT[15] ; // mpc755 ONLY
                        case 936:  GPR[rd] = UMMCR[0] ; // mpc750 & mpc755 ONLY
                        case 937:  GPR[rd] = UPMC[0]  ; // mpc750 & mpc755 ONLY
                        case 938:  GPR[rd] = UPMC[1]  ; // mpc750 & mpc755 ONLY
                        case 939:  GPR[rd] = USIA     ; // mpc750 & mpc755 ONLY
                        case 940:  GPR[rd] = UMMCR[1] ; // mpc750 & mpc755 ONLY
                        case 941:  GPR[rd] = UPMC[2]  ; // mpc750 & mpc755 ONLY
                        case 942:  GPR[rd] = UPMC[3]  ; // mpc750 & mpc755 ONLY
                       	case 952:  GPR[rd] = MMCR[0]  ; // mpc750 & mpc755 ONLY
                        case 953:  GPR[rd] = PMC[0]   ; // mpc750 & mpc755 ONLY
                        case 954:  GPR[rd] = PMC[1]   ; // mpc750 & mpc755 ONLY
                        case 955:  GPR[rd] = SIA      ; // mpc750 & mpc755 ONLY
                        case 956:  GPR[rd] = MMCR[1]  ; // mpc750 & mpc755 ONLY
                        case 957:  GPR[rd] = PMC[2]   ; // mpc750 & mpc755 ONLY
                        case 958:  GPR[rd] = PMC[3]   ; // mpc750 & mpc755 ONLY
                        case 976:  GPR[rd] = DMISS    ; // mpc755 ONLY
                        case 977:  GPR[rd] = DCMP     ; // mpc755 ONLY
                        case 978:  GPR[rd] = HASH[1]  ; // mpc755 ONLY
                        case 979:  GPR[rd] = HASH[2]  ; // mpc755 ONLY
                        case 980:  GPR[rd] = IMISS    ; // mpc755 ONLY
                        case 981:  GPR[rd] = ICMP     ; // mpc755 ONLY
                        case 982:  GPR[rd] = RPA      ; // mpc755 ONLY
                        case 1008: GPR[rd] = HID[0]   ; // mpc750 & mpc755 ONLY
                        case 1009: GPR[rd] = HID[1]   ; // mpc750 & mpc755 ONLY
                  	case 1010: GPR[rd] = IABR     ; // mpc750 & mpc755 ONLY
                        case 1011: GPR[rd] = HID[2]   ; // mpc755 ONLY
                  	case 1013: GPR[rd] = DABR     ; // mpc750 & mpc755 ONLY
                        case 1016: GPR[rd] = L2PM     ; // mpc755 ONLY
                  	case 1017: GPR[rd] = L2CR     ; // mpc750 & mpc755 ONLY
                  	case 1019: GPR[rd] = ICTC     ; // mpc750 & mpc755 ONLY
                  	case 1020: GPR[rd] = THRM[0]  ; // mpc750 & mpc755 ONLY
                  	case 1021: GPR[rd] = THRM[1]  ; // mpc750 & mpc755 ONLY
                  	case 1022: GPR[rd] = THRM[2]  ; // mpc750 & mpc755 ONLY
};
		}

op oea_mtmsr ( rs : REG_IND )
	syntax = format ( "mtmsr %s", rs.syntax )
	image  = format ( "011111%s000000000000100100100", rs.image )
	action = {
			MSR = rs;
		}

op oea_mtspr ( spr : card( 9 ) , rs : index )
	syntax = format ( "mtspr %d,r%d", spr, rs )
	image  = format ( "011111%5b1%9b01110100110", rs, spr )
	action = {
		TMP_HWORD = spr;
		TMP_WORD = 0;
		TMP_WORD = TMP_HWORD < 4..0 >;
		TMP_WORD = TMP_WORD << 5;
		TMP_WORD = (TMP_WORD | ( TMP_HWORD < 8..5 > & 0x0000000f))|0x00000010;

		switch(TMP_WORD) {
		  case 1:    XER      = GPR[rs] ;
		  case 8:    LR       = GPR[rs] ;
		  case 9:    CTR      = GPR[rs] ;
		  case 18:   DSISR    = GPR[rs] ;
		  case 19:   DAR      = GPR[rs] ;
                  case 22:   DEC      = GPR[rs] ;
		  case 25:   SDR1     = GPR[rs] ;
                  case 26:   SRR[0]   = GPR[rs] ;
                  case 27:   SRR[1]   = GPR[rs] ;
                  case 272:  SPRG[0]  = GPR[rs] ;
                  case 273:  SPRG[1]  = GPR[rs] ;
		  case 274:  SPRG[2]  = GPR[rs] ;
                  case 275:  SPRG[3]  = GPR[rs] ;
                  case 276:  SPRG[4]  = GPR[rs] ; // mpc755 ONLY
                  case 277:  SPRG[5]  = GPR[rs] ; // mpc755 ONLY
                  case 278:  SPRG[6]  = GPR[rs] ; // mpc755 ONLY
                  case 279:  SPRG[7]  = GPR[rs] ; // mpc755 ONLY
                  case 282:  EAR      = GPR[rs] ;
                  case 284:  TBL      = GPR[rs] ;
                  case 285:  TBU      = GPR[rs] ;
                  case 287:  PVR      = GPR[rs] ;
                  case 528:  IBAT[0]  = GPR[rs] ;
                  case 529:  IBAT[1]  = GPR[rs] ;
                  case 530:  IBAT[2]  = GPR[rs] ;
                  case 531:  IBAT[3]  = GPR[rs] ;
                  case 532:  IBAT[4]  = GPR[rs] ;
                  case 533:  IBAT[5]  = GPR[rs] ;
                  case 534:  IBAT[6]  = GPR[rs] ;
                  case 535:  IBAT[7]  = GPR[rs] ;
                  case 536:  DBAT[0]  = GPR[rs] ;
                  case 537:  DBAT[1]  = GPR[rs] ;
                  case 538:  DBAT[2]  = GPR[rs] ;
                  case 539:  DBAT[3]  = GPR[rs] ;
                  case 540:  DBAT[4]  = GPR[rs] ;
                  case 541:  DBAT[5]  = GPR[rs] ;
                  case 542:  DBAT[6]  = GPR[rs] ;
                  case 543:  DBAT[7]  = GPR[rs] ;
                  case 560:  IBAT[8]  = GPR[rs] ; // mpc755 ONLY
                  case 561:  IBAT[9]  = GPR[rs] ; // mpc755 ONLY
                  case 562:  IBAT[10] = GPR[rs] ; // mpc755 ONLY
                  case 563:  IBAT[11] = GPR[rs] ; // mpc755 ONLY
                  case 564:  IBAT[12] = GPR[rs] ; // mpc755 ONLY
                  case 565:  IBAT[13] = GPR[rs] ; // mpc755 ONLY
      		  case 566:  IBAT[14] = GPR[rs] ; // mpc755 ONLY
      		  case 567:  IBAT[15] = GPR[rs] ; // mpc755 ONLY
      		  case 568:  DBAT[8]  = GPR[rs] ; // mpc755 ONLY
      		  case 569:  DBAT[9]  = GPR[rs] ; // mpc755 ONLY
      		  case 570:  DBAT[10] = GPR[rs] ; // mpc755 ONLY
      		  case 571:  DBAT[11] = GPR[rs] ; // mpc755 ONLY
      		  case 572:  DBAT[12] = GPR[rs] ; // mpc755 ONLY
      		  case 573:  DBAT[13] = GPR[rs] ; // mpc755 ONLY
      		  case 574:  DBAT[14] = GPR[rs] ; // mpc755 ONLY
      		  case 575:  DBAT[15] = GPR[rs] ; // mpc755 ONLY
          	  case 936:  UMMCR[0] = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 937:  UPMC[0]  = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 938:  UPMC[1]  = GPR[rs] ; // mpc750 & mpc755 ONLY
          	  case 939:  USIA     = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 940:  UMMCR[1] = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 941:  UPMC[2]  = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 942:  UPMC[3]  = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 952:  MMCR[0]  = GPR[rs] ; // mpc750 & mpc755 ONLY
            	  case 953:  PMC[0]   = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 954:  PMC[1]   = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 955:  SIA      = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 956:  MMCR[1]  = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 957:  PMC[2]   = GPR[rs] ; // mpc750 & mpc755 ONLY
           	  case 958:  PMC[3]   = GPR[rs] ; // mpc750 & mpc755 ONLY
      		  case 976:  DMISS    = GPR[rs] ; // mpc755 ONLY
      		  case 977:  DCMP     = GPR[rs] ; // mpc755 ONLY
      		  case 978:  HASH[1]  = GPR[rs] ; // mpc755 ONLY
      		  case 979:  HASH[2]  = GPR[rs] ; // mpc755 ONLY
      		  case 980:  IMISS    = GPR[rs] ; // mpc755 ONLY
      		  case 981:  ICMP     = GPR[rs] ; // mpc755 ONLY
      		  case 982:  RPA      = GPR[rs] ; // mpc755 ONLY
      		  case 1008: HID[0]   = GPR[rs] ; // mpc755 ONLY
      		  case 1009: HID[1]   = GPR[rs] ; // mpc755 ONLY
                  case 1010: IABR     = GPR[rs] ; // mpc750 & mpc755 ONLY
      		  case 1011: HID[2]   = GPR[rs] ; // mpc755 ONLY
                  case 1013: DABR     = GPR[rs] ; // mpc750 & mpc755 ONLY
                  case 1016: L2PM     = GPR[rs] ; // mpc755 ONLY
                  case 1017: L2CR     = GPR[rs] ; // mpc750 & mpc755 ONLY
                  case 1019: ICTC     = GPR[rs] ; // mpc750 & mpc755 ONLY
                  case 1020: THRM[0]  = GPR[rs] ; // mpc750 & mpc755 ONLY
                  case 1021: THRM[1]  = GPR[rs] ; // mpc750 & mpc755 ONLY
                  case 1022: THRM[2]  = GPR[rs] ; // mpc750 & mpc755 ONLY
			};
		}

// ------------------------------------------------------------------------- //
// 2.3 segment register manipulation instructions
// ------------------------------------------------------------------------- //

op  oea_seg_reg_man_instr ( x : oea_seg_reg_man_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = SEG

op oea_seg_reg_man_instr_action  =   oea_mfsr
                                   | oea_mfsrin
                                   | oea_mtsr
                                   | oea_mtsrin

op oea_mfsr ( rd : REG_IND , sr : card(4) )
	syntax = format ( "mfsr %s,%d", rd.syntax, sr )
	image  = format ( "011111%s0%4b0000010010100110", rd.image, sr )
	action = {
			rd = SR[sr];
		}

op oea_mfsrin ( rd : REG_IND , rb : REG_IND )
	syntax = format ( "mfsrin %s,%s", rd.syntax, rb.syntax )
	image  = format ( "011111%s00000%s10100100110", rd.image, rb.image )
	action = {
			rd = SR [ rb <31..28> ];
		}

op oea_mtsr ( sr : card(4) , rd : REG_IND )
	syntax = format ( "mtsr %d,%s", sr, rd.syntax )
	image  = format ( "011111%s0%4b0000000110100100", rd.image, sr )
	action = {
			SR[sr] = rd;
		}

op oea_mtsrin ( rs : REG_IND , rb : REG_IND )
	syntax = format ( "mtsrin %s,%s", rs.syntax, rb.syntax )
	image  = format ( "011111%s00000%s00111100100", rs.image, rb.image )
	action = {
			SR[ rb < 31..28 > ] = rs;
		}

// ------------------------------------------------------------------------- //
// 2.4 system linkage instructions (without sc)
// ------------------------------------------------------------------------- //
op  oea_sys_link_instr ( x : oea_sys_link_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = SYSTEM

op oea_sys_link_instr_action =   oea_rfi

op oea_rfi ( )
	syntax = "rfi"
	image  = "01001100000000000000000001100100"
	action = {
// Hmmm. rfi should be executed only in program order.
// ToDo : This should be replaced by an external function which is executed only at complete.
			MSR < 31..31 > = SRR [1] < 31..31 >;
			MSR < 26..22 > = SRR [1] < 26..22 >;
			MSR < 15..8 >  = SRR [1] < 15..8 >;
			MSR < 6..4 >   = SRR [1] < 6..4 >;
			MSR < 1..0 >   = SRR [1] < 1..0 >;
			MSR < 18..18 > = SRR [1] < 18..18 >;
			NIA = SRR [0] & 0xfffffffc;
		}
        category = SYSTEM
// ------------------------------------------------------------------------- //
// 2.5 translation lookaside buffer (TLB) management instructions
// ------------------------------------------------------------------------- //

op  oea_tlb_man_instr ( x : oea_tlb_man_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = TLB

op oea_tlb_man_instr_action  =   oea_tlbia
                        | oea_tlbie
                        | oea_tlbsync

op oea_tlbia ()
	syntax = "tlbia"
	image  = "01111100000000000000001011100100"
	action = {
			// TLB management is hardware-dependent
			// Nothing to do in the iss
		}

op oea_tlbie ( rb : REG_IND )
	syntax = format ( "tlbie %s", rb.syntax )
	image  = format ( "0111110000000000%s01001100100", rb.image )
	action = {
			// TLB management is hardware-dependent
			// Nothing to do in the iss
		}

op oea_tlbsync ()
	syntax = "tlbsync"
	image  = "01111100000000000000010001101100"
	action = {
			// TLB management is hardware-dependent
			// Nothing to do in the iss
		}
#line 1 "nmp/vea_instr.nmp"
///****************************************************************************
//                                vea_instr.nmp
//                              ------------------
//    date            : May 2003
//    copyright       : Institut de Recherche en Informatique de Toulouse
//    author          : Daniel Gracia-Perez
//    email           : sainrat@irit.fr
// ****************************************************************************/
//
///****************************************************************************
// *                                                                          *
// *   This program is free software; you can redistribute it and/or modify   *
// *   it under the terms of the GNU General Public License as published by   *
// *   the Free Software Foundation; either version 2 of the License, or      *
// *   (at your option) any later version.                                    *
// *                                                                          *
// ****************************************************************************/


// This file contains the nMP description of the VEA
// instructions of the PowerPC

// ========================================================================= //
// 1. Definitions                                                            //
// ========================================================================= //
// nada

// ========================================================================= //
//  2. Instructions                                                          //
// ========================================================================= //


op vea_instr =    vea_cache_man_instr       // cache management instructions
                | vea_ext_control_instr     // external control instructions
                | vea_mem_sync_instr        // memory synchronization instructions
                | vea_proc_control_instr    // processor control instructions

// ------------------------------------------------------------------------- //
// 2.1 cache management instructions
// ------------------------------------------------------------------------- //

op  vea_cache_man_instr( x : vea_cache_man_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = CACHE

op vea_cache_man_instr_action =   vea_dcbf
                        | vea_dcbst
                        | vea_dcbt
                        | vea_dcbtst
                        | vea_dcbz
                        | vea_icbi
                        | vea_dcba

op vea_dcbf ( ra: REG_IND_ZERO, rb: REG_IND )

	syntax = format ( "dcbf %s,%s", ra.syntax, rb.syntax )
	image  = format ( "01111100000%s%s00010101100", ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		}

op vea_dcbst ( ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "dcbst %s,%s", ra.syntax, rb.syntax )
	image  = format ( "01111100000%s%s00001101100", ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		}

op vea_dcbt ( ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "dcbt %s,%s", ra.syntax, rb.syntax )
	image  = format ( "01111100000%s%s01000101100", ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		}

op vea_dcbtst ( ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "dcbtst %s,%s", ra.syntax, rb.syntax )
	image  = format ( "01111100000%s%s00111101100", ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		}

op vea_dcbz ( ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "dcbz %s,%s", ra.syntax, rb.syntax )
	image  = format ( "01111100000%s%s11111101100", ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		TMP_WORD=TMP_EA-(TMP_EA%32);
		TMP_SWORD=0;
		recurs;
		}
	recurs = {
		if TMP_SWORD<32 then
			M[TMP_WORD+TMP_SWORD]=0;
			TMP_SWORD=TMP_SWORD+1;
			recurs;
		endif;
		}

op vea_icbi ( ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "icbi %s,%s", ra.syntax, rb.syntax )
	image  = format ( "01111100000%s%s11110101100", ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		}

op vea_dcba ( ra: REG_IND_ZERO, rb: REG_IND )

	syntax = format ( "dcba %s,%s", ra.syntax, rb.syntax )
	image  = format ( "0111 1100 000 %s %s 001 0101 1000", ra.image, rb.image )
	action = {
		TMP_EA = ra + rb;
		}

// ------------------------------------------------------------------------- //
// 2.2 external control instructions
// ------------------------------------------------------------------------- //

op  vea_ext_control_instr( x : vea_ext_control_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = EXT

op vea_ext_control_instr_action  =   vea_eciwx
                            | vea_ecowx


op vea_eciwx ( rd: REG_IND, ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "eciwx %s,%s,%s",rd.syntax,ra.syntax,rb.syntax )
	image  = format ( "011111%s%s%s01001101100", rd.image, ra.image, rb.image )
	action = {
		}
	user0 = "2"

op vea_ecowx ( rs: REG_IND, ra: REG_IND_ZERO, rb: REG_IND )
	syntax = format ( "ecowx %s,%s,%s",rs.syntax,ra.syntax,rb.syntax )
	image  = format ( "011111%s%s%s01101101100", rs.image, ra.image, rb.image )
	action = {
		}


// ------------------------------------------------------------------------- //
// 2.3 memory synchronization instructions
// ------------------------------------------------------------------------- //

op  vea_mem_sync_instr( x : vea_mem_sync_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = MEMSYNC

op vea_mem_sync_instr_action =   vea_eieio
                        | vea_isync

op vea_eieio ()
	syntax = "eieio"
   	image  = "01111100000000000000011010101100"
  	action = {
		}

op vea_isync ()
	syntax = "isync"
	image  = "01001100000000000000000100101100"
	action = {
		}

// ------------------------------------------------------------------------- //
// 2.4 processor control instructions
// ------------------------------------------------------------------------- //

op  vea_proc_control_instr( x : vea_proc_control_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = CONTROL

op vea_proc_control_instr_action = vea_mftb

op vea_mftb ( rd : index, tbr : card ( 10 ) )
	syntax = format ( "mftb r%d,%d", rd, tbr )
	image  = format ( "011111%5b%10b01011100110", rd, tbr )
	action = {
		TMP_HWORD = tbr;
		TMP_WORD = 0;
		TMP_WORD = TMP_HWORD < 4..0 >;
		TMP_WORD = TMP_WORD << 5;
		TMP_WORD = TMP_WORD | ( TMP_HWORD < 9..5 > & 0x0000001f);

		if TMP_WORD == 268 then
			GPR[rd] = TBL;
		else
			if TMP_WORD == 269 then
				GPR[rd] =TBU;
			endif;
		endif;
		}

#line 1 "nmp/uisa_fp_instr.nmp"
// ****************************************************************************
//                              uisa_fp_instr.nmp
//                              ------------------
//    date            : May 2003
//    copyright       : Institut de Recherche en Informatique de Toulouse
//    author          : Daniel Gracia-Perez & Marc Finet
//    email           : sainrat@irit.fr
// ****************************************************************************

// ****************************************************************************
// *                                                                          *
// *   This program is free software; you can redistribute it and/or modify   *
// *   it under the terms of the GNU General Public License as published by   *
// *   the Free Software Foundation; either version 2 of the License, or      *
// *   (at your option) any later version.                                    *
// *                                                                          *
// ****************************************************************************

// ************************************************************************* //
//                               uisa_fp description                         //
// ************************************************************************* //
// This file contains the nMP description of the floating-point
// instructions of the PowerPC and the associated constants, macros, ...

// ========================================================================= //
// 1. Definitions                                                            //
// ========================================================================= //

// ------------------------------------------------------------------------- //
// 1.1 Constants                                                             //
// ------------------------------------------------------------------------- //

let FP_RN_TONEAREST = 0
let FP_RN_TOWARDZERO =1
let FP_RN_UPWARD =2
let FP_RN_DOWNWARD =3
let FP_FX =31
let FP_FEX =30
let FP_VX =29
let FP_OX= 28
let FP_UX =27
let FP_ZX =26
let FP_XX =25
let FP_VXSNAN =24
let FP_VXISI =23
let FP_VXIDI =22
let FP_VXZDZ =21
let FP_VXIMZ =20
let FP_VXVC =19
let FP_FR =18
let FP_FI =17
let FP_VXSOFT =10
let FP_VXSQRT =9
let FP_VXCVI =8
let FP_VE =7
let FP_OE= 6
let FP_UE =5
let FP_ZE =4
let FP_XE =3
let FP_NI =2

// Category of instructions
// Might be used to know in which functional unit the instruction is executed
let FPARITH = "17"   // Floating-Point Arithmetic Instructions
let FPMUL = "18"
let FPDIV = "19"
let FPMADD = "20"     // FP mul add
let FPRC = "21" // FP rounding and convert
let FPLOAD = "22"
let FPSTORE = "23"
let FPSCRI = "24" // FP status and control register instructions
let FPCMP = "25" // FP compare
let FPMOV = "26"

// ------------------------------------------------------------------------- //
// 1.2 Types                                                                 //
// ------------------------------------------------------------------------- //
// Declared in ppc.nmp : flot flots xflot sflot


// ------------------------------------------------------------------------- //
// 1.3  Memory and registers                                                 //
// ------------------------------------------------------------------------- //

// Declared in ppc.nmp : reg FPR     [ 2 ** REGS , flot ]


// ------------------------------------------------------------------------- //
// 1.4  Internal variables                                                   //
// ------------------------------------------------------------------------- //

// 1.4.1 variables
// ---------------
reg TMP_FLOT   [ 1 , flot ]
reg TMP_FLOT1  [ 1 , flot ]
reg TMP_FLOTS  [ 1 , flots ]
reg TMP_FLOTS1 [ 1 , flots ]
reg TMP_FLOTS2 [ 1 , flots ]
reg TMP_XFLOT  [ 1 , xflot ]
//reg TMP_YFLOT  [ 1 , sflot ]


// 1.4.2 Aliases
// -------------

// Double Presicion Float

reg TMP_FLOT_A7 [ 1 , int ( 8 ) ]
    alias = TMP_FLOT [ 63 ]

reg TMP_FLOT_A6 [ 1 , int ( 8 ) ]
    alias = TMP_FLOT [ 55 ]

reg TMP_FLOT_A5 [ 1 , int ( 8 ) ]
    alias = TMP_FLOT [ 47 ]

reg TMP_FLOT_A4 [ 1 , int ( 8 ) ]
    alias = TMP_FLOT [ 39 ]

reg TMP_FLOT_A3 [ 1 , int ( 8 ) ]
    alias = TMP_FLOT [ 31 ]

reg TMP_FLOT_A2 [ 1 , int ( 8 ) ]
    alias = TMP_FLOT [ 23 ]

reg TMP_FLOT_A1 [ 1 , int ( 8 ) ]
    alias = TMP_FLOT [ 15 ]

reg TMP_FLOT_A0 [ 1 , int ( 8 ) ]
    alias = TMP_FLOT [ 7 ]

// Single Presicion Float

reg TMP_FLOTS_A3 [ 1 , int ( 8 ) ]
    alias = TMP_FLOTS [ 31 ]

reg TMP_FLOTS_A2 [ 1 , int ( 8 ) ]
    alias = TMP_FLOTS [ 23 ]

reg TMP_FLOTS_A1 [ 1 , int ( 8 ) ]
    alias = TMP_FLOTS [ 15 ]

reg TMP_FLOTS_A0 [ 1 , int ( 8 ) ]
    alias = TMP_FLOTS [ 7 ]


// ------------------------------------------------------------------------- //
// 1.5 Addressing Modes                                                      //
// ------------------------------------------------------------------------- //

mode FREG_IND ( r : index ) = FPR [ r ]
	syntax = format ( "fr%d", r )
	image  = format ( "%5b", r )

// ------------------------------------------------------------------------- //
// 1.6 Macros                                                                //
// ------------------------------------------------------------------------- //

#line 161 "nmp/uisa_fp_instr.nmp"
#line 163 "nmp/uisa_fp_instr.nmp"
#line 169 "nmp/uisa_fp_instr.nmp"
#line 172 "nmp/uisa_fp_instr.nmp"
#line 175 "nmp/uisa_fp_instr.nmp"
#line 190 "nmp/uisa_fp_instr.nmp"
#line 195 "nmp/uisa_fp_instr.nmp"
#line 206 "nmp/uisa_fp_instr.nmp"
#line 209 "nmp/uisa_fp_instr.nmp"
#line 212 "nmp/uisa_fp_instr.nmp"
#line 215 "nmp/uisa_fp_instr.nmp"
#line 218 "nmp/uisa_fp_instr.nmp"
#line 221 "nmp/uisa_fp_instr.nmp"
#line 224 "nmp/uisa_fp_instr.nmp"
#line 227 "nmp/uisa_fp_instr.nmp"
#line 230 "nmp/uisa_fp_instr.nmp"
#line 233 "nmp/uisa_fp_instr.nmp"
#line 236 "nmp/uisa_fp_instr.nmp"
#line 239 "nmp/uisa_fp_instr.nmp"
#line 242 "nmp/uisa_fp_instr.nmp"
#line 245 "nmp/uisa_fp_instr.nmp"
#line 248 "nmp/uisa_fp_instr.nmp"
#line 251 "nmp/uisa_fp_instr.nmp"
#line 254 "nmp/uisa_fp_instr.nmp"
#line 281 "nmp/uisa_fp_instr.nmp"
#line 284 "nmp/uisa_fp_instr.nmp"
#line 287 "nmp/uisa_fp_instr.nmp"
#line 290 "nmp/uisa_fp_instr.nmp"
#line 293 "nmp/uisa_fp_instr.nmp"
#line 296 "nmp/uisa_fp_instr.nmp"
#line 299 "nmp/uisa_fp_instr.nmp"
#line 302 "nmp/uisa_fp_instr.nmp"
#line 305 "nmp/uisa_fp_instr.nmp"
#line 308 "nmp/uisa_fp_instr.nmp"
#line 343 "nmp/uisa_fp_instr.nmp"
#line 380 "nmp/uisa_fp_instr.nmp"
#line 391 "nmp/uisa_fp_instr.nmp"
#line 398 "nmp/uisa_fp_instr.nmp"
#line 408 "nmp/uisa_fp_instr.nmp"
#line 415 "nmp/uisa_fp_instr.nmp"
#line 422 "nmp/uisa_fp_instr.nmp"
#line 435 "nmp/uisa_fp_instr.nmp"
#line 449 "nmp/uisa_fp_instr.nmp"
#line 464 "nmp/uisa_fp_instr.nmp"
// ========================================================================= //
//  2. Instructions                                                          //
// ========================================================================= //

op uisa_fp_instr ( x: uisa_fp_instr_action )
	syntax = x.syntax
	image  = x.image
	action = {
		if MSR<MSR_FP..MSR_FP> then
			x.action;
		else
			"launch_exception"("instr",FP_UNAVAIL);
		endif;
		}

op uisa_fp_instr_action =   ufp_load_store_instr      // fp load/store instructions
                          | ufp_instr                 // fp arithmethic instructions
                          | ufp_status_cr_instr       // fp status/control instructions

// ------------------------------------------------------------------------- //
// 2.1 Floating Point load/store instructions
// ------------------------------------------------------------------------- //

op ufp_load_store_instr =   ufp_load
                          | ufp_store

// 2.1.1 Floating Point load instructions
// --------------------------------------
op ufp_load ( x : ufp_load_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPLOAD

op ufp_load_action =   ufp_load_double
                     | ufp_load_single

// fp load single instructions
op ufp_load_single =   ufp_l_single
                     | ufp_l_single_indexed
                     | ufp_l_single_update
                     | ufp_l_single_update_indexed

op ufp_l_single ( frd : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "lfs fr%d,%s(%s)", frd, d.syntax, ra.syntax )
   image  = format ( "110000%5b%s%16b", frd, ra.image, d.image )
   action = {

			if 	FPSCR < 1..0 >
#line 512 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 512 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 512 "nmp/uisa_fp_instr.nmp"
	else
#line 512 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 512 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 512 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 512 "nmp/uisa_fp_instr.nmp"
		else
#line 512 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 512 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 512 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 512 "nmp/uisa_fp_instr.nmp"
			else
#line 512 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 512 "nmp/uisa_fp_instr.nmp"
			endif;
#line 512 "nmp/uisa_fp_instr.nmp"
		endif;
#line 512 "nmp/uisa_fp_instr.nmp"
	endif;
#line 512 "nmp/uisa_fp_instr.nmp"
;
#line 512 "nmp/uisa_fp_instr.nmp"
#line 513 "nmp/uisa_fp_instr.nmp"

		TMP_EA = ra + d;

		TMP_FLOTS_A3 = M [ TMP_EA ];
		TMP_FLOTS_A2 = M [ TMP_EA + 1 ];
		TMP_FLOTS_A1 = M [ TMP_EA + 2 ];
		TMP_FLOTS_A0 = M [ TMP_EA + 3 ];

		FPR [ frd ] = TMP_FLOTS;

		}
  user0 = "1"

op ufp_l_single_indexed ( frd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lfsx fr%d,%s,%s", frd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10000101110", frd, ra.image, rb.image )
   action = {

			if 	FPSCR < 1..0 >
#line 531 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 531 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 531 "nmp/uisa_fp_instr.nmp"
	else
#line 531 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 531 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 531 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 531 "nmp/uisa_fp_instr.nmp"
		else
#line 531 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 531 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 531 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 531 "nmp/uisa_fp_instr.nmp"
			else
#line 531 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 531 "nmp/uisa_fp_instr.nmp"
			endif;
#line 531 "nmp/uisa_fp_instr.nmp"
		endif;
#line 531 "nmp/uisa_fp_instr.nmp"
	endif;
#line 531 "nmp/uisa_fp_instr.nmp"
;
#line 531 "nmp/uisa_fp_instr.nmp"
#line 532 "nmp/uisa_fp_instr.nmp"
		TMP_EA = ra + rb;

		TMP_FLOTS_A3 = M [ TMP_EA ];
		TMP_FLOTS_A2 = M [ TMP_EA + 1 ];
		TMP_FLOTS_A1 = M [ TMP_EA + 2 ];
		TMP_FLOTS_A0 = M [ TMP_EA + 3 ];

		FPR [ frd ] = TMP_FLOTS;

		}
   user0 = "2"

op ufp_l_single_update ( frd : index, ra : index, d : IADDR )
   syntax = format ( "lfsu fr%d,%s(r%d)", frd, d.syntax, ra )
   image  = format ( "110001%5b%5b%16b", frd, ra, d.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

			if 	FPSCR < 1..0 >
#line 553 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 553 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 553 "nmp/uisa_fp_instr.nmp"
	else
#line 553 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 553 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 553 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 553 "nmp/uisa_fp_instr.nmp"
		else
#line 553 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 553 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 553 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 553 "nmp/uisa_fp_instr.nmp"
			else
#line 553 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 553 "nmp/uisa_fp_instr.nmp"
			endif;
#line 553 "nmp/uisa_fp_instr.nmp"
		endif;
#line 553 "nmp/uisa_fp_instr.nmp"
	endif;
#line 553 "nmp/uisa_fp_instr.nmp"
;
#line 553 "nmp/uisa_fp_instr.nmp"
#line 554 "nmp/uisa_fp_instr.nmp"
		TMP_EA = GPR [ ra ] + d;

		TMP_FLOTS_A3 = M [ TMP_EA ];
		TMP_FLOTS_A2 = M [ TMP_EA + 1 ];
		TMP_FLOTS_A1 = M [ TMP_EA + 2 ];
		TMP_FLOTS_A0 = M [ TMP_EA + 3 ];

		FPR [ frd ] = TMP_FLOTS;
		GPR [ ra ] = TMP_EA;

		}

op ufp_l_single_update_indexed ( frd : index, ra : index, rb : REG_IND )
   syntax = format ( "lfsux fr%d,r%d,%s", frd, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s10001101110", frd, ra, rb.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

			if 	FPSCR < 1..0 >
#line 575 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 575 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 575 "nmp/uisa_fp_instr.nmp"
	else
#line 575 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 575 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 575 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 575 "nmp/uisa_fp_instr.nmp"
		else
#line 575 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 575 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 575 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 575 "nmp/uisa_fp_instr.nmp"
			else
#line 575 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 575 "nmp/uisa_fp_instr.nmp"
			endif;
#line 575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 575 "nmp/uisa_fp_instr.nmp"
;
#line 575 "nmp/uisa_fp_instr.nmp"
#line 576 "nmp/uisa_fp_instr.nmp"
		TMP_EA = GPR [ ra ] + rb;

		TMP_FLOTS_A3 = M [ TMP_EA ];
		TMP_FLOTS_A2 = M [ TMP_EA + 1 ];
		TMP_FLOTS_A1 = M [ TMP_EA + 2 ];
		TMP_FLOTS_A0 = M [ TMP_EA + 3 ];

		FPR [ frd ] = TMP_FLOTS;
		GPR [ ra ] = TMP_EA;

		}

// Floating Point Load Double Precision Instructions

op ufp_load_double =   ufp_l_double
                     | ufp_l_double_indexed
                     | ufp_l_double_update
                     | ufp_l_double_update_indexed

op ufp_l_double ( frd : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "lfd fr%d,%s(%s)", frd, d.syntax, ra.syntax )
   image  = format ( "110010%5b%s%16b", frd, ra.image, d.image )
   action = {
			if 	FPSCR < 1..0 >
#line 599 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 599 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 599 "nmp/uisa_fp_instr.nmp"
	else
#line 599 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 599 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 599 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 599 "nmp/uisa_fp_instr.nmp"
		else
#line 599 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 599 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 599 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 599 "nmp/uisa_fp_instr.nmp"
			else
#line 599 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 599 "nmp/uisa_fp_instr.nmp"
			endif;
#line 599 "nmp/uisa_fp_instr.nmp"
		endif;
#line 599 "nmp/uisa_fp_instr.nmp"
	endif;
#line 599 "nmp/uisa_fp_instr.nmp"
;
#line 599 "nmp/uisa_fp_instr.nmp"
#line 600 "nmp/uisa_fp_instr.nmp"
		TMP_EA = ra + d;

		TMP_FLOT_A7 = M [ TMP_EA ];
		TMP_FLOT_A6 = M [ TMP_EA + 1 ];
		TMP_FLOT_A5 = M [ TMP_EA + 2 ];
		TMP_FLOT_A4 = M [ TMP_EA + 3 ];
		TMP_FLOT_A3 = M [ TMP_EA + 4 ];
		TMP_FLOT_A2 = M [ TMP_EA + 5 ];
		TMP_FLOT_A1 = M [ TMP_EA + 6 ];
		TMP_FLOT_A0 = M [ TMP_EA + 7 ];

		FPR [ frd ] = TMP_FLOT;

		}
  user0 = "1"

op ufp_l_double_indexed ( frd : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "lfdx fr%d,%s,%s", frd, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10010101110", frd, ra.image, rb.image )
   action = {

			if 	FPSCR < 1..0 >
#line 621 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 621 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 621 "nmp/uisa_fp_instr.nmp"
	else
#line 621 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 621 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 621 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 621 "nmp/uisa_fp_instr.nmp"
		else
#line 621 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 621 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 621 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 621 "nmp/uisa_fp_instr.nmp"
			else
#line 621 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 621 "nmp/uisa_fp_instr.nmp"
			endif;
#line 621 "nmp/uisa_fp_instr.nmp"
		endif;
#line 621 "nmp/uisa_fp_instr.nmp"
	endif;
#line 621 "nmp/uisa_fp_instr.nmp"
;
#line 621 "nmp/uisa_fp_instr.nmp"
#line 622 "nmp/uisa_fp_instr.nmp"
		TMP_EA = ra + rb;

		TMP_FLOT_A7 = M [ TMP_EA ];
		TMP_FLOT_A6 = M [ TMP_EA + 1 ];
		TMP_FLOT_A5 = M [ TMP_EA + 2 ];
		TMP_FLOT_A4 = M [ TMP_EA + 3 ];
		TMP_FLOT_A3 = M [ TMP_EA + 4 ];
		TMP_FLOT_A2 = M [ TMP_EA + 5 ];
		TMP_FLOT_A1 = M [ TMP_EA + 6 ];
		TMP_FLOT_A0 = M [ TMP_EA + 7 ];

		FPR [ frd ] = TMP_FLOT;

            }
   user0 = "2"

op ufp_l_double_update ( frd : index, ra : index, d : IADDR )
   syntax = format ( "lfdu fr%d,%s(r%d)", frd, d.syntax, ra )
   image  = format ( "110011%5b%5b%16b", frd, ra, d.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

			if 	FPSCR < 1..0 >
#line 647 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 647 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 647 "nmp/uisa_fp_instr.nmp"
	else
#line 647 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 647 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 647 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 647 "nmp/uisa_fp_instr.nmp"
		else
#line 647 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 647 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 647 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 647 "nmp/uisa_fp_instr.nmp"
			else
#line 647 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 647 "nmp/uisa_fp_instr.nmp"
			endif;
#line 647 "nmp/uisa_fp_instr.nmp"
		endif;
#line 647 "nmp/uisa_fp_instr.nmp"
	endif;
#line 647 "nmp/uisa_fp_instr.nmp"
;
#line 647 "nmp/uisa_fp_instr.nmp"
#line 648 "nmp/uisa_fp_instr.nmp"
		TMP_EA = GPR [ ra ] + d;

		TMP_FLOT_A7 = M [ TMP_EA ];
		TMP_FLOT_A6 = M [ TMP_EA + 1 ];
		TMP_FLOT_A5 = M [ TMP_EA + 2 ];
		TMP_FLOT_A4 = M [ TMP_EA + 3 ];
		TMP_FLOT_A3 = M [ TMP_EA + 4 ];
		TMP_FLOT_A2 = M [ TMP_EA + 5 ];
		TMP_FLOT_A1 = M [ TMP_EA + 6 ];
		TMP_FLOT_A0 = M [ TMP_EA + 7 ];

		FPR [ frd ] = TMP_FLOT;

		GPR [ ra ] = TMP_EA;

		}

op ufp_l_double_update_indexed ( frd : index, ra : index, rb : REG_IND )
   syntax = format ( "lfdux fr%d,r%d,%s", frd, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s10011101110", frd, ra, rb.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

			if 	FPSCR < 1..0 >
#line 674 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 674 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 674 "nmp/uisa_fp_instr.nmp"
	else
#line 674 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 674 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 674 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 674 "nmp/uisa_fp_instr.nmp"
		else
#line 674 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 674 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 674 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 674 "nmp/uisa_fp_instr.nmp"
			else
#line 674 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 674 "nmp/uisa_fp_instr.nmp"
			endif;
#line 674 "nmp/uisa_fp_instr.nmp"
		endif;
#line 674 "nmp/uisa_fp_instr.nmp"
	endif;
#line 674 "nmp/uisa_fp_instr.nmp"
;
#line 674 "nmp/uisa_fp_instr.nmp"
#line 675 "nmp/uisa_fp_instr.nmp"
		TMP_EA = GPR [ ra ] + rb;

		TMP_FLOT_A7 = M [ TMP_EA ];
		TMP_FLOT_A6 = M [ TMP_EA + 1 ];
		TMP_FLOT_A5 = M [ TMP_EA + 2 ];
		TMP_FLOT_A4 = M [ TMP_EA + 3 ];
		TMP_FLOT_A3 = M [ TMP_EA + 4 ];
		TMP_FLOT_A2 = M [ TMP_EA + 5 ];
		TMP_FLOT_A1 = M [ TMP_EA + 6 ];
		TMP_FLOT_A0 = M [ TMP_EA + 7 ];

		FPR [ frd ] = TMP_FLOT;

		GPR [ ra ] = TMP_EA;

		}

// 2.1.2 Floating Point store instructions
// ---------------------------------------
op ufp_store ( x : ufp_store_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPSTORE

op ufp_store_action =   ufp_store_double
                      | ufp_store_single

// Floating Point Store Single Precision Instructions
op ufp_store_single =   ufp_st_single
                      | ufp_st_single_indexed
                      | ufp_st_single_update
                      | ufp_st_single_update_indexed

op ufp_st_single ( frs : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "stfs fr%d,%s(%s)", frs, d.syntax, ra.syntax )
   image  = format ( "110100%5b%s%16b", frs, ra.image, d.image )
   action = {

			if 	FPSCR < 1..0 >
#line 714 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 714 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 714 "nmp/uisa_fp_instr.nmp"
	else
#line 714 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 714 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 714 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 714 "nmp/uisa_fp_instr.nmp"
		else
#line 714 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 714 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 714 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 714 "nmp/uisa_fp_instr.nmp"
			else
#line 714 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 714 "nmp/uisa_fp_instr.nmp"
			endif;
#line 714 "nmp/uisa_fp_instr.nmp"
		endif;
#line 714 "nmp/uisa_fp_instr.nmp"
	endif;
#line 714 "nmp/uisa_fp_instr.nmp"
;
#line 714 "nmp/uisa_fp_instr.nmp"
#line 715 "nmp/uisa_fp_instr.nmp"
		TMP_EA = ra + d;
		TMP_FLOTS = FPR [ frs ];

		M [ TMP_EA ] = TMP_FLOTS_A3;
		M [ TMP_EA + 1 ] = TMP_FLOTS_A2;
		M [ TMP_EA + 2 ] = TMP_FLOTS_A1;
		M [ TMP_EA + 3 ] = TMP_FLOTS_A0;

		}
  user0 = "6"

op ufp_st_single_indexed ( frs : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "stfsx fr%d,%s,%s", frs, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10100101110", frs, ra.image, rb.image )
   action = {

			if 	FPSCR < 1..0 >
#line 731 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 731 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 731 "nmp/uisa_fp_instr.nmp"
	else
#line 731 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 731 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 731 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 731 "nmp/uisa_fp_instr.nmp"
		else
#line 731 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 731 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 731 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 731 "nmp/uisa_fp_instr.nmp"
			else
#line 731 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 731 "nmp/uisa_fp_instr.nmp"
			endif;
#line 731 "nmp/uisa_fp_instr.nmp"
		endif;
#line 731 "nmp/uisa_fp_instr.nmp"
	endif;
#line 731 "nmp/uisa_fp_instr.nmp"
;
#line 731 "nmp/uisa_fp_instr.nmp"
#line 732 "nmp/uisa_fp_instr.nmp"
		TMP_EA = ra + rb;
		TMP_FLOTS = FPR [ frs ];

		M [ TMP_EA ] = TMP_FLOTS_A3;
		M [ TMP_EA + 1 ] = TMP_FLOTS_A2;
		M [ TMP_EA + 2 ] = TMP_FLOTS_A1;
		M [ TMP_EA + 3 ] = TMP_FLOTS_A0;
		}
   user0 = "5"

op ufp_st_single_update ( frs : index, ra : index, d : IADDR )
   syntax = format ( "stfsu fr%d,%s(r%d)", frs, d.syntax, ra )
   image  = format ( "110101%5b%5b%16b", frs, ra, d.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

			if 	FPSCR < 1..0 >
#line 751 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 751 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 751 "nmp/uisa_fp_instr.nmp"
	else
#line 751 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 751 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 751 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 751 "nmp/uisa_fp_instr.nmp"
		else
#line 751 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 751 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 751 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 751 "nmp/uisa_fp_instr.nmp"
			else
#line 751 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 751 "nmp/uisa_fp_instr.nmp"
			endif;
#line 751 "nmp/uisa_fp_instr.nmp"
		endif;
#line 751 "nmp/uisa_fp_instr.nmp"
	endif;
#line 751 "nmp/uisa_fp_instr.nmp"
;
#line 751 "nmp/uisa_fp_instr.nmp"
#line 752 "nmp/uisa_fp_instr.nmp"
		TMP_EA = GPR [ ra ] + d;

		TMP_FLOTS = FPR [ frs ];

		M [ TMP_EA ] = TMP_FLOTS_A3;
		M [ TMP_EA + 1 ] = TMP_FLOTS_A2;
		M [ TMP_EA + 2 ] = TMP_FLOTS_A1;
		M [ TMP_EA + 3 ] = TMP_FLOTS_A0;

		GPR [ ra ] = TMP_EA;

		}

op ufp_st_single_update_indexed ( frs : index, ra : index, rb : REG_IND )
   syntax = format ( "stfsux fr%d,r%d,%s", frs, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s10101101110", frs, ra, rb.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;


			if 	FPSCR < 1..0 >
#line 775 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 775 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 775 "nmp/uisa_fp_instr.nmp"
	else
#line 775 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 775 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 775 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 775 "nmp/uisa_fp_instr.nmp"
		else
#line 775 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 775 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 775 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 775 "nmp/uisa_fp_instr.nmp"
			else
#line 775 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 775 "nmp/uisa_fp_instr.nmp"
			endif;
#line 775 "nmp/uisa_fp_instr.nmp"
		endif;
#line 775 "nmp/uisa_fp_instr.nmp"
	endif;
#line 775 "nmp/uisa_fp_instr.nmp"
;
#line 775 "nmp/uisa_fp_instr.nmp"
#line 776 "nmp/uisa_fp_instr.nmp"
		TMP_EA = GPR [ ra ] + rb;

		TMP_FLOTS = FPR [ frs ];

		M [ TMP_EA ] = TMP_FLOTS_A3;
		M [ TMP_EA + 1 ] = TMP_FLOTS_A2;
		M [ TMP_EA + 2 ] = TMP_FLOTS_A1;
		M [ TMP_EA + 3 ] = TMP_FLOTS_A0;

		GPR [ ra ] = TMP_EA;

		}

// Floating point Store Double precision Instructions

op ufp_store_double =   ufp_st_double
                      | ufp_st_double_indexed
                      | ufp_st_double_update
                      | ufp_st_double_update_indexed

op ufp_st_double ( frs : index, ra : REG_IND_ZERO, d : IADDR )
   syntax = format ( "stfd fr%d,%s(%s)", frs, d.syntax, ra.syntax )
   image  = format ( "110110%5b%s%16b", frs, ra.image, d.image )
   action = {

			if 	FPSCR < 1..0 >
#line 801 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 801 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 801 "nmp/uisa_fp_instr.nmp"
	else
#line 801 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 801 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 801 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 801 "nmp/uisa_fp_instr.nmp"
		else
#line 801 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 801 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 801 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 801 "nmp/uisa_fp_instr.nmp"
			else
#line 801 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 801 "nmp/uisa_fp_instr.nmp"
			endif;
#line 801 "nmp/uisa_fp_instr.nmp"
		endif;
#line 801 "nmp/uisa_fp_instr.nmp"
	endif;
#line 801 "nmp/uisa_fp_instr.nmp"
;
#line 801 "nmp/uisa_fp_instr.nmp"
#line 802 "nmp/uisa_fp_instr.nmp"
		TMP_EA = ra + d;

		TMP_FLOT = FPR [ frs ];

		M [ TMP_EA ] = TMP_FLOT_A7;
		M [ TMP_EA + 1 ] = TMP_FLOT_A6;
		M [ TMP_EA + 2 ] = TMP_FLOT_A5;
		M [ TMP_EA + 3 ] = TMP_FLOT_A4;
		M [ TMP_EA + 4 ] = TMP_FLOT_A3;
		M [ TMP_EA + 5 ] = TMP_FLOT_A2;
		M [ TMP_EA + 6 ] = TMP_FLOT_A1;
		M [ TMP_EA + 7 ] = TMP_FLOT_A0;

		}
  user0 = "6"

op ufp_st_double_indexed ( frs : index, ra : REG_IND_ZERO, rb : REG_IND )
   syntax = format ( "stfdx fr%d,%s,%s", frs, ra.syntax, rb.syntax )
   image  = format ( "011111%5b%s%s10110101110", frs, ra.image, rb.image )
   action = {

			if 	FPSCR < 1..0 >
#line 823 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 823 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 823 "nmp/uisa_fp_instr.nmp"
	else
#line 823 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 823 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 823 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 823 "nmp/uisa_fp_instr.nmp"
		else
#line 823 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 823 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 823 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 823 "nmp/uisa_fp_instr.nmp"
			else
#line 823 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 823 "nmp/uisa_fp_instr.nmp"
			endif;
#line 823 "nmp/uisa_fp_instr.nmp"
		endif;
#line 823 "nmp/uisa_fp_instr.nmp"
	endif;
#line 823 "nmp/uisa_fp_instr.nmp"
;
#line 823 "nmp/uisa_fp_instr.nmp"
#line 824 "nmp/uisa_fp_instr.nmp"
		TMP_EA = ra + rb;

		TMP_FLOT = FPR [ frs ];

		M [ TMP_EA ] = TMP_FLOT_A7;
		M [ TMP_EA + 1 ] = TMP_FLOT_A6;
		M [ TMP_EA + 2 ] = TMP_FLOT_A5;
		M [ TMP_EA + 3 ] = TMP_FLOT_A4;
		M [ TMP_EA + 4 ] = TMP_FLOT_A3;
		M [ TMP_EA + 5 ] = TMP_FLOT_A2;
		M [ TMP_EA + 6 ] = TMP_FLOT_A1;
		M [ TMP_EA + 7 ] = TMP_FLOT_A0;

		}
   user0 = "5"

op ufp_st_double_update ( frs : index, ra : index, d : IADDR )
   syntax = format ( "stfdu fr%d,%s(r%d)", frs, d.syntax, ra )
   image  = format ( "110111%5b%5b%16b", frs, ra, d.image )
   action = {

	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;

			if 	FPSCR < 1..0 >
#line 850 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 850 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 850 "nmp/uisa_fp_instr.nmp"
	else
#line 850 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 850 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 850 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 850 "nmp/uisa_fp_instr.nmp"
		else
#line 850 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 850 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 850 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 850 "nmp/uisa_fp_instr.nmp"
			else
#line 850 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 850 "nmp/uisa_fp_instr.nmp"
			endif;
#line 850 "nmp/uisa_fp_instr.nmp"
		endif;
#line 850 "nmp/uisa_fp_instr.nmp"
	endif;
#line 850 "nmp/uisa_fp_instr.nmp"
;
#line 850 "nmp/uisa_fp_instr.nmp"
#line 851 "nmp/uisa_fp_instr.nmp"
		TMP_EA = GPR [ ra ] + d;

		TMP_FLOT = FPR [ frs ];

		M [ TMP_EA ] = TMP_FLOT_A7;
		M [ TMP_EA + 1 ] = TMP_FLOT_A6;
		M [ TMP_EA + 2 ] = TMP_FLOT_A5;
		M [ TMP_EA + 3 ] = TMP_FLOT_A4;
		M [ TMP_EA + 4 ] = TMP_FLOT_A3;
		M [ TMP_EA + 5 ] = TMP_FLOT_A2;
		M [ TMP_EA + 6 ] = TMP_FLOT_A1;
		M [ TMP_EA + 7 ] = TMP_FLOT_A0;

		GPR [ ra ] = TMP_EA;

		}

op ufp_st_double_update_indexed ( frs : index, ra : index, rb : REG_IND )
   syntax = format ( "stfdux fr%d,r%d,%s", frs, ra, rb.syntax )
   image  = format ( "011111%5b%5b%s10111101110", frs, ra, rb.image )
   action = {
	       if (ra==0)
               then
		  "launch_exception"("instr",PROGRAM);
               endif;


			if 	FPSCR < 1..0 >
#line 878 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 878 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 878 "nmp/uisa_fp_instr.nmp"
	else
#line 878 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 878 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 878 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 878 "nmp/uisa_fp_instr.nmp"
		else
#line 878 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 878 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 878 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 878 "nmp/uisa_fp_instr.nmp"
			else
#line 878 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 878 "nmp/uisa_fp_instr.nmp"
			endif;
#line 878 "nmp/uisa_fp_instr.nmp"
		endif;
#line 878 "nmp/uisa_fp_instr.nmp"
	endif;
#line 878 "nmp/uisa_fp_instr.nmp"
;
#line 878 "nmp/uisa_fp_instr.nmp"
#line 879 "nmp/uisa_fp_instr.nmp"
		TMP_EA = GPR [ ra ] + rb;

		TMP_FLOT = FPR [ frs ];

		M [ TMP_EA ] = TMP_FLOT_A7;
		M [ TMP_EA + 1 ] = TMP_FLOT_A6;
		M [ TMP_EA + 2 ] = TMP_FLOT_A5;
		M [ TMP_EA + 3 ] = TMP_FLOT_A4;
		M [ TMP_EA + 4 ] = TMP_FLOT_A3;
		M [ TMP_EA + 5 ] = TMP_FLOT_A2;
		M [ TMP_EA + 6 ] = TMP_FLOT_A1;
		M [ TMP_EA + 7 ] = TMP_FLOT_A0;

		GPR [ ra ] = TMP_EA;

		}

// ------------------------------------------------------------------------- //
// 2.2 Floating point non load/store instructions
// ------------------------------------------------------------------------- //

op ufp_instr ( x : ufp_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }

op ufp_instr_action =   ufp_arithmetic
                      | ufp_mult_add_instr
                      | ufp_compare
                      | ufp_move
                      | ufp_round
                      | ufp_convert

// 2.2.1 Floating point arithmetic instructions
// --------------------------------------------

op ufp_arithmetic =   ufp_add
                    | ufp_subtract
                    | ufp_multiply
                    | ufp_divide

// Floating point add Instructions
op  ufp_add( x : ufp_add_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPARITH

op ufp_add_action =   ufp_add_double
                    | ufp_add_dbl_cr_update
                    | ufp_add_single
                    | ufp_add_sgl_cr_update

op ufp_add_double ( frd : index, fra : index, frb : index )
   syntax = format ( "fadd fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111111%5b%5b%5b00000101010", frd, fra, frb )
   action = {
			if 	FPSCR < 1..0 >
#line 936 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 936 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 936 "nmp/uisa_fp_instr.nmp"
	else
#line 936 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 936 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 936 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 936 "nmp/uisa_fp_instr.nmp"
		else
#line 936 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 936 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 936 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 936 "nmp/uisa_fp_instr.nmp"
			else
#line 936 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 936 "nmp/uisa_fp_instr.nmp"
			endif;
#line 936 "nmp/uisa_fp_instr.nmp"
		endif;
#line 936 "nmp/uisa_fp_instr.nmp"
	endif;
#line 936 "nmp/uisa_fp_instr.nmp"
;
#line 936 "nmp/uisa_fp_instr.nmp"
#line 937 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 937 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 937 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 937 "nmp/uisa_fp_instr.nmp"
	endif;
#line 937 "nmp/uisa_fp_instr.nmp"
;
#line 937 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 937 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 937 "nmp/uisa_fp_instr.nmp"
	endif;
#line 937 "nmp/uisa_fp_instr.nmp"
;
#line 937 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 937 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 937 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 937 "nmp/uisa_fp_instr.nmp"
	endif;
#line 937 "nmp/uisa_fp_instr.nmp"
;
#line 937 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 937 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 937 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 937 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 937 "nmp/uisa_fp_instr.nmp"
;
#line 937 "nmp/uisa_fp_instr.nmp"
;
#line 937 "nmp/uisa_fp_instr.nmp"
#line 938 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = FPR [ fra ] + FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 939 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 939 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 939 "nmp/uisa_fp_instr.nmp"
 then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
	else
#line 939 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 939 "nmp/uisa_fp_instr.nmp"
		 then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		else
#line 939 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 939 "nmp/uisa_fp_instr.nmp"
 then
#line 939 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
			else
#line 939 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 939 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 939 "nmp/uisa_fp_instr.nmp"
	 then
#line 939 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
				else
#line 939 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 939 "nmp/uisa_fp_instr.nmp"
 then
#line 939 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
					else
#line 939 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 939 "nmp/uisa_fp_instr.nmp"
 then
#line 939 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
						else
#line 939 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 939 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 939 "nmp/uisa_fp_instr.nmp"
		 then
#line 939 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
							else
#line 939 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 939 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 939 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 939 "nmp/uisa_fp_instr.nmp"
 then
#line 939 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
								else
#line 939 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
								endif;
#line 939 "nmp/uisa_fp_instr.nmp"
							endif;
#line 939 "nmp/uisa_fp_instr.nmp"
						endif;
#line 939 "nmp/uisa_fp_instr.nmp"
					endif;
#line 939 "nmp/uisa_fp_instr.nmp"
				endif;
#line 939 "nmp/uisa_fp_instr.nmp"
			endif;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 939 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 939 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 939 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		else
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 939 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 939 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
		endif;
#line 939 "nmp/uisa_fp_instr.nmp"
	endif;
#line 939 "nmp/uisa_fp_instr.nmp"
;
#line 939 "nmp/uisa_fp_instr.nmp"
#line 940 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 941 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 941 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 941 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 941 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 941 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 941 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 941 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 941 "nmp/uisa_fp_instr.nmp"
 then
#line 941 "nmp/uisa_fp_instr.nmp"
#line 942 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 942 "nmp/uisa_fp_instr.nmp"
;
#line 942 "nmp/uisa_fp_instr.nmp"
#line 943 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 944 "nmp/uisa_fp_instr.nmp"
;
#line 944 "nmp/uisa_fp_instr.nmp"
#line 945 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_add_dbl_cr_update ( frd : index, fra : index, frb : index )
   syntax = format ( "fadd. fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111111%5b%5b%5b00000101011", frd, fra, frb )
   action = {

			if 	FPSCR < 1..0 >
#line 957 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 957 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 957 "nmp/uisa_fp_instr.nmp"
	else
#line 957 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 957 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 957 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 957 "nmp/uisa_fp_instr.nmp"
		else
#line 957 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 957 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 957 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 957 "nmp/uisa_fp_instr.nmp"
			else
#line 957 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 957 "nmp/uisa_fp_instr.nmp"
			endif;
#line 957 "nmp/uisa_fp_instr.nmp"
		endif;
#line 957 "nmp/uisa_fp_instr.nmp"
	endif;
#line 957 "nmp/uisa_fp_instr.nmp"
;
#line 957 "nmp/uisa_fp_instr.nmp"
#line 958 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 958 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 958 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 958 "nmp/uisa_fp_instr.nmp"
	endif;
#line 958 "nmp/uisa_fp_instr.nmp"
;
#line 958 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 958 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 958 "nmp/uisa_fp_instr.nmp"
	endif;
#line 958 "nmp/uisa_fp_instr.nmp"
;
#line 958 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 958 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 958 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 958 "nmp/uisa_fp_instr.nmp"
	endif;
#line 958 "nmp/uisa_fp_instr.nmp"
;
#line 958 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 958 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 958 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 958 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 958 "nmp/uisa_fp_instr.nmp"
;
#line 958 "nmp/uisa_fp_instr.nmp"
;
#line 958 "nmp/uisa_fp_instr.nmp"
#line 959 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = FPR [ fra ] + FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 960 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 960 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 960 "nmp/uisa_fp_instr.nmp"
 then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
	else
#line 960 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 960 "nmp/uisa_fp_instr.nmp"
		 then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		else
#line 960 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 960 "nmp/uisa_fp_instr.nmp"
 then
#line 960 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
			else
#line 960 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 960 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 960 "nmp/uisa_fp_instr.nmp"
	 then
#line 960 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
				else
#line 960 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 960 "nmp/uisa_fp_instr.nmp"
 then
#line 960 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
					else
#line 960 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 960 "nmp/uisa_fp_instr.nmp"
 then
#line 960 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
						else
#line 960 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 960 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 960 "nmp/uisa_fp_instr.nmp"
		 then
#line 960 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
							else
#line 960 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 960 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 960 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 960 "nmp/uisa_fp_instr.nmp"
 then
#line 960 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
								else
#line 960 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
								endif;
#line 960 "nmp/uisa_fp_instr.nmp"
							endif;
#line 960 "nmp/uisa_fp_instr.nmp"
						endif;
#line 960 "nmp/uisa_fp_instr.nmp"
					endif;
#line 960 "nmp/uisa_fp_instr.nmp"
				endif;
#line 960 "nmp/uisa_fp_instr.nmp"
			endif;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 960 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 960 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 960 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		else
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 960 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 960 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
		endif;
#line 960 "nmp/uisa_fp_instr.nmp"
	endif;
#line 960 "nmp/uisa_fp_instr.nmp"
;
#line 960 "nmp/uisa_fp_instr.nmp"
#line 961 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 962 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 962 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 962 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 962 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 962 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 962 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 962 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 962 "nmp/uisa_fp_instr.nmp"
 then
#line 962 "nmp/uisa_fp_instr.nmp"
#line 963 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 963 "nmp/uisa_fp_instr.nmp"
;
#line 963 "nmp/uisa_fp_instr.nmp"
#line 964 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 965 "nmp/uisa_fp_instr.nmp"
;
#line 965 "nmp/uisa_fp_instr.nmp"
#line 966 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
        	    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 971 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 971 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 971 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 971 "nmp/uisa_fp_instr.nmp"
;
#line 971 "nmp/uisa_fp_instr.nmp"
#line 972 "nmp/uisa_fp_instr.nmp"
		endif;
		}

op ufp_add_single ( frd : index, fra : index, frb : index )
   syntax = format ( "fadds fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111011%5b%5b%5b00000101010", frd, fra, frb )
   action = {

			if 	FPSCR < 1..0 >
#line 980 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 980 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 980 "nmp/uisa_fp_instr.nmp"
	else
#line 980 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 980 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 980 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 980 "nmp/uisa_fp_instr.nmp"
		else
#line 980 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 980 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 980 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 980 "nmp/uisa_fp_instr.nmp"
			else
#line 980 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 980 "nmp/uisa_fp_instr.nmp"
			endif;
#line 980 "nmp/uisa_fp_instr.nmp"
		endif;
#line 980 "nmp/uisa_fp_instr.nmp"
	endif;
#line 980 "nmp/uisa_fp_instr.nmp"
;
#line 980 "nmp/uisa_fp_instr.nmp"
#line 981 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 981 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 981 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 981 "nmp/uisa_fp_instr.nmp"
	endif;
#line 981 "nmp/uisa_fp_instr.nmp"
;
#line 981 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 981 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 981 "nmp/uisa_fp_instr.nmp"
	endif;
#line 981 "nmp/uisa_fp_instr.nmp"
;
#line 981 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 981 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 981 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 981 "nmp/uisa_fp_instr.nmp"
	endif;
#line 981 "nmp/uisa_fp_instr.nmp"
;
#line 981 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 981 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 981 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 981 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 981 "nmp/uisa_fp_instr.nmp"
;
#line 981 "nmp/uisa_fp_instr.nmp"
;
#line 981 "nmp/uisa_fp_instr.nmp"
#line 982 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = FPR[fra] + FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 983 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 983 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 983 "nmp/uisa_fp_instr.nmp"
 then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
	else
#line 983 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 983 "nmp/uisa_fp_instr.nmp"
		 then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		else
#line 983 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 983 "nmp/uisa_fp_instr.nmp"
 then
#line 983 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
			else
#line 983 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 983 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 983 "nmp/uisa_fp_instr.nmp"
	 then
#line 983 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
				else
#line 983 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 983 "nmp/uisa_fp_instr.nmp"
 then
#line 983 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
					else
#line 983 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 983 "nmp/uisa_fp_instr.nmp"
 then
#line 983 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
						else
#line 983 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 983 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 983 "nmp/uisa_fp_instr.nmp"
		 then
#line 983 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
							else
#line 983 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 983 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 983 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 983 "nmp/uisa_fp_instr.nmp"
 then
#line 983 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
								else
#line 983 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
								endif;
#line 983 "nmp/uisa_fp_instr.nmp"
							endif;
#line 983 "nmp/uisa_fp_instr.nmp"
						endif;
#line 983 "nmp/uisa_fp_instr.nmp"
					endif;
#line 983 "nmp/uisa_fp_instr.nmp"
				endif;
#line 983 "nmp/uisa_fp_instr.nmp"
			endif;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 983 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 983 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 983 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 983 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		else
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 983 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 983 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
		endif;
#line 983 "nmp/uisa_fp_instr.nmp"
	endif;
#line 983 "nmp/uisa_fp_instr.nmp"
;
#line 983 "nmp/uisa_fp_instr.nmp"
#line 984 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 985 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 985 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 985 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 985 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 985 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 985 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 985 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 985 "nmp/uisa_fp_instr.nmp"
 then
#line 985 "nmp/uisa_fp_instr.nmp"
#line 986 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 986 "nmp/uisa_fp_instr.nmp"
;
#line 986 "nmp/uisa_fp_instr.nmp"
#line 987 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 988 "nmp/uisa_fp_instr.nmp"
;
#line 988 "nmp/uisa_fp_instr.nmp"
#line 989 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;

    	}

op ufp_add_sgl_cr_update ( frd : index, fra : index, frb : index )
   syntax = format ( "fadds. fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111011%5b%5b%5b00000101011", frd, fra, frb )
   action = {

			if 	FPSCR < 1..0 >
#line 1002 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1002 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1002 "nmp/uisa_fp_instr.nmp"
	else
#line 1002 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1002 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1002 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1002 "nmp/uisa_fp_instr.nmp"
		else
#line 1002 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1002 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1002 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1002 "nmp/uisa_fp_instr.nmp"
			else
#line 1002 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1002 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1002 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1002 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1002 "nmp/uisa_fp_instr.nmp"
;
#line 1002 "nmp/uisa_fp_instr.nmp"
#line 1003 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1003 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1003 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1003 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1003 "nmp/uisa_fp_instr.nmp"
;
#line 1003 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1003 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1003 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1003 "nmp/uisa_fp_instr.nmp"
;
#line 1003 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1003 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1003 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1003 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1003 "nmp/uisa_fp_instr.nmp"
;
#line 1003 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1003 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1003 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1003 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1003 "nmp/uisa_fp_instr.nmp"
;
#line 1003 "nmp/uisa_fp_instr.nmp"
;
#line 1003 "nmp/uisa_fp_instr.nmp"
#line 1004 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = FPR[fra] + FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1005 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1005 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1005 "nmp/uisa_fp_instr.nmp"
 then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
	else
#line 1005 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1005 "nmp/uisa_fp_instr.nmp"
		 then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		else
#line 1005 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1005 "nmp/uisa_fp_instr.nmp"
 then
#line 1005 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
			else
#line 1005 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1005 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1005 "nmp/uisa_fp_instr.nmp"
	 then
#line 1005 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
				else
#line 1005 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1005 "nmp/uisa_fp_instr.nmp"
 then
#line 1005 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
					else
#line 1005 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1005 "nmp/uisa_fp_instr.nmp"
 then
#line 1005 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
						else
#line 1005 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1005 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1005 "nmp/uisa_fp_instr.nmp"
		 then
#line 1005 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
							else
#line 1005 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1005 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1005 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1005 "nmp/uisa_fp_instr.nmp"
 then
#line 1005 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
								else
#line 1005 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1005 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1005 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1005 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1005 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		else
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1005 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1005 "nmp/uisa_fp_instr.nmp"
;
#line 1005 "nmp/uisa_fp_instr.nmp"
#line 1006 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1007 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1007 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1007 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1007 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1007 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1007 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1007 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1007 "nmp/uisa_fp_instr.nmp"
 then
#line 1007 "nmp/uisa_fp_instr.nmp"
#line 1008 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1008 "nmp/uisa_fp_instr.nmp"
;
#line 1008 "nmp/uisa_fp_instr.nmp"
#line 1009 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1010 "nmp/uisa_fp_instr.nmp"
;
#line 1010 "nmp/uisa_fp_instr.nmp"
#line 1011 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1016 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1016 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1016 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1016 "nmp/uisa_fp_instr.nmp"
;
#line 1016 "nmp/uisa_fp_instr.nmp"
#line 1017 "nmp/uisa_fp_instr.nmp"
		endif;

		}

// Floating point Subtract Instructions
op  ufp_subtract( x : ufp_subtract_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPARITH

op ufp_subtract_action =   ufp_sub_double
                         | ufp_sub_dbl_cr_update
                         | ufp_sub_single
                         | ufp_sub_sgl_cr_update

op ufp_sub_double ( frd : index, fra : index, frb : index )
   syntax = format ( "fsub fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111111%5b%5b%5b00000101000", frd, fra, frb )
   action = {
   			if 	FPSCR < 1..0 >
#line 1037 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1037 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1037 "nmp/uisa_fp_instr.nmp"
	else
#line 1037 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1037 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1037 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1037 "nmp/uisa_fp_instr.nmp"
		else
#line 1037 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1037 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1037 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1037 "nmp/uisa_fp_instr.nmp"
			else
#line 1037 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1037 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1037 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1037 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1037 "nmp/uisa_fp_instr.nmp"
;
#line 1037 "nmp/uisa_fp_instr.nmp"
#line 1038 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1038 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1038 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1038 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1038 "nmp/uisa_fp_instr.nmp"
;
#line 1038 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1038 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1038 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1038 "nmp/uisa_fp_instr.nmp"
;
#line 1038 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1038 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1038 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1038 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1038 "nmp/uisa_fp_instr.nmp"
;
#line 1038 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1038 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1038 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1038 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1038 "nmp/uisa_fp_instr.nmp"
;
#line 1038 "nmp/uisa_fp_instr.nmp"
;
#line 1038 "nmp/uisa_fp_instr.nmp"
#line 1039 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = FPR [ fra ] - FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1040 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1040 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1040 "nmp/uisa_fp_instr.nmp"
 then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
	else
#line 1040 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1040 "nmp/uisa_fp_instr.nmp"
		 then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		else
#line 1040 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1040 "nmp/uisa_fp_instr.nmp"
 then
#line 1040 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
			else
#line 1040 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1040 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1040 "nmp/uisa_fp_instr.nmp"
	 then
#line 1040 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
				else
#line 1040 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1040 "nmp/uisa_fp_instr.nmp"
 then
#line 1040 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
					else
#line 1040 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1040 "nmp/uisa_fp_instr.nmp"
 then
#line 1040 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
						else
#line 1040 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1040 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1040 "nmp/uisa_fp_instr.nmp"
		 then
#line 1040 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
							else
#line 1040 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1040 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1040 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1040 "nmp/uisa_fp_instr.nmp"
 then
#line 1040 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
								else
#line 1040 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1040 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1040 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1040 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		else
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1040 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1040 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1040 "nmp/uisa_fp_instr.nmp"
;
#line 1040 "nmp/uisa_fp_instr.nmp"
#line 1041 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1042 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1042 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1042 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1042 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1042 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1042 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1042 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1042 "nmp/uisa_fp_instr.nmp"
 then
#line 1042 "nmp/uisa_fp_instr.nmp"
#line 1043 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1043 "nmp/uisa_fp_instr.nmp"
;
#line 1043 "nmp/uisa_fp_instr.nmp"
#line 1044 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1045 "nmp/uisa_fp_instr.nmp"
;
#line 1045 "nmp/uisa_fp_instr.nmp"
#line 1046 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
      	}

op ufp_sub_dbl_cr_update ( frd : index, fra : index, frb : index )
   syntax = format ( "fsub. fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111111%5b%5b%5b00000101001", frd, fra, frb )
   action = {

   			if 	FPSCR < 1..0 >
#line 1058 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1058 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1058 "nmp/uisa_fp_instr.nmp"
	else
#line 1058 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1058 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1058 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1058 "nmp/uisa_fp_instr.nmp"
		else
#line 1058 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1058 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1058 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1058 "nmp/uisa_fp_instr.nmp"
			else
#line 1058 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1058 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1058 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1058 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1058 "nmp/uisa_fp_instr.nmp"
;
#line 1058 "nmp/uisa_fp_instr.nmp"
#line 1059 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1059 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1059 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1059 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1059 "nmp/uisa_fp_instr.nmp"
;
#line 1059 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1059 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1059 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1059 "nmp/uisa_fp_instr.nmp"
;
#line 1059 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1059 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1059 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1059 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1059 "nmp/uisa_fp_instr.nmp"
;
#line 1059 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1059 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1059 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1059 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1059 "nmp/uisa_fp_instr.nmp"
;
#line 1059 "nmp/uisa_fp_instr.nmp"
;
#line 1059 "nmp/uisa_fp_instr.nmp"
#line 1060 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = FPR [ fra ] - FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1061 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1061 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1061 "nmp/uisa_fp_instr.nmp"
 then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
	else
#line 1061 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1061 "nmp/uisa_fp_instr.nmp"
		 then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		else
#line 1061 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1061 "nmp/uisa_fp_instr.nmp"
 then
#line 1061 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
			else
#line 1061 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1061 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1061 "nmp/uisa_fp_instr.nmp"
	 then
#line 1061 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
				else
#line 1061 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1061 "nmp/uisa_fp_instr.nmp"
 then
#line 1061 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
					else
#line 1061 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1061 "nmp/uisa_fp_instr.nmp"
 then
#line 1061 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
						else
#line 1061 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1061 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1061 "nmp/uisa_fp_instr.nmp"
		 then
#line 1061 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
							else
#line 1061 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1061 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1061 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1061 "nmp/uisa_fp_instr.nmp"
 then
#line 1061 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
								else
#line 1061 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1061 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1061 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1061 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		else
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1061 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1061 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1061 "nmp/uisa_fp_instr.nmp"
;
#line 1061 "nmp/uisa_fp_instr.nmp"
#line 1062 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1063 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1063 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1063 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1063 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1063 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1063 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1063 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1063 "nmp/uisa_fp_instr.nmp"
 then
#line 1063 "nmp/uisa_fp_instr.nmp"
#line 1064 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1064 "nmp/uisa_fp_instr.nmp"
;
#line 1064 "nmp/uisa_fp_instr.nmp"
#line 1065 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1066 "nmp/uisa_fp_instr.nmp"
;
#line 1066 "nmp/uisa_fp_instr.nmp"
#line 1067 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1072 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1072 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1072 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1072 "nmp/uisa_fp_instr.nmp"
;
#line 1072 "nmp/uisa_fp_instr.nmp"
#line 1073 "nmp/uisa_fp_instr.nmp"
		endif;
      	}

op ufp_sub_single ( frd : index, fra : index, frb : index )
   syntax = format ( "fsubs fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111011%5b%5b%5b00000101000", frd, fra, frb )
   action = {

			if 	FPSCR < 1..0 >
#line 1081 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1081 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1081 "nmp/uisa_fp_instr.nmp"
	else
#line 1081 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1081 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1081 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1081 "nmp/uisa_fp_instr.nmp"
		else
#line 1081 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1081 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1081 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1081 "nmp/uisa_fp_instr.nmp"
			else
#line 1081 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1081 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1081 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1081 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1081 "nmp/uisa_fp_instr.nmp"
;
#line 1081 "nmp/uisa_fp_instr.nmp"
#line 1082 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1082 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1082 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1082 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1082 "nmp/uisa_fp_instr.nmp"
;
#line 1082 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1082 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1082 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1082 "nmp/uisa_fp_instr.nmp"
;
#line 1082 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1082 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1082 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1082 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1082 "nmp/uisa_fp_instr.nmp"
;
#line 1082 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1082 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1082 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1082 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1082 "nmp/uisa_fp_instr.nmp"
;
#line 1082 "nmp/uisa_fp_instr.nmp"
;
#line 1082 "nmp/uisa_fp_instr.nmp"
#line 1083 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = FPR[fra] - FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1084 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1084 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1084 "nmp/uisa_fp_instr.nmp"
 then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
	else
#line 1084 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1084 "nmp/uisa_fp_instr.nmp"
		 then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		else
#line 1084 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1084 "nmp/uisa_fp_instr.nmp"
 then
#line 1084 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
			else
#line 1084 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1084 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1084 "nmp/uisa_fp_instr.nmp"
	 then
#line 1084 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
				else
#line 1084 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1084 "nmp/uisa_fp_instr.nmp"
 then
#line 1084 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
					else
#line 1084 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1084 "nmp/uisa_fp_instr.nmp"
 then
#line 1084 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
						else
#line 1084 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1084 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1084 "nmp/uisa_fp_instr.nmp"
		 then
#line 1084 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
							else
#line 1084 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1084 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1084 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1084 "nmp/uisa_fp_instr.nmp"
 then
#line 1084 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
								else
#line 1084 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1084 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1084 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1084 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1084 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		else
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1084 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1084 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1084 "nmp/uisa_fp_instr.nmp"
;
#line 1084 "nmp/uisa_fp_instr.nmp"
#line 1085 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1086 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1086 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1086 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1086 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1086 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1086 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1086 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1086 "nmp/uisa_fp_instr.nmp"
 then
#line 1086 "nmp/uisa_fp_instr.nmp"
#line 1087 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1087 "nmp/uisa_fp_instr.nmp"
;
#line 1087 "nmp/uisa_fp_instr.nmp"
#line 1088 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1089 "nmp/uisa_fp_instr.nmp"
;
#line 1089 "nmp/uisa_fp_instr.nmp"
#line 1090 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_sub_sgl_cr_update ( frd : index, fra : index, frb : index )
   syntax = format ( "fsubs. fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111011%5b%5b%5b00000101001", frd, fra, frb )
   action = {

			if 	FPSCR < 1..0 >
#line 1102 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1102 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1102 "nmp/uisa_fp_instr.nmp"
	else
#line 1102 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1102 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1102 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1102 "nmp/uisa_fp_instr.nmp"
		else
#line 1102 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1102 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1102 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1102 "nmp/uisa_fp_instr.nmp"
			else
#line 1102 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1102 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1102 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1102 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1102 "nmp/uisa_fp_instr.nmp"
;
#line 1102 "nmp/uisa_fp_instr.nmp"
#line 1103 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1103 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1103 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1103 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1103 "nmp/uisa_fp_instr.nmp"
;
#line 1103 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1103 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1103 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1103 "nmp/uisa_fp_instr.nmp"
;
#line 1103 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1103 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1103 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1103 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1103 "nmp/uisa_fp_instr.nmp"
;
#line 1103 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1103 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1103 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1103 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1103 "nmp/uisa_fp_instr.nmp"
;
#line 1103 "nmp/uisa_fp_instr.nmp"
;
#line 1103 "nmp/uisa_fp_instr.nmp"
#line 1104 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = FPR[fra] - FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1105 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1105 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1105 "nmp/uisa_fp_instr.nmp"
 then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
	else
#line 1105 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1105 "nmp/uisa_fp_instr.nmp"
		 then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		else
#line 1105 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1105 "nmp/uisa_fp_instr.nmp"
 then
#line 1105 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
			else
#line 1105 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1105 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1105 "nmp/uisa_fp_instr.nmp"
	 then
#line 1105 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
				else
#line 1105 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1105 "nmp/uisa_fp_instr.nmp"
 then
#line 1105 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
					else
#line 1105 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1105 "nmp/uisa_fp_instr.nmp"
 then
#line 1105 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
						else
#line 1105 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1105 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1105 "nmp/uisa_fp_instr.nmp"
		 then
#line 1105 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
							else
#line 1105 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1105 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1105 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1105 "nmp/uisa_fp_instr.nmp"
 then
#line 1105 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
								else
#line 1105 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1105 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1105 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1105 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1105 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		else
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1105 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1105 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1105 "nmp/uisa_fp_instr.nmp"
;
#line 1105 "nmp/uisa_fp_instr.nmp"
#line 1106 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1107 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1107 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1107 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1107 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1107 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1107 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1107 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1107 "nmp/uisa_fp_instr.nmp"
 then
#line 1107 "nmp/uisa_fp_instr.nmp"
#line 1108 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1108 "nmp/uisa_fp_instr.nmp"
;
#line 1108 "nmp/uisa_fp_instr.nmp"
#line 1109 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1110 "nmp/uisa_fp_instr.nmp"
;
#line 1110 "nmp/uisa_fp_instr.nmp"
#line 1111 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1116 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1116 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1116 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1116 "nmp/uisa_fp_instr.nmp"
;
#line 1116 "nmp/uisa_fp_instr.nmp"
#line 1117 "nmp/uisa_fp_instr.nmp"
		endif;

        }

// Floating point Multiply Instructions
op  ufp_multiply ( x : ufp_multiply_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPMUL

op ufp_multiply_action =   ufp_mult_double
                         | ufp_mult_dbl_cr_update
                         | ufp_mult_single
                         | ufp_mult_sgl_cr_update

op ufp_mult_double ( frd : index, fra : index, frc : index )
   syntax = format ( "fmul fr%d,fr%d,fr%d", frd, fra, frc )
   image  = format ( "111111%5b%5b00000%5b110010", frd, fra, frc )
   action = {
			if 	FPSCR < 1..0 >
#line 1137 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1137 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1137 "nmp/uisa_fp_instr.nmp"
	else
#line 1137 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1137 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1137 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1137 "nmp/uisa_fp_instr.nmp"
		else
#line 1137 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1137 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1137 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1137 "nmp/uisa_fp_instr.nmp"
			else
#line 1137 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1137 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1137 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1137 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1137 "nmp/uisa_fp_instr.nmp"
;
#line 1137 "nmp/uisa_fp_instr.nmp"
#line 1138 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1138 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1138 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1138 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1138 "nmp/uisa_fp_instr.nmp"
;
#line 1138 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1138 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1138 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1138 "nmp/uisa_fp_instr.nmp"
;
#line 1138 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1138 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1138 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1138 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1138 "nmp/uisa_fp_instr.nmp"
;
#line 1138 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1138 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1138 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1138 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1138 "nmp/uisa_fp_instr.nmp"
;
#line 1138 "nmp/uisa_fp_instr.nmp"
;
#line 1138 "nmp/uisa_fp_instr.nmp"
#line 1139 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = FPR [ fra ] * FPR [ frc ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1140 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1140 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1140 "nmp/uisa_fp_instr.nmp"
 then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
	else
#line 1140 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1140 "nmp/uisa_fp_instr.nmp"
		 then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		else
#line 1140 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1140 "nmp/uisa_fp_instr.nmp"
 then
#line 1140 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
			else
#line 1140 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1140 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1140 "nmp/uisa_fp_instr.nmp"
	 then
#line 1140 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
				else
#line 1140 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1140 "nmp/uisa_fp_instr.nmp"
 then
#line 1140 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
					else
#line 1140 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1140 "nmp/uisa_fp_instr.nmp"
 then
#line 1140 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
						else
#line 1140 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1140 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1140 "nmp/uisa_fp_instr.nmp"
		 then
#line 1140 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
							else
#line 1140 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1140 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1140 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1140 "nmp/uisa_fp_instr.nmp"
 then
#line 1140 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
								else
#line 1140 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1140 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1140 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1140 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		else
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1140 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1140 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1140 "nmp/uisa_fp_instr.nmp"
;
#line 1140 "nmp/uisa_fp_instr.nmp"
#line 1141 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1142 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1142 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1142 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1142 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1142 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1142 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1142 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1142 "nmp/uisa_fp_instr.nmp"
 then
#line 1142 "nmp/uisa_fp_instr.nmp"
#line 1143 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1143 "nmp/uisa_fp_instr.nmp"
;
#line 1143 "nmp/uisa_fp_instr.nmp"
#line 1144 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1145 "nmp/uisa_fp_instr.nmp"
;
#line 1145 "nmp/uisa_fp_instr.nmp"
#line 1146 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;

        }

op ufp_mult_dbl_cr_update ( frd : index, fra : index, frc : index )
   syntax = format ( "fmul. fr%d,fr%d,fr%d", frd, fra, frc )
   image  = format ( "111111%5b%5b00000%5b110011", frd, fra, frc )
   action = {

        	if 	FPSCR < 1..0 >
#line 1159 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1159 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1159 "nmp/uisa_fp_instr.nmp"
	else
#line 1159 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1159 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1159 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1159 "nmp/uisa_fp_instr.nmp"
		else
#line 1159 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1159 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1159 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1159 "nmp/uisa_fp_instr.nmp"
			else
#line 1159 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1159 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1159 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1159 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1159 "nmp/uisa_fp_instr.nmp"
;
#line 1159 "nmp/uisa_fp_instr.nmp"
#line 1160 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1160 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1160 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1160 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1160 "nmp/uisa_fp_instr.nmp"
;
#line 1160 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1160 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1160 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1160 "nmp/uisa_fp_instr.nmp"
;
#line 1160 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1160 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1160 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1160 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1160 "nmp/uisa_fp_instr.nmp"
;
#line 1160 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1160 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1160 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1160 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1160 "nmp/uisa_fp_instr.nmp"
;
#line 1160 "nmp/uisa_fp_instr.nmp"
;
#line 1160 "nmp/uisa_fp_instr.nmp"
#line 1161 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = FPR [ fra ] * FPR [ frc ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1162 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1162 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1162 "nmp/uisa_fp_instr.nmp"
 then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
	else
#line 1162 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1162 "nmp/uisa_fp_instr.nmp"
		 then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		else
#line 1162 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1162 "nmp/uisa_fp_instr.nmp"
 then
#line 1162 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
			else
#line 1162 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1162 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1162 "nmp/uisa_fp_instr.nmp"
	 then
#line 1162 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
				else
#line 1162 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1162 "nmp/uisa_fp_instr.nmp"
 then
#line 1162 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
					else
#line 1162 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1162 "nmp/uisa_fp_instr.nmp"
 then
#line 1162 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
						else
#line 1162 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1162 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1162 "nmp/uisa_fp_instr.nmp"
		 then
#line 1162 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
							else
#line 1162 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1162 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1162 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1162 "nmp/uisa_fp_instr.nmp"
 then
#line 1162 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
								else
#line 1162 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1162 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1162 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1162 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		else
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1162 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1162 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1162 "nmp/uisa_fp_instr.nmp"
;
#line 1162 "nmp/uisa_fp_instr.nmp"
#line 1163 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1164 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1164 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1164 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1164 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1164 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1164 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1164 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1164 "nmp/uisa_fp_instr.nmp"
 then
#line 1164 "nmp/uisa_fp_instr.nmp"
#line 1165 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1165 "nmp/uisa_fp_instr.nmp"
;
#line 1165 "nmp/uisa_fp_instr.nmp"
#line 1166 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1167 "nmp/uisa_fp_instr.nmp"
;
#line 1167 "nmp/uisa_fp_instr.nmp"
#line 1168 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1173 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1173 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1173 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1173 "nmp/uisa_fp_instr.nmp"
;
#line 1173 "nmp/uisa_fp_instr.nmp"
#line 1174 "nmp/uisa_fp_instr.nmp"
		endif;

		}

op ufp_mult_single ( frd : index, fra : index, frc : index )
   syntax = format ( "fmuls fr%d,fr%d,fr%d", frd, fra, frc )
   image  = format ( "111011%5b%5b00000%5b110010", frd, fra, frc )
   action = {

			if 	FPSCR < 1..0 >
#line 1183 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1183 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1183 "nmp/uisa_fp_instr.nmp"
	else
#line 1183 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1183 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1183 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1183 "nmp/uisa_fp_instr.nmp"
		else
#line 1183 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1183 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1183 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1183 "nmp/uisa_fp_instr.nmp"
			else
#line 1183 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1183 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1183 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1183 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1183 "nmp/uisa_fp_instr.nmp"
;
#line 1183 "nmp/uisa_fp_instr.nmp"
#line 1184 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1184 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1184 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1184 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1184 "nmp/uisa_fp_instr.nmp"
;
#line 1184 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1184 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1184 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1184 "nmp/uisa_fp_instr.nmp"
;
#line 1184 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1184 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1184 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1184 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1184 "nmp/uisa_fp_instr.nmp"
;
#line 1184 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1184 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1184 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1184 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1184 "nmp/uisa_fp_instr.nmp"
;
#line 1184 "nmp/uisa_fp_instr.nmp"
;
#line 1184 "nmp/uisa_fp_instr.nmp"
#line 1185 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = FPR[fra] * FPR[frc];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1186 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1186 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1186 "nmp/uisa_fp_instr.nmp"
 then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
	else
#line 1186 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1186 "nmp/uisa_fp_instr.nmp"
		 then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		else
#line 1186 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1186 "nmp/uisa_fp_instr.nmp"
 then
#line 1186 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
			else
#line 1186 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1186 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1186 "nmp/uisa_fp_instr.nmp"
	 then
#line 1186 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
				else
#line 1186 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1186 "nmp/uisa_fp_instr.nmp"
 then
#line 1186 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
					else
#line 1186 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1186 "nmp/uisa_fp_instr.nmp"
 then
#line 1186 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
						else
#line 1186 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1186 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1186 "nmp/uisa_fp_instr.nmp"
		 then
#line 1186 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
							else
#line 1186 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1186 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1186 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1186 "nmp/uisa_fp_instr.nmp"
 then
#line 1186 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
								else
#line 1186 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1186 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1186 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1186 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1186 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		else
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1186 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1186 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1186 "nmp/uisa_fp_instr.nmp"
;
#line 1186 "nmp/uisa_fp_instr.nmp"
#line 1187 "nmp/uisa_fp_instr.nmp"
		FPR[frd] = TMP_FLOTS;
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1189 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1189 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1189 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1189 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1189 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1189 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1189 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1189 "nmp/uisa_fp_instr.nmp"
 then
#line 1189 "nmp/uisa_fp_instr.nmp"
#line 1190 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1190 "nmp/uisa_fp_instr.nmp"
;
#line 1190 "nmp/uisa_fp_instr.nmp"
#line 1191 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1192 "nmp/uisa_fp_instr.nmp"
;
#line 1192 "nmp/uisa_fp_instr.nmp"
#line 1193 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_mult_sgl_cr_update ( frd : index, fra : index, frc : index )
   syntax = format ( "fmuls. fr%d,fr%d,fr%d", frd, fra, frc )
   image  = format ( "111011%5b%5b00000%5b110011", frd, fra, frc )
   action = {

			if 	FPSCR < 1..0 >
#line 1205 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1205 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1205 "nmp/uisa_fp_instr.nmp"
	else
#line 1205 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1205 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1205 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1205 "nmp/uisa_fp_instr.nmp"
		else
#line 1205 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1205 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1205 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1205 "nmp/uisa_fp_instr.nmp"
			else
#line 1205 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1205 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1205 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1205 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1205 "nmp/uisa_fp_instr.nmp"
;
#line 1205 "nmp/uisa_fp_instr.nmp"
#line 1206 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1206 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1206 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1206 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1206 "nmp/uisa_fp_instr.nmp"
;
#line 1206 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1206 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1206 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1206 "nmp/uisa_fp_instr.nmp"
;
#line 1206 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1206 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1206 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1206 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1206 "nmp/uisa_fp_instr.nmp"
;
#line 1206 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1206 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1206 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1206 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1206 "nmp/uisa_fp_instr.nmp"
;
#line 1206 "nmp/uisa_fp_instr.nmp"
;
#line 1206 "nmp/uisa_fp_instr.nmp"
#line 1207 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = FPR[fra] * FPR[frc];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1208 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1208 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1208 "nmp/uisa_fp_instr.nmp"
 then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
	else
#line 1208 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1208 "nmp/uisa_fp_instr.nmp"
		 then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		else
#line 1208 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1208 "nmp/uisa_fp_instr.nmp"
 then
#line 1208 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
			else
#line 1208 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1208 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1208 "nmp/uisa_fp_instr.nmp"
	 then
#line 1208 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
				else
#line 1208 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1208 "nmp/uisa_fp_instr.nmp"
 then
#line 1208 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
					else
#line 1208 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1208 "nmp/uisa_fp_instr.nmp"
 then
#line 1208 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
						else
#line 1208 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1208 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1208 "nmp/uisa_fp_instr.nmp"
		 then
#line 1208 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
							else
#line 1208 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1208 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1208 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1208 "nmp/uisa_fp_instr.nmp"
 then
#line 1208 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
								else
#line 1208 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1208 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1208 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1208 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1208 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		else
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1208 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1208 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1208 "nmp/uisa_fp_instr.nmp"
;
#line 1208 "nmp/uisa_fp_instr.nmp"
#line 1209 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1210 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1210 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1210 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1210 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1210 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1210 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1210 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1210 "nmp/uisa_fp_instr.nmp"
 then
#line 1210 "nmp/uisa_fp_instr.nmp"
#line 1211 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1211 "nmp/uisa_fp_instr.nmp"
;
#line 1211 "nmp/uisa_fp_instr.nmp"
#line 1212 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1213 "nmp/uisa_fp_instr.nmp"
;
#line 1213 "nmp/uisa_fp_instr.nmp"
#line 1214 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX>then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1219 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1219 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1219 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1219 "nmp/uisa_fp_instr.nmp"
;
#line 1219 "nmp/uisa_fp_instr.nmp"
#line 1220 "nmp/uisa_fp_instr.nmp"
		endif;
            }

// Floating point Divide Instructions
op  ufp_divide( x : ufp_divide_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPDIV

op ufp_divide_action =   ufp_div_double
                       | ufp_div_dbl_cr_update
                       | ufp_div_single
                       | ufp_div_sgl_cr_update

op ufp_div_double ( frd : index, fra : index, frb : index )
   syntax = format ( "fdiv fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111111%5b%5b%5b00000100100", frd, fra, frb )
   action = {

 			if 	FPSCR < 1..0 >
#line 1240 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1240 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1240 "nmp/uisa_fp_instr.nmp"
	else
#line 1240 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1240 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1240 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1240 "nmp/uisa_fp_instr.nmp"
		else
#line 1240 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1240 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1240 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1240 "nmp/uisa_fp_instr.nmp"
			else
#line 1240 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1240 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1240 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1240 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1240 "nmp/uisa_fp_instr.nmp"
;
#line 1240 "nmp/uisa_fp_instr.nmp"
#line 1241 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1241 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1241 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1241 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1241 "nmp/uisa_fp_instr.nmp"
;
#line 1241 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1241 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1241 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1241 "nmp/uisa_fp_instr.nmp"
;
#line 1241 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1241 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1241 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1241 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1241 "nmp/uisa_fp_instr.nmp"
;
#line 1241 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1241 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1241 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1241 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1241 "nmp/uisa_fp_instr.nmp"
;
#line 1241 "nmp/uisa_fp_instr.nmp"
;
#line 1241 "nmp/uisa_fp_instr.nmp"
#line 1242 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = FPR [ fra ] / FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1243 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1243 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1243 "nmp/uisa_fp_instr.nmp"
 then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
	else
#line 1243 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1243 "nmp/uisa_fp_instr.nmp"
		 then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		else
#line 1243 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1243 "nmp/uisa_fp_instr.nmp"
 then
#line 1243 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
			else
#line 1243 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1243 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1243 "nmp/uisa_fp_instr.nmp"
	 then
#line 1243 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
				else
#line 1243 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1243 "nmp/uisa_fp_instr.nmp"
 then
#line 1243 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
					else
#line 1243 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1243 "nmp/uisa_fp_instr.nmp"
 then
#line 1243 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
						else
#line 1243 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1243 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1243 "nmp/uisa_fp_instr.nmp"
		 then
#line 1243 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
							else
#line 1243 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1243 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1243 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1243 "nmp/uisa_fp_instr.nmp"
 then
#line 1243 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
								else
#line 1243 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1243 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1243 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1243 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		else
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1243 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1243 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1243 "nmp/uisa_fp_instr.nmp"
;
#line 1243 "nmp/uisa_fp_instr.nmp"
#line 1244 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1245 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1245 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1245 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1245 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1245 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1245 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1245 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1245 "nmp/uisa_fp_instr.nmp"
 then
#line 1245 "nmp/uisa_fp_instr.nmp"
#line 1246 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1246 "nmp/uisa_fp_instr.nmp"
;
#line 1246 "nmp/uisa_fp_instr.nmp"
#line 1247 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1248 "nmp/uisa_fp_instr.nmp"
;
#line 1248 "nmp/uisa_fp_instr.nmp"
#line 1249 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_div_dbl_cr_update ( frd : index, fra : index, frb : index )
   syntax = format ( "fdiv. fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111111%5b%5b%5b00000100101", frd, fra, frb )
   action = {

 			if 	FPSCR < 1..0 >
#line 1261 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1261 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1261 "nmp/uisa_fp_instr.nmp"
	else
#line 1261 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1261 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1261 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1261 "nmp/uisa_fp_instr.nmp"
		else
#line 1261 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1261 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1261 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1261 "nmp/uisa_fp_instr.nmp"
			else
#line 1261 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1261 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1261 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1261 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1261 "nmp/uisa_fp_instr.nmp"
;
#line 1261 "nmp/uisa_fp_instr.nmp"
#line 1262 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1262 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1262 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1262 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1262 "nmp/uisa_fp_instr.nmp"
;
#line 1262 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1262 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1262 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1262 "nmp/uisa_fp_instr.nmp"
;
#line 1262 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1262 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1262 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1262 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1262 "nmp/uisa_fp_instr.nmp"
;
#line 1262 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1262 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1262 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1262 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1262 "nmp/uisa_fp_instr.nmp"
;
#line 1262 "nmp/uisa_fp_instr.nmp"
;
#line 1262 "nmp/uisa_fp_instr.nmp"
#line 1263 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = FPR [ fra ] / FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1264 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1264 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1264 "nmp/uisa_fp_instr.nmp"
 then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
	else
#line 1264 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1264 "nmp/uisa_fp_instr.nmp"
		 then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		else
#line 1264 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1264 "nmp/uisa_fp_instr.nmp"
 then
#line 1264 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
			else
#line 1264 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1264 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1264 "nmp/uisa_fp_instr.nmp"
	 then
#line 1264 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
				else
#line 1264 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1264 "nmp/uisa_fp_instr.nmp"
 then
#line 1264 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
					else
#line 1264 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1264 "nmp/uisa_fp_instr.nmp"
 then
#line 1264 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
						else
#line 1264 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1264 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1264 "nmp/uisa_fp_instr.nmp"
		 then
#line 1264 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
							else
#line 1264 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1264 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1264 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1264 "nmp/uisa_fp_instr.nmp"
 then
#line 1264 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
								else
#line 1264 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1264 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1264 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1264 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		else
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1264 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1264 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1264 "nmp/uisa_fp_instr.nmp"
;
#line 1264 "nmp/uisa_fp_instr.nmp"
#line 1265 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1266 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1266 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1266 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1266 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1266 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1266 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1266 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1266 "nmp/uisa_fp_instr.nmp"
 then
#line 1266 "nmp/uisa_fp_instr.nmp"
#line 1267 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1267 "nmp/uisa_fp_instr.nmp"
;
#line 1267 "nmp/uisa_fp_instr.nmp"
#line 1268 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1269 "nmp/uisa_fp_instr.nmp"
;
#line 1269 "nmp/uisa_fp_instr.nmp"
#line 1270 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1275 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1275 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1275 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1275 "nmp/uisa_fp_instr.nmp"
;
#line 1275 "nmp/uisa_fp_instr.nmp"
#line 1276 "nmp/uisa_fp_instr.nmp"
		endif;

        }

op ufp_div_single ( frd : index, fra : index, frb : index )
   syntax = format ( "fdivs fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111011%5b%5b%5b00000100100", frd, fra, frb )
   action = {

 			if 	FPSCR < 1..0 >
#line 1285 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1285 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1285 "nmp/uisa_fp_instr.nmp"
	else
#line 1285 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1285 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1285 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1285 "nmp/uisa_fp_instr.nmp"
		else
#line 1285 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1285 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1285 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1285 "nmp/uisa_fp_instr.nmp"
			else
#line 1285 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1285 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1285 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1285 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1285 "nmp/uisa_fp_instr.nmp"
;
#line 1285 "nmp/uisa_fp_instr.nmp"
#line 1286 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1286 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1286 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1286 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1286 "nmp/uisa_fp_instr.nmp"
;
#line 1286 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1286 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1286 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1286 "nmp/uisa_fp_instr.nmp"
;
#line 1286 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1286 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1286 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1286 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1286 "nmp/uisa_fp_instr.nmp"
;
#line 1286 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1286 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1286 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1286 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1286 "nmp/uisa_fp_instr.nmp"
;
#line 1286 "nmp/uisa_fp_instr.nmp"
;
#line 1286 "nmp/uisa_fp_instr.nmp"
#line 1287 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = FPR[fra]/FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1288 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1288 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1288 "nmp/uisa_fp_instr.nmp"
 then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
	else
#line 1288 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1288 "nmp/uisa_fp_instr.nmp"
		 then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		else
#line 1288 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1288 "nmp/uisa_fp_instr.nmp"
 then
#line 1288 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
			else
#line 1288 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1288 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1288 "nmp/uisa_fp_instr.nmp"
	 then
#line 1288 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
				else
#line 1288 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1288 "nmp/uisa_fp_instr.nmp"
 then
#line 1288 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
					else
#line 1288 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1288 "nmp/uisa_fp_instr.nmp"
 then
#line 1288 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
						else
#line 1288 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1288 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1288 "nmp/uisa_fp_instr.nmp"
		 then
#line 1288 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
							else
#line 1288 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1288 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1288 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1288 "nmp/uisa_fp_instr.nmp"
 then
#line 1288 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
								else
#line 1288 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1288 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1288 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1288 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1288 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		else
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1288 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1288 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1288 "nmp/uisa_fp_instr.nmp"
;
#line 1288 "nmp/uisa_fp_instr.nmp"
#line 1289 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1290 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1290 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1290 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1290 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1290 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1290 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1290 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1290 "nmp/uisa_fp_instr.nmp"
 then
#line 1290 "nmp/uisa_fp_instr.nmp"
#line 1291 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1291 "nmp/uisa_fp_instr.nmp"
;
#line 1291 "nmp/uisa_fp_instr.nmp"
#line 1292 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1293 "nmp/uisa_fp_instr.nmp"
;
#line 1293 "nmp/uisa_fp_instr.nmp"
#line 1294 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
        }

op ufp_div_sgl_cr_update ( frd : index, fra : index, frb : index )
   syntax = format ( "fdivs. fr%d,fr%d,fr%d", frd, fra, frb )
   image  = format ( "111011%5b%5b%5b00000100101", frd, fra, frb )
   action = {

			if 	FPSCR < 1..0 >
#line 1306 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1306 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1306 "nmp/uisa_fp_instr.nmp"
	else
#line 1306 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1306 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1306 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1306 "nmp/uisa_fp_instr.nmp"
		else
#line 1306 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1306 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1306 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1306 "nmp/uisa_fp_instr.nmp"
			else
#line 1306 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1306 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1306 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1306 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1306 "nmp/uisa_fp_instr.nmp"
;
#line 1306 "nmp/uisa_fp_instr.nmp"
#line 1307 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1307 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1307 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1307 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1307 "nmp/uisa_fp_instr.nmp"
;
#line 1307 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1307 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1307 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1307 "nmp/uisa_fp_instr.nmp"
;
#line 1307 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1307 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1307 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1307 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1307 "nmp/uisa_fp_instr.nmp"
;
#line 1307 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1307 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1307 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1307 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1307 "nmp/uisa_fp_instr.nmp"
;
#line 1307 "nmp/uisa_fp_instr.nmp"
;
#line 1307 "nmp/uisa_fp_instr.nmp"
#line 1308 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = FPR[fra]/FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1309 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1309 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1309 "nmp/uisa_fp_instr.nmp"
 then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
	else
#line 1309 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1309 "nmp/uisa_fp_instr.nmp"
		 then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		else
#line 1309 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1309 "nmp/uisa_fp_instr.nmp"
 then
#line 1309 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
			else
#line 1309 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1309 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1309 "nmp/uisa_fp_instr.nmp"
	 then
#line 1309 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
				else
#line 1309 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1309 "nmp/uisa_fp_instr.nmp"
 then
#line 1309 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
					else
#line 1309 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1309 "nmp/uisa_fp_instr.nmp"
 then
#line 1309 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
						else
#line 1309 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1309 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1309 "nmp/uisa_fp_instr.nmp"
		 then
#line 1309 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
							else
#line 1309 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1309 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1309 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1309 "nmp/uisa_fp_instr.nmp"
 then
#line 1309 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
								else
#line 1309 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1309 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1309 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1309 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1309 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		else
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1309 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1309 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1309 "nmp/uisa_fp_instr.nmp"
;
#line 1309 "nmp/uisa_fp_instr.nmp"
#line 1310 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1311 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1311 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1311 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1311 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1311 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1311 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1311 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1311 "nmp/uisa_fp_instr.nmp"
 then
#line 1311 "nmp/uisa_fp_instr.nmp"
#line 1312 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1312 "nmp/uisa_fp_instr.nmp"
;
#line 1312 "nmp/uisa_fp_instr.nmp"
#line 1313 "nmp/uisa_fp_instr.nmp"
			else
					FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1314 "nmp/uisa_fp_instr.nmp"
;
#line 1314 "nmp/uisa_fp_instr.nmp"
#line 1315 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1320 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1320 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1320 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1320 "nmp/uisa_fp_instr.nmp"
;
#line 1320 "nmp/uisa_fp_instr.nmp"
#line 1321 "nmp/uisa_fp_instr.nmp"
		endif;
        }

// Floating Multiply Add Instructions
op  ufp_mult_add_instr( x : ufp_mult_add_instr_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPMADD


op ufp_mult_add_instr_action =   ufp_mult_add
                               | ufp_mult_sub

op ufp_mult_add =   ufp_mult_add_dbl
                  | ufp_mult_addd_cr_upd
                  | ufp_mult_add_sgl
                  | ufp_mult_adds_cr_upd
                  | ufp_mult_nadd_dbl
                  | ufp_mult_naddd_cr_upd
                  | ufp_mult_nadd_sgl
                  | ufp_mult_nadds_cr_upd

op ufp_mult_sub =   ufp_mult_sub_dbl
                  | ufp_mult_subd_cr_upd
                  | ufp_mult_sub_sgl
                  | ufp_mult_subs_cr_upd
                  | ufp_mult_nsub_dbl
                  | ufp_mult_nsubd_cr_upd
                  | ufp_mult_nsub_sgl
                  | ufp_mult_nsubs_cr_upd

op ufp_mult_add_dbl ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fmadd fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111111%5b%5b%5b%5b111010", frd, fra, frb, frc )
   action = {
			if 	FPSCR < 1..0 >
#line 1357 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1357 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1357 "nmp/uisa_fp_instr.nmp"
	else
#line 1357 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1357 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1357 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1357 "nmp/uisa_fp_instr.nmp"
		else
#line 1357 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1357 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1357 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1357 "nmp/uisa_fp_instr.nmp"
			else
#line 1357 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1357 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1357 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1357 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1357 "nmp/uisa_fp_instr.nmp"
;
#line 1357 "nmp/uisa_fp_instr.nmp"
#line 1358 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1358 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1358 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1358 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1358 "nmp/uisa_fp_instr.nmp"
;
#line 1358 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1358 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1358 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1358 "nmp/uisa_fp_instr.nmp"
;
#line 1358 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1358 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1358 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1358 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1358 "nmp/uisa_fp_instr.nmp"
;
#line 1358 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1358 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1358 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1358 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1358 "nmp/uisa_fp_instr.nmp"
;
#line 1358 "nmp/uisa_fp_instr.nmp"
;
#line 1358 "nmp/uisa_fp_instr.nmp"
#line 1359 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = ( FPR [ fra ] * FPR [ frc ] ) + FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1360 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1360 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1360 "nmp/uisa_fp_instr.nmp"
 then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
	else
#line 1360 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1360 "nmp/uisa_fp_instr.nmp"
		 then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		else
#line 1360 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1360 "nmp/uisa_fp_instr.nmp"
 then
#line 1360 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
			else
#line 1360 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1360 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1360 "nmp/uisa_fp_instr.nmp"
	 then
#line 1360 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
				else
#line 1360 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1360 "nmp/uisa_fp_instr.nmp"
 then
#line 1360 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
					else
#line 1360 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1360 "nmp/uisa_fp_instr.nmp"
 then
#line 1360 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
						else
#line 1360 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1360 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1360 "nmp/uisa_fp_instr.nmp"
		 then
#line 1360 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
							else
#line 1360 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1360 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1360 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1360 "nmp/uisa_fp_instr.nmp"
 then
#line 1360 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
								else
#line 1360 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1360 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1360 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1360 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		else
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1360 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1360 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1360 "nmp/uisa_fp_instr.nmp"
;
#line 1360 "nmp/uisa_fp_instr.nmp"
#line 1361 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1362 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1362 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1362 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1362 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1362 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1362 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1362 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1362 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1362 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1362 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1362 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1362 "nmp/uisa_fp_instr.nmp"
 then
#line 1362 "nmp/uisa_fp_instr.nmp"
#line 1363 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1363 "nmp/uisa_fp_instr.nmp"
;
#line 1363 "nmp/uisa_fp_instr.nmp"
#line 1364 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1365 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1365 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1365 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1365 "nmp/uisa_fp_instr.nmp"
) ||
#line 1365 "nmp/uisa_fp_instr.nmp"
#line 1366 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1366 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1366 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1366 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1366 "nmp/uisa_fp_instr.nmp"
)) then
#line 1366 "nmp/uisa_fp_instr.nmp"
#line 1367 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1367 "nmp/uisa_fp_instr.nmp"
;
#line 1367 "nmp/uisa_fp_instr.nmp"
#line 1368 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1369 "nmp/uisa_fp_instr.nmp"
;
#line 1369 "nmp/uisa_fp_instr.nmp"
#line 1370 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;

            }

op ufp_mult_addd_cr_upd ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fmadd. fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111111%5b%5b%5b%5b111011", frd, fra, frb, frc )
   action = {
			if 	FPSCR < 1..0 >
#line 1383 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1383 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1383 "nmp/uisa_fp_instr.nmp"
	else
#line 1383 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1383 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1383 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1383 "nmp/uisa_fp_instr.nmp"
		else
#line 1383 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1383 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1383 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1383 "nmp/uisa_fp_instr.nmp"
			else
#line 1383 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1383 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1383 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1383 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1383 "nmp/uisa_fp_instr.nmp"
;
#line 1383 "nmp/uisa_fp_instr.nmp"
#line 1384 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1384 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1384 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1384 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1384 "nmp/uisa_fp_instr.nmp"
;
#line 1384 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1384 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1384 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1384 "nmp/uisa_fp_instr.nmp"
;
#line 1384 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1384 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1384 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1384 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1384 "nmp/uisa_fp_instr.nmp"
;
#line 1384 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1384 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1384 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1384 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1384 "nmp/uisa_fp_instr.nmp"
;
#line 1384 "nmp/uisa_fp_instr.nmp"
;
#line 1384 "nmp/uisa_fp_instr.nmp"
#line 1385 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT= ( FPR [ fra ] * FPR [ frc ] ) + FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1386 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1386 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1386 "nmp/uisa_fp_instr.nmp"
 then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
	else
#line 1386 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1386 "nmp/uisa_fp_instr.nmp"
		 then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		else
#line 1386 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1386 "nmp/uisa_fp_instr.nmp"
 then
#line 1386 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
			else
#line 1386 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1386 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1386 "nmp/uisa_fp_instr.nmp"
	 then
#line 1386 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
				else
#line 1386 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1386 "nmp/uisa_fp_instr.nmp"
 then
#line 1386 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
					else
#line 1386 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1386 "nmp/uisa_fp_instr.nmp"
 then
#line 1386 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
						else
#line 1386 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1386 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1386 "nmp/uisa_fp_instr.nmp"
		 then
#line 1386 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
							else
#line 1386 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1386 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1386 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1386 "nmp/uisa_fp_instr.nmp"
 then
#line 1386 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
								else
#line 1386 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1386 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1386 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1386 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		else
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1386 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1386 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1386 "nmp/uisa_fp_instr.nmp"
;
#line 1386 "nmp/uisa_fp_instr.nmp"
#line 1387 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1388 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1388 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1388 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1388 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1388 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1388 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1388 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1388 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1388 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1388 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1388 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1388 "nmp/uisa_fp_instr.nmp"
 then
#line 1388 "nmp/uisa_fp_instr.nmp"
#line 1389 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1389 "nmp/uisa_fp_instr.nmp"
;
#line 1389 "nmp/uisa_fp_instr.nmp"
#line 1390 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1391 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1391 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1391 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1391 "nmp/uisa_fp_instr.nmp"
) ||
#line 1391 "nmp/uisa_fp_instr.nmp"
#line 1392 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1392 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1392 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1392 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1392 "nmp/uisa_fp_instr.nmp"
)) then
#line 1392 "nmp/uisa_fp_instr.nmp"
#line 1393 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1393 "nmp/uisa_fp_instr.nmp"
;
#line 1393 "nmp/uisa_fp_instr.nmp"
#line 1394 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1395 "nmp/uisa_fp_instr.nmp"
;
#line 1395 "nmp/uisa_fp_instr.nmp"
#line 1396 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1402 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1402 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1402 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1402 "nmp/uisa_fp_instr.nmp"
;
#line 1402 "nmp/uisa_fp_instr.nmp"
#line 1403 "nmp/uisa_fp_instr.nmp"
		endif;
		}

op ufp_mult_add_sgl ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fmadds fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111011%5b%5b%5b%5b111010", frd, fra, frb, frc )
   action = {
			if 	FPSCR < 1..0 >
#line 1410 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1410 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1410 "nmp/uisa_fp_instr.nmp"
	else
#line 1410 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1410 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1410 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1410 "nmp/uisa_fp_instr.nmp"
		else
#line 1410 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1410 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1410 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1410 "nmp/uisa_fp_instr.nmp"
			else
#line 1410 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1410 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1410 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1410 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1410 "nmp/uisa_fp_instr.nmp"
;
#line 1410 "nmp/uisa_fp_instr.nmp"
#line 1411 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1411 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1411 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1411 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1411 "nmp/uisa_fp_instr.nmp"
;
#line 1411 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1411 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1411 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1411 "nmp/uisa_fp_instr.nmp"
;
#line 1411 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1411 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1411 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1411 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1411 "nmp/uisa_fp_instr.nmp"
;
#line 1411 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1411 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1411 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1411 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1411 "nmp/uisa_fp_instr.nmp"
;
#line 1411 "nmp/uisa_fp_instr.nmp"
;
#line 1411 "nmp/uisa_fp_instr.nmp"
#line 1412 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = (FPR[fra] * FPR[frc])+FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1413 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1413 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1413 "nmp/uisa_fp_instr.nmp"
 then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
	else
#line 1413 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1413 "nmp/uisa_fp_instr.nmp"
		 then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		else
#line 1413 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1413 "nmp/uisa_fp_instr.nmp"
 then
#line 1413 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
			else
#line 1413 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1413 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1413 "nmp/uisa_fp_instr.nmp"
	 then
#line 1413 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
				else
#line 1413 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1413 "nmp/uisa_fp_instr.nmp"
 then
#line 1413 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
					else
#line 1413 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1413 "nmp/uisa_fp_instr.nmp"
 then
#line 1413 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
						else
#line 1413 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1413 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1413 "nmp/uisa_fp_instr.nmp"
		 then
#line 1413 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
							else
#line 1413 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1413 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1413 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1413 "nmp/uisa_fp_instr.nmp"
 then
#line 1413 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
								else
#line 1413 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1413 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1413 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1413 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1413 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		else
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1413 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1413 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1413 "nmp/uisa_fp_instr.nmp"
;
#line 1413 "nmp/uisa_fp_instr.nmp"
#line 1414 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1415 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1415 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1415 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1415 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1415 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1415 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1415 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1415 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1415 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1415 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1415 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1415 "nmp/uisa_fp_instr.nmp"
 then
#line 1415 "nmp/uisa_fp_instr.nmp"
#line 1416 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1416 "nmp/uisa_fp_instr.nmp"
;
#line 1416 "nmp/uisa_fp_instr.nmp"
#line 1417 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1418 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1418 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1418 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1418 "nmp/uisa_fp_instr.nmp"
) ||
#line 1418 "nmp/uisa_fp_instr.nmp"
#line 1419 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1419 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1419 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1419 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1419 "nmp/uisa_fp_instr.nmp"
)) then
#line 1419 "nmp/uisa_fp_instr.nmp"
#line 1420 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1420 "nmp/uisa_fp_instr.nmp"
;
#line 1420 "nmp/uisa_fp_instr.nmp"
#line 1421 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1422 "nmp/uisa_fp_instr.nmp"
;
#line 1422 "nmp/uisa_fp_instr.nmp"
#line 1423 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_mult_adds_cr_upd ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fmadds. fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111011%5b%5b%5b%5b111011", frd, fra, frb, frc )
   action = {

			if 	FPSCR < 1..0 >
#line 1436 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1436 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1436 "nmp/uisa_fp_instr.nmp"
	else
#line 1436 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1436 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1436 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1436 "nmp/uisa_fp_instr.nmp"
		else
#line 1436 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1436 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1436 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1436 "nmp/uisa_fp_instr.nmp"
			else
#line 1436 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1436 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1436 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1436 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1436 "nmp/uisa_fp_instr.nmp"
;
#line 1436 "nmp/uisa_fp_instr.nmp"
#line 1437 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1437 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1437 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1437 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1437 "nmp/uisa_fp_instr.nmp"
;
#line 1437 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1437 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1437 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1437 "nmp/uisa_fp_instr.nmp"
;
#line 1437 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1437 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1437 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1437 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1437 "nmp/uisa_fp_instr.nmp"
;
#line 1437 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1437 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1437 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1437 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1437 "nmp/uisa_fp_instr.nmp"
;
#line 1437 "nmp/uisa_fp_instr.nmp"
;
#line 1437 "nmp/uisa_fp_instr.nmp"
#line 1438 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = (FPR[fra] * FPR[frc])+FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1439 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1439 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1439 "nmp/uisa_fp_instr.nmp"
 then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
	else
#line 1439 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1439 "nmp/uisa_fp_instr.nmp"
		 then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		else
#line 1439 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1439 "nmp/uisa_fp_instr.nmp"
 then
#line 1439 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
			else
#line 1439 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1439 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1439 "nmp/uisa_fp_instr.nmp"
	 then
#line 1439 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
				else
#line 1439 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1439 "nmp/uisa_fp_instr.nmp"
 then
#line 1439 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
					else
#line 1439 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1439 "nmp/uisa_fp_instr.nmp"
 then
#line 1439 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
						else
#line 1439 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1439 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1439 "nmp/uisa_fp_instr.nmp"
		 then
#line 1439 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
							else
#line 1439 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1439 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1439 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1439 "nmp/uisa_fp_instr.nmp"
 then
#line 1439 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
								else
#line 1439 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1439 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1439 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1439 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1439 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		else
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1439 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1439 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1439 "nmp/uisa_fp_instr.nmp"
;
#line 1439 "nmp/uisa_fp_instr.nmp"
#line 1440 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1441 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1441 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1441 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1441 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1441 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1441 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1441 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1441 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1441 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1441 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1441 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1441 "nmp/uisa_fp_instr.nmp"
 then
#line 1441 "nmp/uisa_fp_instr.nmp"
#line 1442 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1442 "nmp/uisa_fp_instr.nmp"
;
#line 1442 "nmp/uisa_fp_instr.nmp"
#line 1443 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1444 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1444 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1444 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1444 "nmp/uisa_fp_instr.nmp"
) ||
#line 1444 "nmp/uisa_fp_instr.nmp"
#line 1445 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1445 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1445 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1445 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1445 "nmp/uisa_fp_instr.nmp"
)) then
#line 1445 "nmp/uisa_fp_instr.nmp"
#line 1446 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1446 "nmp/uisa_fp_instr.nmp"
;
#line 1446 "nmp/uisa_fp_instr.nmp"
#line 1447 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1448 "nmp/uisa_fp_instr.nmp"
;
#line 1448 "nmp/uisa_fp_instr.nmp"
#line 1449 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1455 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1455 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1455 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1455 "nmp/uisa_fp_instr.nmp"
;
#line 1455 "nmp/uisa_fp_instr.nmp"
#line 1456 "nmp/uisa_fp_instr.nmp"
		endif;
		}

op ufp_mult_nadd_dbl ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fnmadd fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111111%5b%5b%5b%5b111110", frd, fra, frb, frc )
   action = {

        	if 	FPSCR < 1..0 >
#line 1464 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1464 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1464 "nmp/uisa_fp_instr.nmp"
	else
#line 1464 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1464 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1464 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1464 "nmp/uisa_fp_instr.nmp"
		else
#line 1464 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1464 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1464 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1464 "nmp/uisa_fp_instr.nmp"
			else
#line 1464 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1464 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1464 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1464 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1464 "nmp/uisa_fp_instr.nmp"
;
#line 1464 "nmp/uisa_fp_instr.nmp"
#line 1465 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1465 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1465 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1465 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1465 "nmp/uisa_fp_instr.nmp"
;
#line 1465 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1465 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1465 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1465 "nmp/uisa_fp_instr.nmp"
;
#line 1465 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1465 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1465 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1465 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1465 "nmp/uisa_fp_instr.nmp"
;
#line 1465 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1465 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1465 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1465 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1465 "nmp/uisa_fp_instr.nmp"
;
#line 1465 "nmp/uisa_fp_instr.nmp"
;
#line 1465 "nmp/uisa_fp_instr.nmp"
#line 1466 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = -( ( FPR [ fra ] * FPR [ frc ] ) + FPR [ frb ] );
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1467 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1467 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1467 "nmp/uisa_fp_instr.nmp"
 then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
	else
#line 1467 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1467 "nmp/uisa_fp_instr.nmp"
		 then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		else
#line 1467 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1467 "nmp/uisa_fp_instr.nmp"
 then
#line 1467 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
			else
#line 1467 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1467 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1467 "nmp/uisa_fp_instr.nmp"
	 then
#line 1467 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
				else
#line 1467 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1467 "nmp/uisa_fp_instr.nmp"
 then
#line 1467 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
					else
#line 1467 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1467 "nmp/uisa_fp_instr.nmp"
 then
#line 1467 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
						else
#line 1467 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1467 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1467 "nmp/uisa_fp_instr.nmp"
		 then
#line 1467 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
							else
#line 1467 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1467 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1467 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1467 "nmp/uisa_fp_instr.nmp"
 then
#line 1467 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
								else
#line 1467 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1467 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1467 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1467 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		else
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1467 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1467 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1467 "nmp/uisa_fp_instr.nmp"
;
#line 1467 "nmp/uisa_fp_instr.nmp"
#line 1468 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1469 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1469 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1469 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1469 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1469 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1469 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1469 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1469 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1469 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1469 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1469 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1469 "nmp/uisa_fp_instr.nmp"
 then
#line 1469 "nmp/uisa_fp_instr.nmp"
#line 1470 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1470 "nmp/uisa_fp_instr.nmp"
;
#line 1470 "nmp/uisa_fp_instr.nmp"
#line 1471 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1472 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1472 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1472 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1472 "nmp/uisa_fp_instr.nmp"
) ||
#line 1472 "nmp/uisa_fp_instr.nmp"
#line 1473 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1473 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1473 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1473 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1473 "nmp/uisa_fp_instr.nmp"
)) then
#line 1473 "nmp/uisa_fp_instr.nmp"
#line 1474 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1474 "nmp/uisa_fp_instr.nmp"
;
#line 1474 "nmp/uisa_fp_instr.nmp"
#line 1475 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1476 "nmp/uisa_fp_instr.nmp"
;
#line 1476 "nmp/uisa_fp_instr.nmp"
#line 1477 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_mult_naddd_cr_upd ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fnmadd. fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111111%5b%5b%5b%5b111111", frd, fra, frb, frc )
   action = {
			if 	FPSCR < 1..0 >
#line 1489 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1489 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1489 "nmp/uisa_fp_instr.nmp"
	else
#line 1489 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1489 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1489 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1489 "nmp/uisa_fp_instr.nmp"
		else
#line 1489 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1489 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1489 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1489 "nmp/uisa_fp_instr.nmp"
			else
#line 1489 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1489 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1489 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1489 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1489 "nmp/uisa_fp_instr.nmp"
;
#line 1489 "nmp/uisa_fp_instr.nmp"
#line 1490 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1490 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1490 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1490 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1490 "nmp/uisa_fp_instr.nmp"
;
#line 1490 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1490 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1490 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1490 "nmp/uisa_fp_instr.nmp"
;
#line 1490 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1490 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1490 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1490 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1490 "nmp/uisa_fp_instr.nmp"
;
#line 1490 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1490 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1490 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1490 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1490 "nmp/uisa_fp_instr.nmp"
;
#line 1490 "nmp/uisa_fp_instr.nmp"
;
#line 1490 "nmp/uisa_fp_instr.nmp"
#line 1491 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = -( ( FPR [ fra ] * FPR [ frc ] ) + FPR [ frb ] );
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1492 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1492 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1492 "nmp/uisa_fp_instr.nmp"
 then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
	else
#line 1492 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1492 "nmp/uisa_fp_instr.nmp"
		 then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		else
#line 1492 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1492 "nmp/uisa_fp_instr.nmp"
 then
#line 1492 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
			else
#line 1492 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1492 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1492 "nmp/uisa_fp_instr.nmp"
	 then
#line 1492 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
				else
#line 1492 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1492 "nmp/uisa_fp_instr.nmp"
 then
#line 1492 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
					else
#line 1492 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1492 "nmp/uisa_fp_instr.nmp"
 then
#line 1492 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
						else
#line 1492 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1492 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1492 "nmp/uisa_fp_instr.nmp"
		 then
#line 1492 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
							else
#line 1492 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1492 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1492 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1492 "nmp/uisa_fp_instr.nmp"
 then
#line 1492 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
								else
#line 1492 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1492 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1492 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1492 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		else
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1492 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1492 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1492 "nmp/uisa_fp_instr.nmp"
;
#line 1492 "nmp/uisa_fp_instr.nmp"
#line 1493 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1494 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1494 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1494 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1494 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1494 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1494 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1494 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1494 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1494 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1494 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1494 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1494 "nmp/uisa_fp_instr.nmp"
 then
#line 1494 "nmp/uisa_fp_instr.nmp"
#line 1495 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1495 "nmp/uisa_fp_instr.nmp"
;
#line 1495 "nmp/uisa_fp_instr.nmp"
#line 1496 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1497 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1497 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1497 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1497 "nmp/uisa_fp_instr.nmp"
) ||
#line 1497 "nmp/uisa_fp_instr.nmp"
#line 1498 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1498 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1498 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1498 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1498 "nmp/uisa_fp_instr.nmp"
)) then
#line 1498 "nmp/uisa_fp_instr.nmp"
#line 1499 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1499 "nmp/uisa_fp_instr.nmp"
;
#line 1499 "nmp/uisa_fp_instr.nmp"
#line 1500 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1501 "nmp/uisa_fp_instr.nmp"
;
#line 1501 "nmp/uisa_fp_instr.nmp"
#line 1502 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1508 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1508 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1508 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1508 "nmp/uisa_fp_instr.nmp"
;
#line 1508 "nmp/uisa_fp_instr.nmp"
#line 1509 "nmp/uisa_fp_instr.nmp"
		endif;
        }

op ufp_mult_nadd_sgl ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fnmadds fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111011%5b%5b%5b%5b111110", frd, fra, frb, frc )
   action = {

			if 	FPSCR < 1..0 >
#line 1517 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1517 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1517 "nmp/uisa_fp_instr.nmp"
	else
#line 1517 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1517 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1517 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1517 "nmp/uisa_fp_instr.nmp"
		else
#line 1517 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1517 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1517 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1517 "nmp/uisa_fp_instr.nmp"
			else
#line 1517 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1517 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1517 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1517 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1517 "nmp/uisa_fp_instr.nmp"
;
#line 1517 "nmp/uisa_fp_instr.nmp"
#line 1518 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1518 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1518 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1518 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1518 "nmp/uisa_fp_instr.nmp"
;
#line 1518 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1518 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1518 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1518 "nmp/uisa_fp_instr.nmp"
;
#line 1518 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1518 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1518 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1518 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1518 "nmp/uisa_fp_instr.nmp"
;
#line 1518 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1518 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1518 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1518 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1518 "nmp/uisa_fp_instr.nmp"
;
#line 1518 "nmp/uisa_fp_instr.nmp"
;
#line 1518 "nmp/uisa_fp_instr.nmp"
#line 1519 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = -((FPR[fra] * FPR[frc])+FPR[frb]);
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1520 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1520 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1520 "nmp/uisa_fp_instr.nmp"
 then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
	else
#line 1520 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1520 "nmp/uisa_fp_instr.nmp"
		 then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		else
#line 1520 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1520 "nmp/uisa_fp_instr.nmp"
 then
#line 1520 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
			else
#line 1520 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1520 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1520 "nmp/uisa_fp_instr.nmp"
	 then
#line 1520 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
				else
#line 1520 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1520 "nmp/uisa_fp_instr.nmp"
 then
#line 1520 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
					else
#line 1520 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1520 "nmp/uisa_fp_instr.nmp"
 then
#line 1520 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
						else
#line 1520 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1520 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1520 "nmp/uisa_fp_instr.nmp"
		 then
#line 1520 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
							else
#line 1520 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1520 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1520 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1520 "nmp/uisa_fp_instr.nmp"
 then
#line 1520 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
								else
#line 1520 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1520 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1520 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1520 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1520 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		else
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1520 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1520 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1520 "nmp/uisa_fp_instr.nmp"
;
#line 1520 "nmp/uisa_fp_instr.nmp"
#line 1521 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1522 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1522 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1522 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1522 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1522 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1522 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1522 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1522 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1522 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1522 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1522 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1522 "nmp/uisa_fp_instr.nmp"
 then
#line 1522 "nmp/uisa_fp_instr.nmp"
#line 1523 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1523 "nmp/uisa_fp_instr.nmp"
;
#line 1523 "nmp/uisa_fp_instr.nmp"
#line 1524 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1525 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1525 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1525 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1525 "nmp/uisa_fp_instr.nmp"
) ||
#line 1525 "nmp/uisa_fp_instr.nmp"
#line 1526 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1526 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1526 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1526 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1526 "nmp/uisa_fp_instr.nmp"
)) then
#line 1526 "nmp/uisa_fp_instr.nmp"
#line 1527 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1527 "nmp/uisa_fp_instr.nmp"
;
#line 1527 "nmp/uisa_fp_instr.nmp"
#line 1528 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1529 "nmp/uisa_fp_instr.nmp"
;
#line 1529 "nmp/uisa_fp_instr.nmp"
#line 1530 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_mult_nadds_cr_upd ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fnmadds. fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111011%5b%5b%5b%5b111111", frd, fra, frb, frc )
   action = {

			if 	FPSCR < 1..0 >
#line 1543 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1543 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1543 "nmp/uisa_fp_instr.nmp"
	else
#line 1543 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1543 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1543 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1543 "nmp/uisa_fp_instr.nmp"
		else
#line 1543 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1543 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1543 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1543 "nmp/uisa_fp_instr.nmp"
			else
#line 1543 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1543 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1543 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1543 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1543 "nmp/uisa_fp_instr.nmp"
;
#line 1543 "nmp/uisa_fp_instr.nmp"
#line 1544 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1544 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1544 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1544 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1544 "nmp/uisa_fp_instr.nmp"
;
#line 1544 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1544 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1544 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1544 "nmp/uisa_fp_instr.nmp"
;
#line 1544 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1544 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1544 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1544 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1544 "nmp/uisa_fp_instr.nmp"
;
#line 1544 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1544 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1544 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1544 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1544 "nmp/uisa_fp_instr.nmp"
;
#line 1544 "nmp/uisa_fp_instr.nmp"
;
#line 1544 "nmp/uisa_fp_instr.nmp"
#line 1545 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = -((FPR[fra] * FPR[frc])+FPR[frb]);
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1546 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1546 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1546 "nmp/uisa_fp_instr.nmp"
 then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
	else
#line 1546 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1546 "nmp/uisa_fp_instr.nmp"
		 then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		else
#line 1546 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1546 "nmp/uisa_fp_instr.nmp"
 then
#line 1546 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
			else
#line 1546 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1546 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1546 "nmp/uisa_fp_instr.nmp"
	 then
#line 1546 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
				else
#line 1546 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1546 "nmp/uisa_fp_instr.nmp"
 then
#line 1546 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
					else
#line 1546 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1546 "nmp/uisa_fp_instr.nmp"
 then
#line 1546 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
						else
#line 1546 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1546 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1546 "nmp/uisa_fp_instr.nmp"
		 then
#line 1546 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
							else
#line 1546 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1546 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1546 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1546 "nmp/uisa_fp_instr.nmp"
 then
#line 1546 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
								else
#line 1546 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1546 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1546 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1546 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1546 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		else
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1546 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1546 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1546 "nmp/uisa_fp_instr.nmp"
;
#line 1546 "nmp/uisa_fp_instr.nmp"
#line 1547 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1548 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1548 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1548 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1548 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1548 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1548 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1548 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1548 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1548 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1548 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1548 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1548 "nmp/uisa_fp_instr.nmp"
 then
#line 1548 "nmp/uisa_fp_instr.nmp"
#line 1549 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1549 "nmp/uisa_fp_instr.nmp"
;
#line 1549 "nmp/uisa_fp_instr.nmp"
#line 1550 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1551 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1551 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1551 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1551 "nmp/uisa_fp_instr.nmp"
) ||
#line 1551 "nmp/uisa_fp_instr.nmp"
#line 1552 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1552 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1552 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1552 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1552 "nmp/uisa_fp_instr.nmp"
)) then
#line 1552 "nmp/uisa_fp_instr.nmp"
#line 1553 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1553 "nmp/uisa_fp_instr.nmp"
;
#line 1553 "nmp/uisa_fp_instr.nmp"
#line 1554 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1555 "nmp/uisa_fp_instr.nmp"
;
#line 1555 "nmp/uisa_fp_instr.nmp"
#line 1556 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1562 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1562 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1562 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1562 "nmp/uisa_fp_instr.nmp"
;
#line 1562 "nmp/uisa_fp_instr.nmp"
#line 1563 "nmp/uisa_fp_instr.nmp"
		endif;
		}


op ufp_mult_sub_dbl ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fmsub fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111111%5b%5b%5b%5b111000", frd, fra, frb, frc )
   action = {

        	if 	FPSCR < 1..0 >
#line 1572 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1572 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1572 "nmp/uisa_fp_instr.nmp"
	else
#line 1572 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1572 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1572 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1572 "nmp/uisa_fp_instr.nmp"
		else
#line 1572 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1572 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1572 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1572 "nmp/uisa_fp_instr.nmp"
			else
#line 1572 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1572 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1572 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1572 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1572 "nmp/uisa_fp_instr.nmp"
;
#line 1572 "nmp/uisa_fp_instr.nmp"
#line 1573 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1573 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1573 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1573 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1573 "nmp/uisa_fp_instr.nmp"
;
#line 1573 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1573 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1573 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1573 "nmp/uisa_fp_instr.nmp"
;
#line 1573 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1573 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1573 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1573 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1573 "nmp/uisa_fp_instr.nmp"
;
#line 1573 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1573 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1573 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1573 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1573 "nmp/uisa_fp_instr.nmp"
;
#line 1573 "nmp/uisa_fp_instr.nmp"
;
#line 1573 "nmp/uisa_fp_instr.nmp"
#line 1574 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = ( FPR [ fra ] * FPR [ frc ] ) - FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1575 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1575 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1575 "nmp/uisa_fp_instr.nmp"
 then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
	else
#line 1575 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1575 "nmp/uisa_fp_instr.nmp"
		 then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		else
#line 1575 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1575 "nmp/uisa_fp_instr.nmp"
 then
#line 1575 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
			else
#line 1575 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1575 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1575 "nmp/uisa_fp_instr.nmp"
	 then
#line 1575 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
				else
#line 1575 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1575 "nmp/uisa_fp_instr.nmp"
 then
#line 1575 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
					else
#line 1575 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1575 "nmp/uisa_fp_instr.nmp"
 then
#line 1575 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
						else
#line 1575 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1575 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1575 "nmp/uisa_fp_instr.nmp"
		 then
#line 1575 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
							else
#line 1575 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1575 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1575 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1575 "nmp/uisa_fp_instr.nmp"
 then
#line 1575 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
								else
#line 1575 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1575 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1575 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1575 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		else
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1575 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1575 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1575 "nmp/uisa_fp_instr.nmp"
;
#line 1575 "nmp/uisa_fp_instr.nmp"
#line 1576 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1577 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1577 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1577 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1577 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1577 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1577 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1577 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1577 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1577 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1577 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1577 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1577 "nmp/uisa_fp_instr.nmp"
 then
#line 1577 "nmp/uisa_fp_instr.nmp"
#line 1578 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1578 "nmp/uisa_fp_instr.nmp"
;
#line 1578 "nmp/uisa_fp_instr.nmp"
#line 1579 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1580 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1580 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1580 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1580 "nmp/uisa_fp_instr.nmp"
) ||
#line 1580 "nmp/uisa_fp_instr.nmp"
#line 1581 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1581 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1581 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1581 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1581 "nmp/uisa_fp_instr.nmp"
)) then
#line 1581 "nmp/uisa_fp_instr.nmp"
#line 1582 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1582 "nmp/uisa_fp_instr.nmp"
;
#line 1582 "nmp/uisa_fp_instr.nmp"
#line 1583 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1584 "nmp/uisa_fp_instr.nmp"
;
#line 1584 "nmp/uisa_fp_instr.nmp"
#line 1585 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;

        }

op ufp_mult_subd_cr_upd ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fmsub. fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111111%5b%5b%5b%5b111001", frd, fra, frb, frc )
   action = {

        	if 	FPSCR < 1..0 >
#line 1599 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1599 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1599 "nmp/uisa_fp_instr.nmp"
	else
#line 1599 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1599 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1599 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1599 "nmp/uisa_fp_instr.nmp"
		else
#line 1599 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1599 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1599 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1599 "nmp/uisa_fp_instr.nmp"
			else
#line 1599 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1599 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1599 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1599 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1599 "nmp/uisa_fp_instr.nmp"
;
#line 1599 "nmp/uisa_fp_instr.nmp"
#line 1600 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1600 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1600 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1600 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1600 "nmp/uisa_fp_instr.nmp"
;
#line 1600 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1600 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1600 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1600 "nmp/uisa_fp_instr.nmp"
;
#line 1600 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1600 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1600 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1600 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1600 "nmp/uisa_fp_instr.nmp"
;
#line 1600 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1600 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1600 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1600 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1600 "nmp/uisa_fp_instr.nmp"
;
#line 1600 "nmp/uisa_fp_instr.nmp"
;
#line 1600 "nmp/uisa_fp_instr.nmp"
#line 1601 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = ( FPR [ fra ] * FPR [ frc ] ) - FPR [ frb ];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1602 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1602 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1602 "nmp/uisa_fp_instr.nmp"
 then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
	else
#line 1602 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1602 "nmp/uisa_fp_instr.nmp"
		 then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		else
#line 1602 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1602 "nmp/uisa_fp_instr.nmp"
 then
#line 1602 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
			else
#line 1602 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1602 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1602 "nmp/uisa_fp_instr.nmp"
	 then
#line 1602 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
				else
#line 1602 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1602 "nmp/uisa_fp_instr.nmp"
 then
#line 1602 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
					else
#line 1602 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1602 "nmp/uisa_fp_instr.nmp"
 then
#line 1602 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
						else
#line 1602 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1602 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1602 "nmp/uisa_fp_instr.nmp"
		 then
#line 1602 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
							else
#line 1602 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1602 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1602 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1602 "nmp/uisa_fp_instr.nmp"
 then
#line 1602 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
								else
#line 1602 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1602 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1602 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1602 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		else
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1602 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1602 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1602 "nmp/uisa_fp_instr.nmp"
;
#line 1602 "nmp/uisa_fp_instr.nmp"
#line 1603 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1604 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1604 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1604 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1604 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1604 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1604 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1604 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1604 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1604 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1604 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1604 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1604 "nmp/uisa_fp_instr.nmp"
 then
#line 1604 "nmp/uisa_fp_instr.nmp"
#line 1605 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1605 "nmp/uisa_fp_instr.nmp"
;
#line 1605 "nmp/uisa_fp_instr.nmp"
#line 1606 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1607 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1607 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1607 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1607 "nmp/uisa_fp_instr.nmp"
) ||
#line 1607 "nmp/uisa_fp_instr.nmp"
#line 1608 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1608 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1608 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1608 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1608 "nmp/uisa_fp_instr.nmp"
)) then
#line 1608 "nmp/uisa_fp_instr.nmp"
#line 1609 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1609 "nmp/uisa_fp_instr.nmp"
;
#line 1609 "nmp/uisa_fp_instr.nmp"
#line 1610 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1611 "nmp/uisa_fp_instr.nmp"
;
#line 1611 "nmp/uisa_fp_instr.nmp"
#line 1612 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1618 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1618 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1618 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1618 "nmp/uisa_fp_instr.nmp"
;
#line 1618 "nmp/uisa_fp_instr.nmp"
#line 1619 "nmp/uisa_fp_instr.nmp"
		endif;
		}

op ufp_mult_sub_sgl ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fmsubs fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111011%5b%5b%5b%5b111000", frd, fra, frb, frc )
   action = {

			if 	FPSCR < 1..0 >
#line 1627 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1627 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1627 "nmp/uisa_fp_instr.nmp"
	else
#line 1627 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1627 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1627 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1627 "nmp/uisa_fp_instr.nmp"
		else
#line 1627 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1627 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1627 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1627 "nmp/uisa_fp_instr.nmp"
			else
#line 1627 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1627 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1627 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1627 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1627 "nmp/uisa_fp_instr.nmp"
;
#line 1627 "nmp/uisa_fp_instr.nmp"
#line 1628 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1628 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1628 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1628 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1628 "nmp/uisa_fp_instr.nmp"
;
#line 1628 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1628 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1628 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1628 "nmp/uisa_fp_instr.nmp"
;
#line 1628 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1628 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1628 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1628 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1628 "nmp/uisa_fp_instr.nmp"
;
#line 1628 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1628 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1628 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1628 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1628 "nmp/uisa_fp_instr.nmp"
;
#line 1628 "nmp/uisa_fp_instr.nmp"
;
#line 1628 "nmp/uisa_fp_instr.nmp"
#line 1629 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = (FPR[fra] * FPR[frc])-FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1630 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1630 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1630 "nmp/uisa_fp_instr.nmp"
 then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
	else
#line 1630 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1630 "nmp/uisa_fp_instr.nmp"
		 then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		else
#line 1630 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1630 "nmp/uisa_fp_instr.nmp"
 then
#line 1630 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
			else
#line 1630 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1630 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1630 "nmp/uisa_fp_instr.nmp"
	 then
#line 1630 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
				else
#line 1630 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1630 "nmp/uisa_fp_instr.nmp"
 then
#line 1630 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
					else
#line 1630 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1630 "nmp/uisa_fp_instr.nmp"
 then
#line 1630 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
						else
#line 1630 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1630 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1630 "nmp/uisa_fp_instr.nmp"
		 then
#line 1630 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
							else
#line 1630 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1630 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1630 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1630 "nmp/uisa_fp_instr.nmp"
 then
#line 1630 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
								else
#line 1630 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1630 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1630 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1630 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1630 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		else
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1630 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1630 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1630 "nmp/uisa_fp_instr.nmp"
;
#line 1630 "nmp/uisa_fp_instr.nmp"
#line 1631 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1632 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1632 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1632 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1632 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1632 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1632 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1632 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1632 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1632 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1632 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1632 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1632 "nmp/uisa_fp_instr.nmp"
 then
#line 1632 "nmp/uisa_fp_instr.nmp"
#line 1633 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1633 "nmp/uisa_fp_instr.nmp"
;
#line 1633 "nmp/uisa_fp_instr.nmp"
#line 1634 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1635 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1635 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1635 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1635 "nmp/uisa_fp_instr.nmp"
) ||
#line 1635 "nmp/uisa_fp_instr.nmp"
#line 1636 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1636 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1636 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1636 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1636 "nmp/uisa_fp_instr.nmp"
)) then
#line 1636 "nmp/uisa_fp_instr.nmp"
#line 1637 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1637 "nmp/uisa_fp_instr.nmp"
;
#line 1637 "nmp/uisa_fp_instr.nmp"
#line 1638 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1639 "nmp/uisa_fp_instr.nmp"
;
#line 1639 "nmp/uisa_fp_instr.nmp"
#line 1640 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;

            }

op ufp_mult_subs_cr_upd ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fmsubs. fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111011%5b%5b%5b%5b111001", frd, fra, frb, frc )
   action = {

			if 	FPSCR < 1..0 >
#line 1654 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1654 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1654 "nmp/uisa_fp_instr.nmp"
	else
#line 1654 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1654 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1654 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1654 "nmp/uisa_fp_instr.nmp"
		else
#line 1654 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1654 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1654 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1654 "nmp/uisa_fp_instr.nmp"
			else
#line 1654 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1654 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1654 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1654 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1654 "nmp/uisa_fp_instr.nmp"
;
#line 1654 "nmp/uisa_fp_instr.nmp"
#line 1655 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1655 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1655 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1655 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1655 "nmp/uisa_fp_instr.nmp"
;
#line 1655 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1655 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1655 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1655 "nmp/uisa_fp_instr.nmp"
;
#line 1655 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1655 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1655 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1655 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1655 "nmp/uisa_fp_instr.nmp"
;
#line 1655 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1655 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1655 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1655 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1655 "nmp/uisa_fp_instr.nmp"
;
#line 1655 "nmp/uisa_fp_instr.nmp"
;
#line 1655 "nmp/uisa_fp_instr.nmp"
#line 1656 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = (FPR[fra] * FPR[frc])-FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1657 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1657 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1657 "nmp/uisa_fp_instr.nmp"
 then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
	else
#line 1657 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1657 "nmp/uisa_fp_instr.nmp"
		 then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		else
#line 1657 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1657 "nmp/uisa_fp_instr.nmp"
 then
#line 1657 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
			else
#line 1657 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1657 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1657 "nmp/uisa_fp_instr.nmp"
	 then
#line 1657 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
				else
#line 1657 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1657 "nmp/uisa_fp_instr.nmp"
 then
#line 1657 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
					else
#line 1657 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1657 "nmp/uisa_fp_instr.nmp"
 then
#line 1657 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
						else
#line 1657 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1657 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1657 "nmp/uisa_fp_instr.nmp"
		 then
#line 1657 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
							else
#line 1657 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1657 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1657 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1657 "nmp/uisa_fp_instr.nmp"
 then
#line 1657 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
								else
#line 1657 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1657 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1657 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1657 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1657 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		else
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1657 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1657 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1657 "nmp/uisa_fp_instr.nmp"
;
#line 1657 "nmp/uisa_fp_instr.nmp"
#line 1658 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1659 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1659 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1659 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1659 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1659 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1659 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1659 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1659 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1659 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1659 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1659 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1659 "nmp/uisa_fp_instr.nmp"
 then
#line 1659 "nmp/uisa_fp_instr.nmp"
#line 1660 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1660 "nmp/uisa_fp_instr.nmp"
;
#line 1660 "nmp/uisa_fp_instr.nmp"
#line 1661 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1662 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1662 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1662 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1662 "nmp/uisa_fp_instr.nmp"
) ||
#line 1662 "nmp/uisa_fp_instr.nmp"
#line 1663 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1663 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1663 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1663 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1663 "nmp/uisa_fp_instr.nmp"
)) then
#line 1663 "nmp/uisa_fp_instr.nmp"
#line 1664 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1664 "nmp/uisa_fp_instr.nmp"
;
#line 1664 "nmp/uisa_fp_instr.nmp"
#line 1665 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1666 "nmp/uisa_fp_instr.nmp"
;
#line 1666 "nmp/uisa_fp_instr.nmp"
#line 1667 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1673 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1673 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1673 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1673 "nmp/uisa_fp_instr.nmp"
;
#line 1673 "nmp/uisa_fp_instr.nmp"
#line 1674 "nmp/uisa_fp_instr.nmp"
		endif;
		}

op ufp_mult_nsub_dbl ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fnmsub fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111111%5b%5b%5b%5b111100", frd, fra, frb, frc )
   action = {
			if 	FPSCR < 1..0 >
#line 1681 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1681 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1681 "nmp/uisa_fp_instr.nmp"
	else
#line 1681 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1681 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1681 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1681 "nmp/uisa_fp_instr.nmp"
		else
#line 1681 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1681 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1681 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1681 "nmp/uisa_fp_instr.nmp"
			else
#line 1681 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1681 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1681 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1681 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1681 "nmp/uisa_fp_instr.nmp"
;
#line 1681 "nmp/uisa_fp_instr.nmp"
#line 1682 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1682 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1682 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1682 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1682 "nmp/uisa_fp_instr.nmp"
;
#line 1682 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1682 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1682 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1682 "nmp/uisa_fp_instr.nmp"
;
#line 1682 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1682 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1682 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1682 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1682 "nmp/uisa_fp_instr.nmp"
;
#line 1682 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1682 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1682 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1682 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1682 "nmp/uisa_fp_instr.nmp"
;
#line 1682 "nmp/uisa_fp_instr.nmp"
;
#line 1682 "nmp/uisa_fp_instr.nmp"
#line 1683 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = -( ( FPR [ fra ] * FPR [ frc ] ) - FPR [ frb ] );
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1684 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1684 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1684 "nmp/uisa_fp_instr.nmp"
 then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
	else
#line 1684 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1684 "nmp/uisa_fp_instr.nmp"
		 then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		else
#line 1684 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1684 "nmp/uisa_fp_instr.nmp"
 then
#line 1684 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
			else
#line 1684 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1684 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1684 "nmp/uisa_fp_instr.nmp"
	 then
#line 1684 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
				else
#line 1684 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1684 "nmp/uisa_fp_instr.nmp"
 then
#line 1684 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
					else
#line 1684 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1684 "nmp/uisa_fp_instr.nmp"
 then
#line 1684 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
						else
#line 1684 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1684 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1684 "nmp/uisa_fp_instr.nmp"
		 then
#line 1684 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
							else
#line 1684 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1684 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1684 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1684 "nmp/uisa_fp_instr.nmp"
 then
#line 1684 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
								else
#line 1684 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1684 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1684 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1684 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		else
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1684 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1684 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1684 "nmp/uisa_fp_instr.nmp"
;
#line 1684 "nmp/uisa_fp_instr.nmp"
#line 1685 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1686 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1686 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1686 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1686 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1686 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1686 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1686 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1686 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1686 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1686 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1686 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1686 "nmp/uisa_fp_instr.nmp"
 then
#line 1686 "nmp/uisa_fp_instr.nmp"
#line 1687 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1687 "nmp/uisa_fp_instr.nmp"
;
#line 1687 "nmp/uisa_fp_instr.nmp"
#line 1688 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1689 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1689 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1689 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1689 "nmp/uisa_fp_instr.nmp"
) ||
#line 1689 "nmp/uisa_fp_instr.nmp"
#line 1690 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1690 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1690 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1690 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1690 "nmp/uisa_fp_instr.nmp"
)) then
#line 1690 "nmp/uisa_fp_instr.nmp"
#line 1691 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1691 "nmp/uisa_fp_instr.nmp"
;
#line 1691 "nmp/uisa_fp_instr.nmp"
#line 1692 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1693 "nmp/uisa_fp_instr.nmp"
;
#line 1693 "nmp/uisa_fp_instr.nmp"
#line 1694 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
				FPSCR <FP_FX..FP_FX> = 1
#line 1698 "nmp/uisa_fp_instr.nmp"
;
#line 1698 "nmp/uisa_fp_instr.nmp"
#line 1699 "nmp/uisa_fp_instr.nmp"
			"launch_exception"("instr",PROGRAM);
		endif;
        }

op ufp_mult_nsubd_cr_upd ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fnmsub. fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111111%5b%5b%5b%5b111101", frd, fra, frb, frc )
   action = {
			if 	FPSCR < 1..0 >
#line 1707 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1707 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1707 "nmp/uisa_fp_instr.nmp"
	else
#line 1707 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1707 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1707 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1707 "nmp/uisa_fp_instr.nmp"
		else
#line 1707 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1707 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1707 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1707 "nmp/uisa_fp_instr.nmp"
			else
#line 1707 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1707 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1707 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1707 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1707 "nmp/uisa_fp_instr.nmp"
;
#line 1707 "nmp/uisa_fp_instr.nmp"
#line 1708 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1708 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1708 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1708 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1708 "nmp/uisa_fp_instr.nmp"
;
#line 1708 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1708 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1708 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1708 "nmp/uisa_fp_instr.nmp"
;
#line 1708 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1708 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1708 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1708 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1708 "nmp/uisa_fp_instr.nmp"
;
#line 1708 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1708 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1708 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1708 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1708 "nmp/uisa_fp_instr.nmp"
;
#line 1708 "nmp/uisa_fp_instr.nmp"
;
#line 1708 "nmp/uisa_fp_instr.nmp"
#line 1709 "nmp/uisa_fp_instr.nmp"
		TMP_FLOT = -( ( FPR [ fra ] * FPR [ frc ] ) - FPR [ frb ] );
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1710 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1710 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1710 "nmp/uisa_fp_instr.nmp"
 then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
	else
#line 1710 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1710 "nmp/uisa_fp_instr.nmp"
		 then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		else
#line 1710 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1710 "nmp/uisa_fp_instr.nmp"
 then
#line 1710 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
			else
#line 1710 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1710 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1710 "nmp/uisa_fp_instr.nmp"
	 then
#line 1710 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
				else
#line 1710 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1710 "nmp/uisa_fp_instr.nmp"
 then
#line 1710 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
					else
#line 1710 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1710 "nmp/uisa_fp_instr.nmp"
 then
#line 1710 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
						else
#line 1710 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1710 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1710 "nmp/uisa_fp_instr.nmp"
		 then
#line 1710 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
							else
#line 1710 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1710 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1710 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1710 "nmp/uisa_fp_instr.nmp"
 then
#line 1710 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
								else
#line 1710 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1710 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1710 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOT;
#line 1710 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		else
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1710 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1710 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1710 "nmp/uisa_fp_instr.nmp"
;
#line 1710 "nmp/uisa_fp_instr.nmp"
#line 1711 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1712 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1712 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1712 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1712 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1712 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1712 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1712 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1712 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1712 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1712 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1712 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1712 "nmp/uisa_fp_instr.nmp"
 then
#line 1712 "nmp/uisa_fp_instr.nmp"
#line 1713 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1713 "nmp/uisa_fp_instr.nmp"
;
#line 1713 "nmp/uisa_fp_instr.nmp"
#line 1714 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1715 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1715 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1715 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1715 "nmp/uisa_fp_instr.nmp"
) ||
#line 1715 "nmp/uisa_fp_instr.nmp"
#line 1716 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1716 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1716 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1716 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1716 "nmp/uisa_fp_instr.nmp"
)) then
#line 1716 "nmp/uisa_fp_instr.nmp"
#line 1717 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1717 "nmp/uisa_fp_instr.nmp"
;
#line 1717 "nmp/uisa_fp_instr.nmp"
#line 1718 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1719 "nmp/uisa_fp_instr.nmp"
;
#line 1719 "nmp/uisa_fp_instr.nmp"
#line 1720 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1726 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1726 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1726 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1726 "nmp/uisa_fp_instr.nmp"
;
#line 1726 "nmp/uisa_fp_instr.nmp"
#line 1727 "nmp/uisa_fp_instr.nmp"
		endif;

            }

op ufp_mult_nsub_sgl ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fnmsubs fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111011%5b%5b%5b%5b111100", frd, fra, frb, frc )
   action = {

			if 	FPSCR < 1..0 >
#line 1736 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1736 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1736 "nmp/uisa_fp_instr.nmp"
	else
#line 1736 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1736 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1736 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1736 "nmp/uisa_fp_instr.nmp"
		else
#line 1736 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1736 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1736 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1736 "nmp/uisa_fp_instr.nmp"
			else
#line 1736 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1736 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1736 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1736 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1736 "nmp/uisa_fp_instr.nmp"
;
#line 1736 "nmp/uisa_fp_instr.nmp"
#line 1737 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1737 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1737 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1737 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1737 "nmp/uisa_fp_instr.nmp"
;
#line 1737 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1737 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1737 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1737 "nmp/uisa_fp_instr.nmp"
;
#line 1737 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1737 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1737 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1737 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1737 "nmp/uisa_fp_instr.nmp"
;
#line 1737 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1737 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1737 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1737 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1737 "nmp/uisa_fp_instr.nmp"
;
#line 1737 "nmp/uisa_fp_instr.nmp"
;
#line 1737 "nmp/uisa_fp_instr.nmp"
#line 1738 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = -((FPR[fra] * FPR[frc])-FPR[frb]);
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1739 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1739 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1739 "nmp/uisa_fp_instr.nmp"
 then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
	else
#line 1739 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1739 "nmp/uisa_fp_instr.nmp"
		 then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		else
#line 1739 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1739 "nmp/uisa_fp_instr.nmp"
 then
#line 1739 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
			else
#line 1739 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1739 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1739 "nmp/uisa_fp_instr.nmp"
	 then
#line 1739 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
				else
#line 1739 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1739 "nmp/uisa_fp_instr.nmp"
 then
#line 1739 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
					else
#line 1739 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1739 "nmp/uisa_fp_instr.nmp"
 then
#line 1739 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
						else
#line 1739 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1739 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1739 "nmp/uisa_fp_instr.nmp"
		 then
#line 1739 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
							else
#line 1739 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1739 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1739 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1739 "nmp/uisa_fp_instr.nmp"
 then
#line 1739 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
								else
#line 1739 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1739 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1739 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1739 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1739 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		else
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1739 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1739 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1739 "nmp/uisa_fp_instr.nmp"
;
#line 1739 "nmp/uisa_fp_instr.nmp"
#line 1740 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1741 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1741 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1741 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1741 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1741 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1741 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1741 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1741 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1741 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1741 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1741 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1741 "nmp/uisa_fp_instr.nmp"
 then
#line 1741 "nmp/uisa_fp_instr.nmp"
#line 1742 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1742 "nmp/uisa_fp_instr.nmp"
;
#line 1742 "nmp/uisa_fp_instr.nmp"
#line 1743 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1744 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1744 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1744 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1744 "nmp/uisa_fp_instr.nmp"
) ||
#line 1744 "nmp/uisa_fp_instr.nmp"
#line 1745 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1745 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1745 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1745 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1745 "nmp/uisa_fp_instr.nmp"
)) then
#line 1745 "nmp/uisa_fp_instr.nmp"
#line 1746 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1746 "nmp/uisa_fp_instr.nmp"
;
#line 1746 "nmp/uisa_fp_instr.nmp"
#line 1747 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1748 "nmp/uisa_fp_instr.nmp"
;
#line 1748 "nmp/uisa_fp_instr.nmp"
#line 1749 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_mult_nsubs_cr_upd ( frd : index, fra : index, frb : index, frc : index )
   syntax = format ( "fnmsubs. fr%d,fr%d,fr%d,fr%d", frd, fra, frc, frb )
   image  = format ( "111011%5b%5b%5b%5b111101", frd, fra, frb, frc )
   action = {
			if 	FPSCR < 1..0 >
#line 1761 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1761 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1761 "nmp/uisa_fp_instr.nmp"
	else
#line 1761 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1761 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1761 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1761 "nmp/uisa_fp_instr.nmp"
		else
#line 1761 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1761 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1761 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1761 "nmp/uisa_fp_instr.nmp"
			else
#line 1761 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1761 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1761 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1761 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1761 "nmp/uisa_fp_instr.nmp"
;
#line 1761 "nmp/uisa_fp_instr.nmp"
#line 1762 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1762 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1762 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1762 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1762 "nmp/uisa_fp_instr.nmp"
;
#line 1762 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1762 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1762 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1762 "nmp/uisa_fp_instr.nmp"
;
#line 1762 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1762 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1762 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1762 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1762 "nmp/uisa_fp_instr.nmp"
;
#line 1762 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1762 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1762 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1762 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1762 "nmp/uisa_fp_instr.nmp"
;
#line 1762 "nmp/uisa_fp_instr.nmp"
;
#line 1762 "nmp/uisa_fp_instr.nmp"
#line 1763 "nmp/uisa_fp_instr.nmp"
		TMP_FLOTS = -((FPR[fra] * FPR[frc])-FPR[frb]);
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1764 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1764 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1764 "nmp/uisa_fp_instr.nmp"
 then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
	else
#line 1764 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1764 "nmp/uisa_fp_instr.nmp"
		 then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		else
#line 1764 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1764 "nmp/uisa_fp_instr.nmp"
 then
#line 1764 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
			else
#line 1764 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1764 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1764 "nmp/uisa_fp_instr.nmp"
	 then
#line 1764 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
				else
#line 1764 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1764 "nmp/uisa_fp_instr.nmp"
 then
#line 1764 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
					else
#line 1764 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1764 "nmp/uisa_fp_instr.nmp"
 then
#line 1764 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
						else
#line 1764 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1764 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1764 "nmp/uisa_fp_instr.nmp"
		 then
#line 1764 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
							else
#line 1764 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1764 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1764 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1764 "nmp/uisa_fp_instr.nmp"
 then
#line 1764 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
								else
#line 1764 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1764 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1764 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1764 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1764 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		else
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1764 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1764 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1764 "nmp/uisa_fp_instr.nmp"
;
#line 1764 "nmp/uisa_fp_instr.nmp"
#line 1765 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[fra]<62..52>
#line 1766 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1766 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1766 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1766 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1766 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1766 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1766 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1766 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frc]<62..52>
#line 1766 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1766 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1766 "nmp/uisa_fp_instr.nmp"
 && FPR[frc] <51..51> == 0 )
#line 1766 "nmp/uisa_fp_instr.nmp"
 then
#line 1766 "nmp/uisa_fp_instr.nmp"
#line 1767 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1767 "nmp/uisa_fp_instr.nmp"
;
#line 1767 "nmp/uisa_fp_instr.nmp"
#line 1768 "nmp/uisa_fp_instr.nmp"
			else
				if (((	( 	FPR[fra]<63..63>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1769 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[fra]<63..63>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[fra]<62..52>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1769 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[frc]<63..63>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<51..0>
#line 1769 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1769 "nmp/uisa_fp_instr.nmp"
) ||
#line 1769 "nmp/uisa_fp_instr.nmp"
#line 1770 "nmp/uisa_fp_instr.nmp"
					((	( 	FPR[frc]<63..63>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frc]<62..52>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1770 "nmp/uisa_fp_instr.nmp"
		 || 	( 	FPR[frc]<63..63>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frc]<62..52>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frc]<51..0>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1770 "nmp/uisa_fp_instr.nmp"
		) && 	( 	FPR[fra]<63..63>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<62..52>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[fra]<51..0>
#line 1770 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1770 "nmp/uisa_fp_instr.nmp"
)) then
#line 1770 "nmp/uisa_fp_instr.nmp"
#line 1771 "nmp/uisa_fp_instr.nmp"
						FPSCR <FP_VXIMZ..FP_VXIMZ> = 1
#line 1771 "nmp/uisa_fp_instr.nmp"
;
#line 1771 "nmp/uisa_fp_instr.nmp"
#line 1772 "nmp/uisa_fp_instr.nmp"
				else
						FPSCR <FP_VXISI..FP_VXISI> = 1
#line 1773 "nmp/uisa_fp_instr.nmp"
;
#line 1773 "nmp/uisa_fp_instr.nmp"
#line 1774 "nmp/uisa_fp_instr.nmp"
				endif;
			endif;
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1780 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1780 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1780 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1780 "nmp/uisa_fp_instr.nmp"
;
#line 1780 "nmp/uisa_fp_instr.nmp"
#line 1781 "nmp/uisa_fp_instr.nmp"
		endif;
        }


// 2.2.2 Floating point Compare Instructions
// -----------------------------------------

op  ufp_compare ( x : ufp_compare_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPCMP

op ufp_compare_action =   ufp_cmp_ord
                        | ufp_cmp_unord

op ufp_cmp_ord ( crfd : card ( 3 ), fra : index, frb : index )
   syntax = format ( "fcmpo crf%d,fr%d,fr%d", crfd, fra, frb )
   image  = format ( "111111%3b00%5b%5b00001000000", crfd, fra, frb )
   action = {
		if 	( 	FPR[fra]<62..52>
#line 1801 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1801 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1801 "nmp/uisa_fp_instr.nmp"
 || 	( 	FPR[frb]<62..52>
#line 1801 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1801 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1801 "nmp/uisa_fp_instr.nmp"
 then
#line 1801 "nmp/uisa_fp_instr.nmp"
#line 1802 "nmp/uisa_fp_instr.nmp"
			TMP_BYTE = 0b0001;
		else
			if FPR [ fra ] < FPR [ frb ] then
				TMP_BYTE = 0b1000;
			else
				if FPR [ fra ] > FPR [ frb ] then
					TMP_BYTE = 0b0100;
				else
					TMP_BYTE = 0b0010;
				endif;
			endif;
		endif;
		FPSCR<15..12>=TMP_BYTE<3..0>;
		CR[(7-crfd)] < LT..SO > = TMP_BYTE <3..0>;

		if 	( 	( 	FPR[fra]<62..52>
#line 1817 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1817 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1817 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1817 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1817 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1817 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1817 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1817 "nmp/uisa_fp_instr.nmp"
 then
#line 1817 "nmp/uisa_fp_instr.nmp"
#line 1818 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1818 "nmp/uisa_fp_instr.nmp"
;
#line 1818 "nmp/uisa_fp_instr.nmp"
#line 1819 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FX..FP_FX> = 1
#line 1819 "nmp/uisa_fp_instr.nmp"
;
#line 1819 "nmp/uisa_fp_instr.nmp"
#line 1820 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_VE..FP_VE>==0 then
					FPSCR <FP_VXVC..FP_VXVC> = 1
#line 1821 "nmp/uisa_fp_instr.nmp"
;
#line 1821 "nmp/uisa_fp_instr.nmp"
#line 1822 "nmp/uisa_fp_instr.nmp"
			endif;
		endif;

		if 	( 	( 	FPR[fra]<62..52>
#line 1825 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1825 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1825 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 1 )
#line 1825 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1825 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1825 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1825 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 1 )
#line 1825 "nmp/uisa_fp_instr.nmp"
 then
#line 1825 "nmp/uisa_fp_instr.nmp"
#line 1826 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_VXVC..FP_VXVC> = 1
#line 1826 "nmp/uisa_fp_instr.nmp"
;
#line 1826 "nmp/uisa_fp_instr.nmp"
#line 1827 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FX..FP_FX> = 1
#line 1827 "nmp/uisa_fp_instr.nmp"
;
#line 1827 "nmp/uisa_fp_instr.nmp"
#line 1828 "nmp/uisa_fp_instr.nmp"
		endif;

        }

op ufp_cmp_unord ( crfd : card ( 3 ), fra : index, frb : index )
   syntax = format ( "fcmpu crf%d,fr%d,fr%d", crfd, fra, frb )
   image  = format ( "111111%3b00%5b%5b00000000000", crfd, fra, frb )
   action = {

        if 	( 	FPR[fra]<62..52>
#line 1837 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1837 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1837 "nmp/uisa_fp_instr.nmp"
 || 	( 	FPR[frb]<62..52>
#line 1837 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1837 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1837 "nmp/uisa_fp_instr.nmp"
 then
#line 1837 "nmp/uisa_fp_instr.nmp"
#line 1838 "nmp/uisa_fp_instr.nmp"
			TMP_BYTE = 0b0001;
		else
			if FPR [ fra ] < FPR [ frb ] then
            	TMP_BYTE = 0b1000;
            else
                if FPR [ fra ] > FPR [ frb ] then
                    TMP_BYTE = 0b0100;
                else
                	TMP_BYTE = 0b0010;
                endif;
        	endif;
		endif;
		FPSCR<15..12> = TMP_BYTE<3..0>;
        CR[(7-crfd)] < LT..SO > = TMP_BYTE <3..0>;

		if 	( 	( 	FPR[fra]<62..52>
#line 1853 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[fra]<51..0>
#line 1853 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1853 "nmp/uisa_fp_instr.nmp"
 && FPR[fra] <51..51> == 0 )
#line 1853 "nmp/uisa_fp_instr.nmp"
 || 	( 	( 	FPR[frb]<62..52>
#line 1853 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 1853 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1853 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 1853 "nmp/uisa_fp_instr.nmp"
 then
#line 1853 "nmp/uisa_fp_instr.nmp"
#line 1854 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1854 "nmp/uisa_fp_instr.nmp"
;
#line 1854 "nmp/uisa_fp_instr.nmp"
#line 1855 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FX..FP_FX> = 1
#line 1855 "nmp/uisa_fp_instr.nmp"
;
#line 1855 "nmp/uisa_fp_instr.nmp"
#line 1856 "nmp/uisa_fp_instr.nmp"
		endif;
		}

// 2.2.3 Floating point move Instructions
// --------------------------------------

op  ufp_move( x : ufp_move_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPMOV

op ufp_move_action =   ufp_mov_reg
                     | ufp_neg
                     | ufp_abs_val
                     | ufp_neg_abs_val

op ufp_mov_reg =   ufp_mr
                 | ufp_mr_cr_update

op ufp_mr ( frd : index, frb : index )
   syntax = format ( "fmr fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00010010000", frd, frb )
   action = {

               FPR [ frd ] = FPR [ frb ];

            }

op ufp_mr_cr_update ( frd : index, frb : index )
   syntax = format ( "fmr. fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00010010001", frd, frb )
   action = {

               FPR [ frd ] = FPR [ frb ];

		    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1892 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1892 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1892 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1892 "nmp/uisa_fp_instr.nmp"
;
#line 1892 "nmp/uisa_fp_instr.nmp"
#line 1893 "nmp/uisa_fp_instr.nmp"

            }

op ufp_neg =   ufp_neg_normal
             | ufp_neg_cr_update

op ufp_neg_normal ( frd : index, frb : index )
   syntax = format ( "fneg fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00001010000", frd, frb )
   action = {

               FPR [ frd ] < 63..63 > = ~FPR [ frb ] < 63..63 >;
               FPR [ frd ] < 62..0 > = FPR [ frb ] < 62..0 >;

            }

op ufp_neg_cr_update ( frd : index, frb : index )
   syntax = format ( "fneg. fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00001010001", frd, frb )
   action = {

               FPR [ frd ] < 63..63 > = ~FPR [ frb ] < 63..63 >;
               FPR [ frd ] < 62..0 > = FPR [ frb ] < 62..0 >;

		    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1917 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1917 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1917 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1917 "nmp/uisa_fp_instr.nmp"
;
#line 1917 "nmp/uisa_fp_instr.nmp"
#line 1918 "nmp/uisa_fp_instr.nmp"

            }

op ufp_abs_val =   ufp_abs
                 | ufp_abs_cr_update

op ufp_abs ( frd : index, frb : index )
   syntax = format ( "fabs fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b01000010000", frd, frb )
   action = {

               FPR [ frd ] < 63..63 > = 0;
               FPR [ frd ] < 62..0 > = FPR [ frb ] < 62..0 >;

            }

op ufp_abs_cr_update ( frd : index, frb : index )
   syntax = format ( "fabs. fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b01000010001", frd, frb )
   action = {

               FPR [ frd ] < 63..63 > = 0;
               FPR [ frd ] < 62..0 > = FPR [ frb ] < 62..0 >;

		    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1942 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1942 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1942 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1942 "nmp/uisa_fp_instr.nmp"
;
#line 1942 "nmp/uisa_fp_instr.nmp"
#line 1943 "nmp/uisa_fp_instr.nmp"

            }

op ufp_neg_abs_val =   ufp_nabs
                     | ufp_nabs_cr_update

op ufp_nabs ( frd : index, frb : index )
   syntax = format ( "fnabs fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00100010000", frd, frb )
   action = {

               FPR [ frd ] < 63..63 > = 1;
               FPR [ frd ] < 62..0 > = FPR [ frb ] < 62..0 >;

            }

op ufp_nabs_cr_update ( frd : index, frb : index )
   syntax = format ( "fnabs. fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00100010001", frd, frb )
   action = {

               FPR [ frd ] < 63..63 > = 1;
               FPR [ frd ] < 62..0 > = FPR [ frb ] < 62..0 >;

		    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 1967 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 1967 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 1967 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 1967 "nmp/uisa_fp_instr.nmp"
;
#line 1967 "nmp/uisa_fp_instr.nmp"
#line 1968 "nmp/uisa_fp_instr.nmp"

            }

// 2.2.4 Floating point round instructions
// ---------------------------------------
op  ufp_round ( x : ufp_round_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPRC

op ufp_round_action =   ufp_rsp
                      | ufp_rsp_cr_update

// Floating point round to single precision.

op ufp_rsp ( frd : index, frb : index )
   syntax = format ( "frsp fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00000011000", frd, frb )
   action = {
			if 	FPSCR < 1..0 >
#line 1988 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 1988 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 1988 "nmp/uisa_fp_instr.nmp"
	else
#line 1988 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 1988 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 1988 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 1988 "nmp/uisa_fp_instr.nmp"
		else
#line 1988 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 1988 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 1988 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 1988 "nmp/uisa_fp_instr.nmp"
			else
#line 1988 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 1988 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1988 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1988 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1988 "nmp/uisa_fp_instr.nmp"
;
#line 1988 "nmp/uisa_fp_instr.nmp"
#line 1989 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 1989 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1989 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 1989 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1989 "nmp/uisa_fp_instr.nmp"
;
#line 1989 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1989 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 1989 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1989 "nmp/uisa_fp_instr.nmp"
;
#line 1989 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 1989 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1989 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 1989 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1989 "nmp/uisa_fp_instr.nmp"
;
#line 1989 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 1989 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 1989 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 1989 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 1989 "nmp/uisa_fp_instr.nmp"
;
#line 1989 "nmp/uisa_fp_instr.nmp"
;
#line 1989 "nmp/uisa_fp_instr.nmp"
#line 1990 "nmp/uisa_fp_instr.nmp"
        TMP_FLOTS = FPR [ frb ]; // use the host machine conversion.
				if "fpi_testexcept"("FPI_INEXACT") then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1991 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1991 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 1991 "nmp/uisa_fp_instr.nmp"
 then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
	else
#line 1991 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1991 "nmp/uisa_fp_instr.nmp"
		 then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		else
#line 1991 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1991 "nmp/uisa_fp_instr.nmp"
 then
#line 1991 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
			else
#line 1991 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1991 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1991 "nmp/uisa_fp_instr.nmp"
	 then
#line 1991 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
				else
#line 1991 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1991 "nmp/uisa_fp_instr.nmp"
 then
#line 1991 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
					else
#line 1991 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 1991 "nmp/uisa_fp_instr.nmp"
 then
#line 1991 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
						else
#line 1991 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 1991 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 1991 "nmp/uisa_fp_instr.nmp"
		 then
#line 1991 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
							else
#line 1991 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 1991 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 1991 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 1991 "nmp/uisa_fp_instr.nmp"
 then
#line 1991 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
								else
#line 1991 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
								endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
							endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
						endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
					endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
				endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
			endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1991 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 1991 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 1991 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 1991 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		else
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 1991 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 1991 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
		endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
	endif;
#line 1991 "nmp/uisa_fp_instr.nmp"
;
#line 1991 "nmp/uisa_fp_instr.nmp"
#line 1992 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
				FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 1993 "nmp/uisa_fp_instr.nmp"
;
#line 1993 "nmp/uisa_fp_instr.nmp"
#line 1994 "nmp/uisa_fp_instr.nmp"
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
		}

op ufp_rsp_cr_update ( frd : index, frb : index )
   syntax = format ( "frsp. fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00000011001", frd, frb )
   action = {
			if 	FPSCR < 1..0 >
#line 2004 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 2004 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 2004 "nmp/uisa_fp_instr.nmp"
	else
#line 2004 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 2004 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 2004 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 2004 "nmp/uisa_fp_instr.nmp"
		else
#line 2004 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 2004 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 2004 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 2004 "nmp/uisa_fp_instr.nmp"
			else
#line 2004 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 2004 "nmp/uisa_fp_instr.nmp"
			endif;
#line 2004 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2004 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2004 "nmp/uisa_fp_instr.nmp"
;
#line 2004 "nmp/uisa_fp_instr.nmp"
#line 2005 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 2005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2005 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 2005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2005 "nmp/uisa_fp_instr.nmp"
;
#line 2005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2005 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 2005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2005 "nmp/uisa_fp_instr.nmp"
;
#line 2005 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 2005 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2005 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 2005 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2005 "nmp/uisa_fp_instr.nmp"
;
#line 2005 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 2005 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 2005 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 2005 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 2005 "nmp/uisa_fp_instr.nmp"
;
#line 2005 "nmp/uisa_fp_instr.nmp"
;
#line 2005 "nmp/uisa_fp_instr.nmp"
#line 2006 "nmp/uisa_fp_instr.nmp"
        TMP_FLOTS = FPR [ frb ]; // use the host machine conversion.
				if "fpi_testexcept"("FPI_INEXACT") then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FR..FP_FR> = 0
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FI..FP_FI> = 0
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		if !FPSCR<FP_VE..FP_VE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPR[frd]=0xffffffffffffffff ;
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
				if 	( 	( 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 2007 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 2007 "nmp/uisa_fp_instr.nmp"
 && FPR[frd] <51..51> == 1 )
#line 2007 "nmp/uisa_fp_instr.nmp"
 then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPSCR <16..12> = 0b10001;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
	else
#line 2007 "nmp/uisa_fp_instr.nmp"
		if 	( 	FPR[frd]<63..63>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frd]<51..0>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 2007 "nmp/uisa_fp_instr.nmp"
		 then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <16..12> = 0b01001;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		else
#line 2007 "nmp/uisa_fp_instr.nmp"
			if 	( 	FPR[frd]<63..63>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 2007 "nmp/uisa_fp_instr.nmp"
 then
#line 2007 "nmp/uisa_fp_instr.nmp"
					FPSCR <16..12> = 0b01000;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
			else
#line 2007 "nmp/uisa_fp_instr.nmp"
				if 	( 	FPR[frd]<63..63>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 2007 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 2007 "nmp/uisa_fp_instr.nmp"
	 then
#line 2007 "nmp/uisa_fp_instr.nmp"
						FPSCR <16..12> = 0b11000;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
				else
#line 2007 "nmp/uisa_fp_instr.nmp"
					if 	( 	FPR[frd]<63..63>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 1 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 2007 "nmp/uisa_fp_instr.nmp"
 then
#line 2007 "nmp/uisa_fp_instr.nmp"
							FPSCR <16..12> = 0b10010;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
					else
#line 2007 "nmp/uisa_fp_instr.nmp"
						if 	( 	FPR[frd]<63..63>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 )
#line 2007 "nmp/uisa_fp_instr.nmp"
 then
#line 2007 "nmp/uisa_fp_instr.nmp"
								FPSCR <16..12> = 0b00010;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
						else
#line 2007 "nmp/uisa_fp_instr.nmp"
							if 	( 	FPR[frd]<63..63>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<51..0>
#line 2007 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 2007 "nmp/uisa_fp_instr.nmp"
		 then
#line 2007 "nmp/uisa_fp_instr.nmp"
									FPSCR <16..12> = 0b10100;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
							else
#line 2007 "nmp/uisa_fp_instr.nmp"
								if 	( 	FPR[frd]<63..63>
#line 2007 "nmp/uisa_fp_instr.nmp"
 == 0 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 > 0 && 	FPR[frd]<62..52>
#line 2007 "nmp/uisa_fp_instr.nmp"
 < 2047 )
#line 2007 "nmp/uisa_fp_instr.nmp"
 then
#line 2007 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b00100;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
								else
#line 2007 "nmp/uisa_fp_instr.nmp"
										FPSCR <16..12> = 0b01101;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
								endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
							endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
						endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
					endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
				endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
			endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 2007 "nmp/uisa_fp_instr.nmp"
			if FPSCR<FP_ZX..FP_ZX> then
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then
#line 2007 "nmp/uisa_fp_instr.nmp"
			FPR[frd] = TMP_FLOTS;
#line 2007 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_FLOTS; \
#line 2007 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		else
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 2007 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2007 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2007 "nmp/uisa_fp_instr.nmp"
;
#line 2007 "nmp/uisa_fp_instr.nmp"
#line 2008 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
				FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 2009 "nmp/uisa_fp_instr.nmp"
;
#line 2009 "nmp/uisa_fp_instr.nmp"
#line 2010 "nmp/uisa_fp_instr.nmp"
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 2014 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 2014 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 2014 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 2014 "nmp/uisa_fp_instr.nmp"
;
#line 2014 "nmp/uisa_fp_instr.nmp"
#line 2015 "nmp/uisa_fp_instr.nmp"
		endif;
			}

// Floating point Rounding and Conversion Instructions

op  ufp_convert ( x : ufp_convert_action )
   syntax = x.syntax
   image  = x.image
   action = { x.action; }
   category = FPRC

op ufp_convert_action =   ufp_ctiw | ufp_ctiw_cr_update | ufp_ctiwz | ufp_ctiwz_cr_update

op ufp_ctiw ( frd : index, frb : index )
   syntax = format ( "fctiw fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00000011100", frd, frb)
   action = {
			if 	FPSCR < 1..0 >
#line 2032 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 2032 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 2032 "nmp/uisa_fp_instr.nmp"
	else
#line 2032 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 2032 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 2032 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 2032 "nmp/uisa_fp_instr.nmp"
		else
#line 2032 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 2032 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 2032 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 2032 "nmp/uisa_fp_instr.nmp"
			else
#line 2032 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 2032 "nmp/uisa_fp_instr.nmp"
			endif;
#line 2032 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2032 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2032 "nmp/uisa_fp_instr.nmp"
;
#line 2032 "nmp/uisa_fp_instr.nmp"
#line 2033 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 2033 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2033 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 2033 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2033 "nmp/uisa_fp_instr.nmp"
;
#line 2033 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2033 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 2033 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2033 "nmp/uisa_fp_instr.nmp"
;
#line 2033 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 2033 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2033 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 2033 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2033 "nmp/uisa_fp_instr.nmp"
;
#line 2033 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 2033 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 2033 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 2033 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 2033 "nmp/uisa_fp_instr.nmp"
;
#line 2033 "nmp/uisa_fp_instr.nmp"
;
#line 2033 "nmp/uisa_fp_instr.nmp"
#line 2034 "nmp/uisa_fp_instr.nmp"
		TMP_SWORD = FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
	//FP_CHECK_VX_EXCEPTION64(frd); \
#line 2035 "nmp/uisa_fp_instr.nmp"
	//if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
#line 2035 "nmp/uisa_fp_instr.nmp"
	//	FP_CHECK_ZX_EXCEPTION32(frd,TMP_SWORD); \
#line 2035 "nmp/uisa_fp_instr.nmp"
	//	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPR[frd]<31..0> = TMP_SWORD;
#line 2035 "nmp/uisa_fp_instr.nmp"
			FPR[frd]<63..32> = 0;
#line 2035 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_SWORD; \
#line 2035 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 2035 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		else
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 2035 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 2035 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2035 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
	//	endif; \
#line 2035 "nmp/uisa_fp_instr.nmp"
	//endif; \
#line 2035 "nmp/uisa_fp_instr.nmp"
;
#line 2035 "nmp/uisa_fp_instr.nmp"
#line 2036 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[frb]<62..52>
#line 2037 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 2037 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 2037 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 2037 "nmp/uisa_fp_instr.nmp"
 then
#line 2037 "nmp/uisa_fp_instr.nmp"
#line 2038 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 2038 "nmp/uisa_fp_instr.nmp"
;
#line 2038 "nmp/uisa_fp_instr.nmp"
#line 2039 "nmp/uisa_fp_instr.nmp"
			endif;
				FPSCR <FP_VXCVI..FP_VXCVI> = 1
#line 2040 "nmp/uisa_fp_instr.nmp"
;
#line 2040 "nmp/uisa_fp_instr.nmp"
#line 2041 "nmp/uisa_fp_instr.nmp"
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
   }

op ufp_ctiw_cr_update ( frd : index, frb : index )
   syntax = format ( "fctiw. fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00000011101", frd, frb)
   action = {
			if 	FPSCR < 1..0 >
#line 2051 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TONEAREST then
#line 2051 "nmp/uisa_fp_instr.nmp"
		"fpi_setround"("FPI_TONEAREST");
#line 2051 "nmp/uisa_fp_instr.nmp"
	else
#line 2051 "nmp/uisa_fp_instr.nmp"
		if 	FPSCR < 1..0 >
#line 2051 "nmp/uisa_fp_instr.nmp"
 == FP_RN_TOWARDZERO then
#line 2051 "nmp/uisa_fp_instr.nmp"
			"fpi_setround"("FPI_TOWARDZERO");
#line 2051 "nmp/uisa_fp_instr.nmp"
		else
#line 2051 "nmp/uisa_fp_instr.nmp"
			if 	FPSCR < 1..0 >
#line 2051 "nmp/uisa_fp_instr.nmp"
 == FP_RN_UPWARD then
#line 2051 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_UPWARD");
#line 2051 "nmp/uisa_fp_instr.nmp"
			else
#line 2051 "nmp/uisa_fp_instr.nmp"
				"fpi_setround"("FPI_DOWNWARD");
#line 2051 "nmp/uisa_fp_instr.nmp"
			endif;
#line 2051 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2051 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2051 "nmp/uisa_fp_instr.nmp"
;
#line 2051 "nmp/uisa_fp_instr.nmp"
#line 2052 "nmp/uisa_fp_instr.nmp"
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 2052 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2052 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 2052 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2052 "nmp/uisa_fp_instr.nmp"
;
#line 2052 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2052 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 2052 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2052 "nmp/uisa_fp_instr.nmp"
;
#line 2052 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 2052 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2052 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 2052 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2052 "nmp/uisa_fp_instr.nmp"
;
#line 2052 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 2052 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 2052 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 2052 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 2052 "nmp/uisa_fp_instr.nmp"
;
#line 2052 "nmp/uisa_fp_instr.nmp"
;
#line 2052 "nmp/uisa_fp_instr.nmp"
#line 2053 "nmp/uisa_fp_instr.nmp"
		TMP_SWORD = FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
	//FP_CHECK_VX_EXCEPTION64(frd); \
#line 2054 "nmp/uisa_fp_instr.nmp"
	//if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
#line 2054 "nmp/uisa_fp_instr.nmp"
	//	FP_CHECK_ZX_EXCEPTION32(frd,TMP_SWORD); \
#line 2054 "nmp/uisa_fp_instr.nmp"
	//	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPR[frd]<31..0> = TMP_SWORD;
#line 2054 "nmp/uisa_fp_instr.nmp"
			FPR[frd]<63..32> = 0;
#line 2054 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_SWORD; \
#line 2054 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 2054 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		else
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 2054 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 2054 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2054 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
	//	endif; \
#line 2054 "nmp/uisa_fp_instr.nmp"
	//endif; \
#line 2054 "nmp/uisa_fp_instr.nmp"
;
#line 2054 "nmp/uisa_fp_instr.nmp"
#line 2055 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[frb]<62..52>
#line 2056 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 2056 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 2056 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 2056 "nmp/uisa_fp_instr.nmp"
 then
#line 2056 "nmp/uisa_fp_instr.nmp"
#line 2057 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 2057 "nmp/uisa_fp_instr.nmp"
;
#line 2057 "nmp/uisa_fp_instr.nmp"
#line 2058 "nmp/uisa_fp_instr.nmp"
			endif;
				FPSCR <FP_VXCVI..FP_VXCVI> = 1
#line 2059 "nmp/uisa_fp_instr.nmp"
;
#line 2059 "nmp/uisa_fp_instr.nmp"
#line 2060 "nmp/uisa_fp_instr.nmp"
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 2064 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 2064 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 2064 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 2064 "nmp/uisa_fp_instr.nmp"
;
#line 2064 "nmp/uisa_fp_instr.nmp"
#line 2065 "nmp/uisa_fp_instr.nmp"
		endif;
   }

op ufp_ctiwz ( frd : index, frb : index )
   syntax = format ( "fctiwz fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00000011110", frd, frb)
   action = {
   		"fpi_setround"("FPI_TOWARDZERO");
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 2073 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2073 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 2073 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2073 "nmp/uisa_fp_instr.nmp"
;
#line 2073 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2073 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 2073 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2073 "nmp/uisa_fp_instr.nmp"
;
#line 2073 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 2073 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2073 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 2073 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2073 "nmp/uisa_fp_instr.nmp"
;
#line 2073 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 2073 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 2073 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 2073 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 2073 "nmp/uisa_fp_instr.nmp"
;
#line 2073 "nmp/uisa_fp_instr.nmp"
;
#line 2073 "nmp/uisa_fp_instr.nmp"
#line 2074 "nmp/uisa_fp_instr.nmp"
		TMP_SWORD = FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
	//FP_CHECK_VX_EXCEPTION64(frd); \
#line 2075 "nmp/uisa_fp_instr.nmp"
	//if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
#line 2075 "nmp/uisa_fp_instr.nmp"
	//	FP_CHECK_ZX_EXCEPTION32(frd,TMP_SWORD); \
#line 2075 "nmp/uisa_fp_instr.nmp"
	//	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPR[frd]<31..0> = TMP_SWORD;
#line 2075 "nmp/uisa_fp_instr.nmp"
			FPR[frd]<63..32> = 0;
#line 2075 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_SWORD; \
#line 2075 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 2075 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		else
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 2075 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 2075 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2075 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
	//	endif; \
#line 2075 "nmp/uisa_fp_instr.nmp"
	//endif; \
#line 2075 "nmp/uisa_fp_instr.nmp"
;
#line 2075 "nmp/uisa_fp_instr.nmp"
#line 2076 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[frb]<62..52>
#line 2077 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 2077 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 2077 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 2077 "nmp/uisa_fp_instr.nmp"
 then
#line 2077 "nmp/uisa_fp_instr.nmp"
#line 2078 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 2078 "nmp/uisa_fp_instr.nmp"
;
#line 2078 "nmp/uisa_fp_instr.nmp"
#line 2079 "nmp/uisa_fp_instr.nmp"
			endif;
				FPSCR <FP_VXCVI..FP_VXCVI> = 1
#line 2080 "nmp/uisa_fp_instr.nmp"
;
#line 2080 "nmp/uisa_fp_instr.nmp"
#line 2081 "nmp/uisa_fp_instr.nmp"
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		endif;
   }

op ufp_ctiwz_cr_update ( frd : index, frb : index )
   syntax = format ( "fctiwz. fr%d,fr%d", frd, frb )
   image  = format ( "111111%5b00000%5b00000011111", frd, frb)
   action = {
   		"fpi_setround"("FPI_TOWARDZERO");
		//	FP_SET_EXCEPTION(FP_VE, "FPI_INVALID"); \
#line 2092 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2092 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_OVERFLOW");
#line 2092 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2092 "nmp/uisa_fp_instr.nmp"
;
#line 2092 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2092 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_UNDERFLOW");
#line 2092 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2092 "nmp/uisa_fp_instr.nmp"
;
#line 2092 "nmp/uisa_fp_instr.nmp"
//	FP_SET_EXCEPTION(FP_ZE, "FPI_DIVBYZERO"); \
#line 2092 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2092 "nmp/uisa_fp_instr.nmp"
		"fpi_clearexcept"("FPI_INEXACT");
#line 2092 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2092 "nmp/uisa_fp_instr.nmp"
;
#line 2092 "nmp/uisa_fp_instr.nmp"
	// THESE TWO MUST BE ALWAYS SET
#line 2092 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_INVALID");
#line 2092 "nmp/uisa_fp_instr.nmp"
	"fpi_clearexcept"("FPI_DIVBYZERO");
#line 2092 "nmp/uisa_fp_instr.nmp"
		FPSCR <FP_FEX..FP_FEX> = 0
#line 2092 "nmp/uisa_fp_instr.nmp"
;
#line 2092 "nmp/uisa_fp_instr.nmp"
;
#line 2092 "nmp/uisa_fp_instr.nmp"
#line 2093 "nmp/uisa_fp_instr.nmp"
		TMP_SWORD = FPR[frb];
				if "fpi_testexcept"("FPI_INEXACT") then
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_XX..FP_XX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_DIVBYZERO") then
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_ZX..FP_ZX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_ZE..FP_ZE> then
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_UNDERFLOW") then
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_UX..FP_UX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_OVERFLOW") then
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_OX..FP_OX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	if "fpi_testexcept"("FPI_INVALID") then
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_VX..FP_VX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPSCR <FP_FX..FP_FX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VE..FP_VE> then
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
	//FP_CHECK_VX_EXCEPTION64(frd); \
#line 2094 "nmp/uisa_fp_instr.nmp"
	//if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
#line 2094 "nmp/uisa_fp_instr.nmp"
	//	FP_CHECK_ZX_EXCEPTION32(frd,TMP_SWORD); \
#line 2094 "nmp/uisa_fp_instr.nmp"
	//	if !(FPSCR<FP_FEX..FP_FEX> && MSR<MSR_FE0..MSR_FE0>==0 && MSR<MSR_FE1..MSR_FE1>==0) then \
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPR[frd]<31..0> = TMP_SWORD;
#line 2094 "nmp/uisa_fp_instr.nmp"
			FPR[frd]<63..32> = 0;
#line 2094 "nmp/uisa_fp_instr.nmp"
			//FPR[frd] = TMP_SWORD; \
#line 2094 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_OX..FP_OX> then
#line 2094 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_OE..FP_OE> then
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		else
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_XX..FP_XX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FI..FP_FI> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_XX..FP_XX> then
#line 2094 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_XE..FP_XE> then
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
				if FPSCR<FP_UX..FP_UX> then
#line 2094 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_UE..FP_UE> then
#line 2094 "nmp/uisa_fp_instr.nmp"
				FPSCR <FP_FEX..FP_FEX> = 1
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
		endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
	endif;
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
	//	endif; \
#line 2094 "nmp/uisa_fp_instr.nmp"
	//endif; \
#line 2094 "nmp/uisa_fp_instr.nmp"
;
#line 2094 "nmp/uisa_fp_instr.nmp"
#line 2095 "nmp/uisa_fp_instr.nmp"
		if FPSCR<FP_VX..FP_VX> then
			if 	( 	( 	FPR[frb]<62..52>
#line 2096 "nmp/uisa_fp_instr.nmp"
 == 2047 && 	FPR[frb]<51..0>
#line 2096 "nmp/uisa_fp_instr.nmp"
 != 0 )
#line 2096 "nmp/uisa_fp_instr.nmp"
 && FPR[frb] <51..51> == 0 )
#line 2096 "nmp/uisa_fp_instr.nmp"
 then
#line 2096 "nmp/uisa_fp_instr.nmp"
#line 2097 "nmp/uisa_fp_instr.nmp"
					FPSCR <FP_VXSNAN..FP_VXSNAN> = 1
#line 2097 "nmp/uisa_fp_instr.nmp"
;
#line 2097 "nmp/uisa_fp_instr.nmp"
#line 2098 "nmp/uisa_fp_instr.nmp"
			endif;
				FPSCR <FP_VXCVI..FP_VXCVI> = 1
#line 2099 "nmp/uisa_fp_instr.nmp"
;
#line 2099 "nmp/uisa_fp_instr.nmp"
#line 2100 "nmp/uisa_fp_instr.nmp"
		endif;
		if FPSCR<FP_FEX..FP_FEX> then
			"launch_exception"("instr",PROGRAM);
		else
			    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 2104 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 2104 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 2104 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 2104 "nmp/uisa_fp_instr.nmp"
;
#line 2104 "nmp/uisa_fp_instr.nmp"
#line 2105 "nmp/uisa_fp_instr.nmp"
		endif;
   }

// 2.2.5 Floating-Point Status and Control Register Instructions
// -------------------------------------------------------------
// MCRFS, MFFSx, MTFSB0x, MTFSB1x, MTFSFx, MTFSFIx

op ufp_status_cr_instr ( x : ufp_status_cr_instr_action )
	syntax = x.syntax
	image = x.image
	action = { x.action; }
        category = FPSCRI

op ufp_status_cr_instr_action =   ufp_mov_cr_fs
                                | ufp_movf_fs
				| ufp_movf_fsx
				| ufp_movt_fsb0
				| ufp_movt_fsb0x
				| ufp_movt_fsb1
				| ufp_movt_fsb1x
				| ufp_movt_fsf
				| ufp_movt_fsfx
				| ufp_movt_fsfi
				| ufp_movt_fsfix

op ufp_mov_cr_fs ( crfd: card ( 3 ), crfs: card ( 3 ) )
	syntax = format ( "mcrfs crf%d,crf%d", crfd, crfs )
	image  = format ( "111111%3b00%3b000000000010000000", crfd, crfs )
	action = {
		CR[7-crfd]=FPSCR<31-(4*crfs)..28-(4*crfs)>;
		if crfs == 0 then
			FPSCR<31..31>=0;
			FPSCR<28..28>=0;
		endif;
		if crfs == 1 then
			FPSCR<27..24>=0;
		endif;
		if crfs == 2 then
			FPSCR<23..20>=0;
		endif;
		if crfs == 3 then
			FPSCR<19..19>=0;
		endif;
		if crfs == 5 then
			FPSCR<10..8>=0;
		endif;
		}

op ufp_movf_fs ( frd: index )
	syntax = format ( "mffs fr%d", frd )
	image  = format ( "111111%5b000000000010010001110", frd )
	action = {
		FPR[frd]<31..0>=FPSCR;
		}

op ufp_movf_fsx ( frd: index )
	syntax = format ( "mffs. fr%d", frd )
	image  = format ( "111111%5b000000000010010001111", frd )
	action = {
		FPR[frd]<31..0>=FPSCR;
		    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 2165 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 2165 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 2165 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 2165 "nmp/uisa_fp_instr.nmp"
;
#line 2165 "nmp/uisa_fp_instr.nmp"
#line 2166 "nmp/uisa_fp_instr.nmp"
		}

op ufp_movt_fsb0 ( crbd: index )
	syntax = format ( "mtfsb0 crb%d", crbd )
	image  = format ( "111111%5b000000000000010001100", crbd )
	action = {
		if ( crbd != FEX & crbd != VX ) then
			FPSCR<31-crbd..31-crbd> = 0;
		endif;
		}

op ufp_movt_fsb0x ( crbd: index )
	syntax = format ( "mtfsb0. crb%d", crbd )
	image  = format ( "111111%5b000000000000010001101", crbd )
	action = {
		if ( crbd != FEX & crbd != VX ) then
			FPSCR<31-crbd..31-crbd> = 0;
		endif;
		    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 2184 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 2184 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 2184 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 2184 "nmp/uisa_fp_instr.nmp"
;
#line 2184 "nmp/uisa_fp_instr.nmp"
#line 2185 "nmp/uisa_fp_instr.nmp"
		}

op ufp_movt_fsb1 ( crbd: index )
	syntax = format ( "mtfsb1 crb%d", crbd )
	image  = format ( "111111%5b000000000000001001100", crbd )
	action = {
		if ( crbd != FEX & crbd != VX ) then
			FPSCR<31-crbd..31-crbd> = 1;
		endif;
		}

op ufp_movt_fsb1x ( crbd: index )
	syntax = format ( "mtfsb1. crb%d", crbd )
	image  = format ( "111111%5b000000000000001001101", crbd )
	action = {
		if ( crbd != FEX & crbd != VX ) then
			FPSCR<31-crbd..31-crbd> = 1;
		endif;
		    CR[6]<FX..FX> = FPSCR<FX..FX>;
#line 2203 "nmp/uisa_fp_instr.nmp"
    CR[6]<FEX..FEX> = FPSCR<FEX..FEX>;
#line 2203 "nmp/uisa_fp_instr.nmp"
    CR[6]<VX..VX> = FPSCR<VX..VX>;
#line 2203 "nmp/uisa_fp_instr.nmp"
    CR[6]<OX..OX> = FPSCR<OX..OX>;
#line 2203 "nmp/uisa_fp_instr.nmp"
;
#line 2203 "nmp/uisa_fp_instr.nmp"
#line 2204 "nmp/uisa_fp_instr.nmp"
		}

op ufp_movt_fsf ( fm: card ( 8 ), frb: FREG_IND )
	syntax = format ( "mtfsf %d,%s", fm, frb.syntax )
	image  = format ( "1111110%8b0%s10110001110", fm, frb.image )
	action = {
		}

op ufp_movt_fsfx ( fm: card ( 8 ), frb: FREG_IND )
	syntax = format ( "mtfsf. %d,%s", fm, frb.syntax )
	image  = format ( "1111110%8b0%s10110001111", fm, frb.image )
	action = {
		}

op ufp_movt_fsfi ( crf: card ( 3 ), imm :   card(4) )
	syntax = format ( "mtfsfi crf%d,%d", crf, imm)
	image  = format ( "111111%3b0000000%4b000100001100", crf, imm )
	action = {
		TMP_WORD = 31-(crf*4);
		TMP_WORD1 = imm;
		if (TMP_WORD == 31 ) then
			FPSCR<31..31> = TMP_WORD1 <3..3>;
			FPSCR<28..28> = TMP_WORD1 <0..0>;
		else
			FPSCR<TMP_WORD..TMP_WORD-3> = TMP_WORD1<3..0>;
		endif;
		}

op ufp_movt_fsfix ( crf: card ( 3 ), imm :   card(4) )
	syntax = format ( "mtfsfi. crf%d,%d", crf, imm)
	image  = format ( "111111%3b0000000%4b000100001101", crf, imm )
	action = {
		TMP_WORD = 31-(crf*4);
		TMP_WORD1 = imm;
		if (TMP_WORD == 31 ) then
			FPSCR<31..31> = TMP_WORD1 <3..3>;
			FPSCR<28..28> = TMP_WORD1 <0..0>;
		else
			FPSCR<TMP_WORD..TMP_WORD-3> = TMP_WORD1<3..0>;
		endif;
		}
// End of uisa_fp description
