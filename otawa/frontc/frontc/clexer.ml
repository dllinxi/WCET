# 19 "clexer.mll"
 
open Cparser
exception Eof
exception InternalError of string
let version = "Clexer V1.0f 10.8.99 Hugues Cassé"


(*
 * input handle
 *)
type handle = {
	h_interactive: bool;
	h_in_channel: in_channel;
	mutable h_line: string;
	mutable h_buffer: string;
	mutable h_pos: int;
	mutable h_lineno: int;
	h_out_channel: out_channel;
	mutable h_file_name: string;
	h_gcc: bool;
	h_linerec: bool;
	h_strict: bool;
	mutable h_pragma: (string * int * string) list
}
let current_handle = ref {
		h_interactive = false;
		h_in_channel = stdin;
		h_line = "";
		h_buffer = "";
		h_pos = 0;
		h_lineno = 0;
		h_out_channel = stdout;
		h_file_name = "";
		h_gcc = true;
		h_linerec = false;
		h_strict = false;
		h_pragma = []
	}

let interactive (h : handle) = h.h_interactive
let in_channel (h : handle) = h.h_in_channel
let line (h : handle) = h.h_line
let buffer (h : handle) = h.h_buffer
let pos (h : handle) = h.h_pos
let real_pos (i : int) (h : handle) = i - h.h_pos
let lineno (h : handle) = h.h_lineno
let out_channel (h : handle) = h.h_out_channel
let file_name (h : handle) = h.h_file_name
let linerec (h: handle) = h.h_linerec
let curfile _ = (!current_handle).h_file_name
let curline _ = (!current_handle).h_lineno
let has_gcc _ = (!current_handle).h_gcc
let is_strict _ = (!current_handle).h_strict
let pragma _ = (!current_handle).h_pragma

let add_pragma p = 
	(!current_handle).h_pragma <- (curfile (), curline (), p) :: (pragma ())

(*
 * Error handling
 *)
let underline_error (buffer : string) (start : int) (stop : int) =
	let len = String.length buffer in
	let start' = max 0 start in
	let stop' = max 1 stop in
	(
		(if start' > 0 then (String.sub buffer 0 start') else "")
		^ "\027[4m"
		^ (if (stop' - start') <> 0
			then (String.sub buffer start' (stop' - start' ) )
			else ""
		)
		^ "\027[0m"
		^ (if stop' < len then (String.sub buffer stop' (len - stop') ) else "")
	)

let display_error msg token_start token_end =
	output_string (out_channel !current_handle) (
		(if (interactive !current_handle)
			then ""
			else
				(file_name !current_handle) ^ "["
				^ (string_of_int (lineno !current_handle)) ^ "] "
		)
		^ msg ^ ": "
		^ (underline_error
				(line !current_handle)
				(real_pos token_start !current_handle)
				(real_pos token_end !current_handle)
		)
	);
	flush (out_channel !current_handle)

let display_semantic_error msg =
	display_error msg (pos !current_handle) (pos !current_handle)


let error msg =
	display_error msg (Parsing.symbol_start ()) (Parsing.symbol_end ());
	raise Parsing.Parse_error

let test_gcc _ = if not (!current_handle).h_gcc then  error "forbidden GCC syntax"


(*
** Keyword hashtable
*)
let id token _ = token

module HashString =
struct
	type t = string
	let equal (s1 : t) (s2 : t) = s1 = s2
	let hash (s : t) = Hashtbl.hash s
end
module StringHashtbl = Hashtbl.Make(HashString)
let lexicon = StringHashtbl.create 211
let keywords =
	[
		("__const", id CONST);
		("__restrict", id RESTRICT);
		("_Bool", id (NAMED_TYPE "_Bool"));
		("_Complex", id (NAMED_TYPE "_Complex"));
		("_Imaginery", id (NAMED_TYPE "_Imaginery"));
		("asm", id ASM);
		("auto", id AUTO);
		("break", fun _ -> BREAK (curfile(), curline()));
		("char", id CHAR);
		("case", fun _ -> CASE (curfile(), curline()));
		("const", id CONST);
		("continue", fun _ -> CONTINUE (curfile(), curline()));
		("default", fun _ -> DEFAULT (curfile(), curline()));
		("do", fun _ -> DO (curfile(), curline()));
		("double", id DOUBLE);
		("else", fun _ -> ELSE (curfile(), curline()));
		("enum", id ENUM);
		("extern", id EXTERN);
		("float", id FLOAT);
		("for", fun _ -> FOR (curfile(), curline()));
		("goto", fun _ -> GOTO (curfile(), curline()));
		("if", fun _ -> IF (curfile(), curline()));
		("inline", id INLINE);	(* C99 *)
		("int", id INT);
		("long", id LONG);
		("register", id REGISTER);
		("restrict", id RESTRICT);	(** Non-supported by GCC ??? *)
		("return", fun _ -> RETURN (curfile(), curline()));
		("short", id SHORT);
		("signed", id SIGNED);
		("static", id STATIC);
		("struct", id STRUCT);
		("switch", fun _ -> SWITCH (curfile(), curline()));
		("typedef", id TYPEDEF);
		("union", id UNION);
		("unsigned", id UNSIGNED);
		("void", id VOID);
		("volatile", id VOLATILE);		
		("while", fun _ -> WHILE (curfile(), curline()));
	]

(*** Specific GNU ***)
let gnu_keywords : (string * (unit -> Cparser.token)) list = [
		("__attribute__", id ATTRIBUTE);
		("__extension__", id EXTENSION);
		("__inline", id INLINE);	(* strange: really ? *)
		("__inline__", id INLINE);
		("__asm__", id ASM);
		("__asm", id ASM);
		("__volatile__", id VOLATILE)
	]

let init_lexicon _ =
	let add (key, token) = StringHashtbl.add lexicon key token in
	StringHashtbl.clear lexicon;
	List.iter add keywords;
	if has_gcc ()  then
		List.iter add gnu_keywords

let add_type name =
	StringHashtbl.add lexicon name (id (NAMED_TYPE name))

let context : string list list ref = ref []

let push_context _ = context := []::!context

let pop_context _ =
	match !context with
	[] -> raise (InternalError "Empty context stack")
	| con::sub ->
		(context := sub;
		List.iter (fun name -> StringHashtbl.remove lexicon name) con)

let add_identifier name =
	match !context with
	[] -> raise (InternalError "Empty context stack")
	| con::sub ->
		(context := (name::con)::sub;
		StringHashtbl.add lexicon name (id (IDENT name)))


(*
** Useful primitives
*)
let rem_quotes str = String.sub str 1 ((String.length str) - 2)
let scan_ident id =
	try (StringHashtbl.find lexicon id) ()
	with Not_found ->
		IDENT id
(*
** Buffer processor
*)

let set_line num =
	(!current_handle).h_lineno <- num - 1

let set_name name =
	(!current_handle).h_file_name <- name


(*** escape character management ***)
let scan_escape str =
	match str with
	"n" -> "\n"
	| "r" -> "\r"
	| "t" -> "\t"
	| "b" -> "\b"
	| _ -> str
let get_value chr =
	match chr with
	'0'..'9' -> (Char.code chr) - (Char.code '0')
	| 'a'..'z' -> (Char.code chr) - (Char.code 'a') + 10
	| 'A'..'Z' -> (Char.code chr) - (Char.code 'A') + 10
	| _ -> 0
let scan_hex_escape str =
	String.make 1 (Char.chr (
		(get_value (String.get str 0)) * 16
		+ (get_value (String.get str 1))
	))
let scan_oct_escape str =
	String.make 1 (Char.chr (
		(get_value (String.get str 0)) * 64
		+ (get_value (String.get str 1)) * 8
		+ (get_value (String.get str 2))
	))

# 248 "clexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\191\255\192\255\079\000\160\000\196\255\197\255\198\255\
    \199\255\200\255\201\255\202\255\203\255\204\255\205\255\206\255\
    \003\000\076\000\079\000\031\000\245\000\080\000\035\000\081\000\
    \157\000\160\000\109\000\238\000\003\001\041\001\248\255\249\255\
    \032\001\253\255\000\001\236\255\254\255\255\255\038\000\057\000\
    \035\001\075\000\070\000\066\000\108\000\252\255\096\000\106\000\
    \251\255\175\000\114\001\142\001\152\001\000\001\255\000\017\001\
    \181\001\037\001\036\001\171\001\002\001\173\001\172\001\175\001\
    \053\001\174\001\177\001\193\001\247\255\254\001\027\002\037\002\
    \008\002\066\002\076\002\110\002\148\002\144\000\038\001\024\001\
    \098\002\187\002\133\002\246\255\245\255\168\000\175\000\146\000\
    \218\002\254\002\027\003\037\003\176\001\043\001\039\001\042\001\
    \242\255\061\001\220\000\191\000\016\001\240\255\226\255\204\000\
    \217\000\210\000\003\000\241\255\220\255\239\255\218\255\219\255\
    \238\255\237\255\235\255\210\255\234\255\211\255\233\255\232\255\
    \225\255\012\001\231\255\224\255\013\001\230\255\227\255\071\003\
    \146\003\221\003\040\004\115\004\036\001\254\255\030\001\255\255\
    \071\001\254\255\255\255\229\004\252\255\214\004\254\255\255\255\
    \081\001\179\001\160\001\253\255\164\001\004\001\233\000\098\003\
    \252\255\096\001\254\255\255\255\253\255\097\001\138\001\254\255\
    \255\255\100\002\250\255\199\004\255\255\251\255\243\004\252\004\
    \004\005\028\005\254\255\059\005\253\255\171\001\250\255\067\005\
    \255\255\251\255\083\005\091\005\108\005\165\005\254\255\099\005\
    \253\255\255\001\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\062\000\062\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \032\000\034\000\033\000\048\000\046\000\047\000\042\000\040\000\
    \039\000\038\000\043\000\060\000\012\000\012\000\255\255\255\255\
    \005\000\255\255\041\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\008\000\012\000\012\000\012\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \012\000\012\000\012\000\012\000\255\255\008\000\255\255\008\000\
    \255\255\008\000\255\255\255\255\010\000\010\000\010\000\010\000\
    \255\255\009\000\255\255\255\255\255\255\010\000\010\000\010\000\
    \009\000\255\255\009\000\255\255\013\000\013\000\013\000\013\000\
    \255\255\013\000\013\000\013\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\026\000\255\255\255\255\027\000\255\255\255\255\062\000\
    \062\000\062\000\062\000\061\000\255\255\255\255\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\255\255\255\255\
    \002\000\002\000\002\000\255\255\002\000\002\000\002\000\255\255\
    \255\255\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\005\000\255\255\255\255\004\000\003\000\
    \004\000\255\255\255\255\255\255\255\255\255\255\255\255\005\000\
    \255\255\255\255\004\000\003\000\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\133\000\000\000\255\255\000\000\
    \137\000\000\000\000\000\140\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\152\000\
    \000\000\157\000\000\000\000\000\000\000\157\000\159\000\000\000\
    \000\000\162\000\000\000\165\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\174\000\000\000\177\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\186\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\033\000\000\000\000\000\033\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\026\000\030\000\032\000\107\000\022\000\020\000\031\000\
    \008\000\007\000\023\000\025\000\005\000\024\000\027\000\034\000\
    \029\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\014\000\006\000\018\000\016\000\017\000\015\000\
    \126\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\010\000\119\000\009\000\019\000\003\000\
    \114\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\004\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\012\000\021\000\011\000\013\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\123\000\124\000\121\000\120\000\116\000\113\000\046\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\102\000\041\000\042\000\043\000\003\000\044\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\111\000\108\000\115\000\045\000\047\000\048\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\112\000\110\000\086\000\109\000\103\000\092\000\
    \092\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\084\000\087\000\084\000\084\000\003\000\
    \002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\127\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\117\000\100\000\084\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \096\000\040\000\037\000\096\000\040\000\052\000\052\000\036\000\
    \052\000\052\000\118\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\035\000\101\000\052\000\
    \040\000\104\000\105\000\040\000\051\000\051\000\106\000\051\000\
    \051\000\122\000\125\000\065\000\066\000\135\000\134\000\054\000\
    \147\000\138\000\052\000\052\000\064\000\147\000\051\000\052\000\
    \053\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\028\000\028\000\052\000\051\000\051\000\064\000\051\000\
    \051\000\051\000\051\000\049\000\067\000\084\000\051\000\055\000\
    \061\000\062\000\085\000\097\000\064\000\054\000\051\000\098\000\
    \053\000\060\000\051\000\084\000\096\000\065\000\053\000\096\000\
    \000\000\050\000\156\000\156\000\085\000\000\000\064\000\000\000\
    \000\000\051\000\051\000\049\000\038\000\084\000\051\000\038\000\
    \039\000\063\000\096\000\039\000\160\000\055\000\097\000\099\000\
    \000\000\060\000\051\000\084\000\096\000\149\000\053\000\096\000\
    \075\000\050\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\096\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\074\000\000\000\074\000\000\000\150\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\176\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\052\000\052\000\052\000\052\000\052\000\068\000\052\000\
    \092\000\092\000\000\000\052\000\068\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\028\000\028\000\052\000\
    \051\000\051\000\051\000\051\000\051\000\147\000\051\000\000\000\
    \060\000\147\000\051\000\000\000\094\000\064\000\068\000\148\000\
    \060\000\058\000\060\000\064\000\068\000\093\000\051\000\175\000\
    \147\000\187\000\057\000\000\000\148\000\000\000\000\000\000\000\
    \051\000\051\000\051\000\051\000\051\000\147\000\051\000\061\000\
    \000\000\147\000\051\000\060\000\095\000\000\000\000\000\000\000\
    \060\000\059\000\060\000\064\000\255\255\093\000\051\000\000\000\
    \147\000\000\000\057\000\000\000\000\000\064\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\000\000\070\000\068\000\000\000\072\000\255\255\
    \072\000\000\000\068\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
    \255\255\255\255\000\000\070\000\068\000\000\000\000\000\000\000\
    \000\000\000\000\068\000\068\000\000\000\000\000\000\000\000\000\
    \000\000\068\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\164\000\000\000\
    \068\000\000\000\255\255\068\000\000\000\082\000\068\000\082\000\
    \000\000\068\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\000\000\000\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \068\000\000\000\000\000\255\255\000\000\000\000\068\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\000\000\
    \163\000\000\000\075\000\000\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\000\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\000\000\000\000\000\000\000\000\000\000\
    \078\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\
    \000\000\077\000\000\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\000\000\000\000\000\000\000\000\255\255\
    \079\000\083\000\000\000\000\000\080\000\000\000\000\000\083\000\
    \000\000\077\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\083\000\000\000\000\000\000\000\000\000\083\000\083\000\
    \000\000\091\000\089\000\091\000\000\000\000\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \000\000\000\000\000\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\000\000\000\000\000\000\000\000\000\000\083\000\000\000\
    \000\000\000\000\089\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\000\000\
    \000\000\083\000\000\000\000\000\255\255\000\000\000\000\083\000\
    \000\000\000\000\000\000\154\000\155\000\000\000\000\000\154\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\083\000\154\000\000\000\153\000\000\000\000\000\083\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\128\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\003\000\003\000\003\000\003\000\129\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\130\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\131\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\142\000\143\000\
    \000\000\000\000\142\000\000\000\000\000\000\000\000\000\167\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\142\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \000\000\000\000\000\000\000\000\000\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\168\000\
    \000\000\000\000\145\000\171\000\171\000\171\000\171\000\171\000\
    \171\000\171\000\171\000\144\000\171\000\171\000\171\000\171\000\
    \171\000\171\000\171\000\171\000\169\000\169\000\169\000\169\000\
    \169\000\169\000\169\000\169\000\169\000\169\000\000\000\168\000\
    \000\000\000\000\146\000\000\000\000\000\169\000\169\000\169\000\
    \169\000\169\000\169\000\144\000\170\000\170\000\170\000\170\000\
    \170\000\170\000\170\000\170\000\170\000\170\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\170\000\170\000\170\000\
    \170\000\170\000\170\000\000\000\000\000\169\000\169\000\169\000\
    \169\000\169\000\169\000\172\000\172\000\172\000\172\000\172\000\
    \172\000\172\000\172\000\179\000\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\000\000\000\000\170\000\170\000\170\000\
    \170\000\170\000\170\000\183\000\183\000\183\000\183\000\183\000\
    \183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
    \183\000\183\000\183\000\184\000\184\000\184\000\184\000\184\000\
    \184\000\184\000\184\000\180\000\181\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\181\000\181\000\181\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\180\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\000\000\000\000\182\000\182\000\182\000\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\182\000\182\000\
    \182\000\182\000\182\000\182\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\182\000\182\000\
    \182\000\182\000\182\000\182\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\106\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\017\000\017\000\018\000\018\000\021\000\023\000\038\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\026\000\039\000\041\000\042\000\003\000\043\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\024\000\025\000\021\000\044\000\046\000\047\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\024\000\024\000\077\000\025\000\026\000\049\000\
    \049\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\086\000\077\000\085\000\087\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\020\000\027\000\085\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \098\000\032\000\034\000\099\000\040\000\054\000\053\000\034\000\
    \060\000\028\000\020\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\034\000\100\000\055\000\
    \032\000\103\000\104\000\040\000\054\000\053\000\105\000\060\000\
    \028\000\121\000\124\000\054\000\053\000\134\000\132\000\028\000\
    \149\000\136\000\058\000\057\000\054\000\150\000\055\000\029\000\
    \028\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\064\000\054\000\053\000\055\000\060\000\
    \028\000\058\000\057\000\029\000\053\000\079\000\029\000\028\000\
    \058\000\057\000\078\000\094\000\054\000\029\000\055\000\093\000\
    \028\000\058\000\064\000\078\000\094\000\055\000\029\000\095\000\
    \255\255\029\000\153\000\157\000\079\000\255\255\055\000\255\255\
    \255\255\058\000\057\000\029\000\032\000\079\000\029\000\040\000\
    \032\000\057\000\097\000\040\000\158\000\029\000\095\000\093\000\
    \255\255\058\000\064\000\078\000\094\000\144\000\029\000\095\000\
    \050\000\029\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\097\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\051\000\255\255\051\000\255\255\144\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\173\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\059\000\062\000\061\000\065\000\063\000\052\000\066\000\
    \092\000\092\000\255\255\056\000\052\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\067\000\
    \059\000\062\000\061\000\065\000\063\000\146\000\066\000\255\255\
    \062\000\148\000\056\000\255\255\092\000\066\000\052\000\145\000\
    \059\000\056\000\061\000\065\000\052\000\092\000\067\000\173\000\
    \145\000\185\000\056\000\255\255\146\000\255\255\255\255\255\255\
    \059\000\062\000\061\000\065\000\063\000\146\000\066\000\059\000\
    \255\255\148\000\056\000\063\000\092\000\255\255\255\255\255\255\
    \059\000\056\000\061\000\065\000\132\000\092\000\067\000\255\255\
    \145\000\255\255\056\000\255\255\255\255\067\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\255\255\069\000\069\000\255\255\070\000\136\000\
    \070\000\255\255\069\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\255\255\
    \153\000\157\000\255\255\069\000\069\000\255\255\255\255\255\255\
    \255\255\255\255\069\000\071\000\255\255\255\255\255\255\255\255\
    \255\255\071\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\161\000\255\255\
    \073\000\255\255\158\000\071\000\255\255\080\000\073\000\080\000\
    \255\255\071\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\255\255\255\255\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \073\000\255\255\255\255\173\000\255\255\255\255\073\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\255\255\
    \161\000\255\255\076\000\255\255\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\255\255\075\000\
    \075\000\075\000\075\000\075\000\075\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\255\255\255\255\255\255\255\255\255\255\
    \076\000\255\255\255\255\255\255\076\000\255\255\255\255\255\255\
    \255\255\076\000\255\255\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\255\255\255\255\255\255\255\255\185\000\
    \076\000\081\000\255\255\255\255\076\000\255\255\255\255\081\000\
    \255\255\076\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\088\000\088\000\088\000\088\000\088\000\
    \088\000\081\000\255\255\255\255\255\255\255\255\088\000\081\000\
    \255\255\089\000\088\000\089\000\255\255\255\255\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \255\255\255\255\255\255\088\000\088\000\088\000\088\000\088\000\
    \088\000\255\255\255\255\255\255\255\255\255\255\088\000\255\255\
    \255\255\255\255\088\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\255\255\
    \255\255\090\000\255\255\255\255\161\000\255\255\255\255\090\000\
    \255\255\255\255\255\255\151\000\151\000\255\255\255\255\151\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\090\000\151\000\255\255\151\000\255\255\255\255\090\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\255\255\255\255\255\255\255\255\127\000\255\255\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\255\255\255\255\255\255\
    \255\255\128\000\255\255\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \255\255\255\255\255\255\255\255\129\000\255\255\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\151\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\255\255\255\255\255\255\255\255\130\000\
    \255\255\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\255\255\255\255\
    \255\255\255\255\131\000\255\255\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\139\000\139\000\
    \255\255\255\255\139\000\255\255\255\255\255\255\255\255\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\163\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\139\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \255\255\255\255\255\255\255\255\255\255\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\139\000\139\000\139\000\163\000\
    \255\255\255\255\141\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\141\000\167\000\167\000\167\000\167\000\
    \167\000\167\000\167\000\167\000\168\000\168\000\168\000\168\000\
    \168\000\168\000\168\000\168\000\168\000\168\000\255\255\163\000\
    \255\255\255\255\141\000\255\255\255\255\168\000\168\000\168\000\
    \168\000\168\000\168\000\141\000\169\000\169\000\169\000\169\000\
    \169\000\169\000\169\000\169\000\169\000\169\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\169\000\169\000\169\000\
    \169\000\169\000\169\000\255\255\255\255\168\000\168\000\168\000\
    \168\000\168\000\168\000\171\000\171\000\171\000\171\000\171\000\
    \171\000\171\000\171\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\255\255\255\255\169\000\169\000\169\000\
    \169\000\169\000\169\000\178\000\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\179\000\179\000\179\000\179\000\179\000\
    \179\000\179\000\179\000\183\000\183\000\183\000\183\000\183\000\
    \183\000\183\000\183\000\175\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\180\000\180\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\180\000\180\000\180\000\
    \180\000\180\000\180\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\175\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\163\000\
    \255\255\255\255\255\255\255\255\255\255\180\000\180\000\180\000\
    \180\000\180\000\180\000\255\255\255\255\181\000\181\000\181\000\
    \181\000\181\000\181\000\181\000\181\000\181\000\181\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\139\000\181\000\181\000\
    \181\000\181\000\181\000\181\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\181\000\181\000\
    \181\000\181\000\181\000\181\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\175\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec initial lexbuf =
    __ocaml_lex_initial_rec lexbuf 0
and __ocaml_lex_initial_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 302 "clexer.mll"
                (let _ = comment lexbuf in initial lexbuf)
# 774 "clexer.ml"

  | 1 ->
# 303 "clexer.mll"
            (test_gcc (); let _ = line_comment lexbuf in initial lexbuf )
# 779 "clexer.ml"

  | 2 ->
# 304 "clexer.mll"
             (initial lexbuf)
# 784 "clexer.ml"

  | 3 ->
# 305 "clexer.mll"
                        ( add_pragma (pragma lexbuf); initial lexbuf )
# 789 "clexer.ml"

  | 4 ->
# 306 "clexer.mll"
                      ( line lexbuf )
# 794 "clexer.ml"

  | 5 ->
# 307 "clexer.mll"
            ( line lexbuf)
# 799 "clexer.ml"

  | 6 ->
# 309 "clexer.mll"
           (CST_CHAR (chr lexbuf))
# 804 "clexer.ml"

  | 7 ->
# 310 "clexer.mll"
           (CST_STRING (str lexbuf))
# 809 "clexer.ml"

  | 8 ->
# 311 "clexer.mll"
              (CST_FLOAT (Lexing.lexeme lexbuf))
# 814 "clexer.ml"

  | 9 ->
# 312 "clexer.mll"
               (CST_FLOAT (Lexing.lexeme lexbuf))
# 819 "clexer.ml"

  | 10 ->
# 313 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 824 "clexer.ml"

  | 11 ->
# 314 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 829 "clexer.ml"

  | 12 ->
# 315 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 834 "clexer.ml"

  | 13 ->
# 316 "clexer.mll"
             (CST_INT (Lexing.lexeme lexbuf))
# 839 "clexer.ml"

  | 14 ->
# 318 "clexer.mll"
              (EOF)
# 844 "clexer.ml"

  | 15 ->
# 319 "clexer.mll"
            (ELLIPSIS(curfile(), curline()))
# 849 "clexer.ml"

  | 16 ->
# 320 "clexer.mll"
           (PLUS_EQ(curfile(), curline()))
# 854 "clexer.ml"

  | 17 ->
# 321 "clexer.mll"
           (MINUS_EQ(curfile(), curline()))
# 859 "clexer.ml"

  | 18 ->
# 322 "clexer.mll"
           (STAR_EQ(curfile(), curline()))
# 864 "clexer.ml"

  | 19 ->
# 323 "clexer.mll"
           (SLASH_EQ(curfile(), curline()))
# 869 "clexer.ml"

  | 20 ->
# 324 "clexer.mll"
           (PERCENT_EQ(curfile(), curline()))
# 874 "clexer.ml"

  | 21 ->
# 325 "clexer.mll"
           (PIPE_EQ(curfile(), curline()))
# 879 "clexer.ml"

  | 22 ->
# 326 "clexer.mll"
           (AND_EQ(curfile(), curline()))
# 884 "clexer.ml"

  | 23 ->
# 327 "clexer.mll"
           (CIRC_EQ(curfile(), curline()))
# 889 "clexer.ml"

  | 24 ->
# 328 "clexer.mll"
            (INF_INF_EQ(curfile(), curline()))
# 894 "clexer.ml"

  | 25 ->
# 329 "clexer.mll"
            (SUP_SUP_EQ(curfile(), curline()))
# 899 "clexer.ml"

  | 26 ->
# 330 "clexer.mll"
           (INF_INF)
# 904 "clexer.ml"

  | 27 ->
# 331 "clexer.mll"
           (SUP_SUP)
# 909 "clexer.ml"

  | 28 ->
# 332 "clexer.mll"
           (EQ_EQ)
# 914 "clexer.ml"

  | 29 ->
# 333 "clexer.mll"
           (EXCLAM_EQ)
# 919 "clexer.ml"

  | 30 ->
# 334 "clexer.mll"
           (INF_EQ)
# 924 "clexer.ml"

  | 31 ->
# 335 "clexer.mll"
           (SUP_EQ)
# 929 "clexer.ml"

  | 32 ->
# 336 "clexer.mll"
           (EQ(curfile(), curline()))
# 934 "clexer.ml"

  | 33 ->
# 337 "clexer.mll"
           (INF)
# 939 "clexer.ml"

  | 34 ->
# 338 "clexer.mll"
           (SUP)
# 944 "clexer.ml"

  | 35 ->
# 339 "clexer.mll"
           (PLUS_PLUS)
# 949 "clexer.ml"

  | 36 ->
# 340 "clexer.mll"
           (MINUS_MINUS)
# 954 "clexer.ml"

  | 37 ->
# 341 "clexer.mll"
           (ARROW)
# 959 "clexer.ml"

  | 38 ->
# 342 "clexer.mll"
           (PLUS)
# 964 "clexer.ml"

  | 39 ->
# 343 "clexer.mll"
           (MINUS)
# 969 "clexer.ml"

  | 40 ->
# 344 "clexer.mll"
           (STAR)
# 974 "clexer.ml"

  | 41 ->
# 345 "clexer.mll"
           (SLASH)
# 979 "clexer.ml"

  | 42 ->
# 346 "clexer.mll"
           (PERCENT)
# 984 "clexer.ml"

  | 43 ->
# 347 "clexer.mll"
           (EXCLAM)
# 989 "clexer.ml"

  | 44 ->
# 348 "clexer.mll"
           (AND_AND)
# 994 "clexer.ml"

  | 45 ->
# 349 "clexer.mll"
           (PIPE_PIPE)
# 999 "clexer.ml"

  | 46 ->
# 350 "clexer.mll"
           (AND)
# 1004 "clexer.ml"

  | 47 ->
# 351 "clexer.mll"
           (PIPE)
# 1009 "clexer.ml"

  | 48 ->
# 352 "clexer.mll"
           (CIRC)
# 1014 "clexer.ml"

  | 49 ->
# 353 "clexer.mll"
           (QUEST(curfile(), curline()))
# 1019 "clexer.ml"

  | 50 ->
# 354 "clexer.mll"
           (COLON(curfile(), curline()))
# 1024 "clexer.ml"

  | 51 ->
# 355 "clexer.mll"
           (TILDE)
# 1029 "clexer.ml"

  | 52 ->
# 357 "clexer.mll"
           (LBRACE(curfile(), curline()))
# 1034 "clexer.ml"

  | 53 ->
# 358 "clexer.mll"
           (RBRACE(curfile(), curline()))
# 1039 "clexer.ml"

  | 54 ->
# 359 "clexer.mll"
           (LBRACKET(curfile(), curline()))
# 1044 "clexer.ml"

  | 55 ->
# 360 "clexer.mll"
           (RBRACKET(curfile(), curline()))
# 1049 "clexer.ml"

  | 56 ->
# 361 "clexer.mll"
           (LPAREN(curfile(), curline()))
# 1054 "clexer.ml"

  | 57 ->
# 362 "clexer.mll"
           (RPAREN(curfile(), curline()))
# 1059 "clexer.ml"

  | 58 ->
# 363 "clexer.mll"
           (SEMICOLON(curfile(), curline()))
# 1064 "clexer.ml"

  | 59 ->
# 364 "clexer.mll"
           (COMMA(curfile(), curline()))
# 1069 "clexer.ml"

  | 60 ->
# 365 "clexer.mll"
           (DOT)
# 1074 "clexer.ml"

  | 61 ->
# 366 "clexer.mll"
              (SIZEOF)
# 1079 "clexer.ml"

  | 62 ->
# 367 "clexer.mll"
            ( scan_ident (Lexing.lexeme lexbuf))
# 1084 "clexer.ml"

  | 63 ->
# 369 "clexer.mll"
           (EOF)
# 1089 "clexer.ml"

  | 64 ->
# 370 "clexer.mll"
         (display_error
								"Invalid symbol"
								(Lexing.lexeme_start lexbuf)
								(Lexing.lexeme_end lexbuf);
							initial lexbuf)
# 1098 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_initial_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 132
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 376 "clexer.mll"
               (())
# 1110 "clexer.ml"

  | 1 ->
# 377 "clexer.mll"
           (comment lexbuf)
# 1115 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and line_comment lexbuf =
    __ocaml_lex_line_comment_rec lexbuf 136
and __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 380 "clexer.mll"
               (())
# 1127 "clexer.ml"

  | 1 ->
# 381 "clexer.mll"
           (line_comment lexbuf)
# 1132 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state

and line lexbuf =
    __ocaml_lex_line_rec lexbuf 139
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 385 "clexer.mll"
              (initial lexbuf)
# 1144 "clexer.ml"

  | 1 ->
# 386 "clexer.mll"
            (line lexbuf)
# 1149 "clexer.ml"

  | 2 ->
# 387 "clexer.mll"
             (set_line (int_of_string (Lexing.lexeme lexbuf));
							file lexbuf)
# 1155 "clexer.ml"

  | 3 ->
# 389 "clexer.mll"
         (endline lexbuf)
# 1160 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_line_rec lexbuf __ocaml_lex_state

and file lexbuf =
    __ocaml_lex_file_rec lexbuf 151
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 391 "clexer.mll"
               (initial lexbuf)
# 1172 "clexer.ml"

  | 1 ->
# 392 "clexer.mll"
            (file lexbuf)
# 1177 "clexer.ml"

  | 2 ->
# 393 "clexer.mll"
                     (set_name (rem_quotes (Lexing.lexeme lexbuf));
							endline lexbuf)
# 1183 "clexer.ml"

  | 3 ->
# 395 "clexer.mll"
         (endline lexbuf)
# 1188 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_file_rec lexbuf __ocaml_lex_state

and endline lexbuf =
    __ocaml_lex_endline_rec lexbuf 158
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 397 "clexer.mll"
                (initial lexbuf)
# 1200 "clexer.ml"

  | 1 ->
# 398 "clexer.mll"
         (endline lexbuf)
# 1205 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_endline_rec lexbuf __ocaml_lex_state

and str lexbuf =
    __ocaml_lex_str_rec lexbuf 161
and __ocaml_lex_str_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 401 "clexer.mll"
              ("")
# 1217 "clexer.ml"

  | 1 ->
# 402 "clexer.mll"
                (let cur = scan_hex_escape (String.sub
							(Lexing.lexeme lexbuf) 2 2) in cur ^ (str lexbuf))
# 1223 "clexer.ml"

  | 2 ->
# 404 "clexer.mll"
                (let cur = scan_oct_escape (String.sub
							(Lexing.lexeme lexbuf) 1 3) in cur ^ (str lexbuf))
# 1229 "clexer.ml"

  | 3 ->
# 406 "clexer.mll"
            ((String.make 1 (Char.chr 0)) ^ (str lexbuf))
# 1234 "clexer.ml"

  | 4 ->
# 407 "clexer.mll"
             (let cur = scan_escape (String.sub
							(Lexing.lexeme lexbuf) 1 1) in cur ^ (str lexbuf))
# 1240 "clexer.ml"

  | 5 ->
# 409 "clexer.mll"
         ( (Lexing.lexeme lexbuf) ^  (str lexbuf))
# 1245 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_str_rec lexbuf __ocaml_lex_state

and chr lexbuf =
    __ocaml_lex_chr_rec lexbuf 173
and __ocaml_lex_chr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 412 "clexer.mll"
              ("")
# 1257 "clexer.ml"

  | 1 ->
# 413 "clexer.mll"
                (let cur = scan_hex_escape (String.sub
							(Lexing.lexeme lexbuf) 2 2) in cur ^ (chr lexbuf))
# 1263 "clexer.ml"

  | 2 ->
# 415 "clexer.mll"
                (let cur = scan_oct_escape (String.sub
							(Lexing.lexeme lexbuf) 1 3) in cur ^ (chr lexbuf))
# 1269 "clexer.ml"

  | 3 ->
# 417 "clexer.mll"
            ((String.make 1 (Char.chr 0)) ^ (chr lexbuf))
# 1274 "clexer.ml"

  | 4 ->
# 418 "clexer.mll"
             (let cur = scan_escape (String.sub
							(Lexing.lexeme lexbuf) 1 1) in cur ^ (chr lexbuf))
# 1280 "clexer.ml"

  | 5 ->
# 420 "clexer.mll"
         (let cur = Lexing.lexeme lexbuf in cur ^ (chr lexbuf))
# 1285 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_chr_rec lexbuf __ocaml_lex_state

and pragma lexbuf =
    __ocaml_lex_pragma_rec lexbuf 185
and __ocaml_lex_pragma_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 423 "clexer.mll"
              ( "" )
# 1297 "clexer.ml"

  | 1 ->
# 424 "clexer.mll"
         ( (Lexing.lexeme lexbuf) ^ (pragma lexbuf) )
# 1302 "clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_pragma_rec lexbuf __ocaml_lex_state

;;

# 426 "clexer.mll"
 

(*** get_buffer ***)
let get_buffer (hr : handle ref) (dst : string) (len : int) : int =
	(*let (inter, chan, line, buffer, pos, lineno, out, name) = !hr in*)
	let h = !hr in
	try
		let (bufferp, linep, posp, linenop) =
			if h.h_buffer <> ""
			then (h.h_buffer, h.h_line , h.h_pos, h.h_lineno)
			else
				let buffer = (input_line h.h_in_channel) ^ "\n" in
				(
					buffer,
					(if h.h_interactive then h.h_line ^ buffer else buffer),
					(if h.h_interactive then h.h_pos else h.h_pos + (String.length h.h_line)),
					h.h_lineno + 1
				) in
		(*let _ = print_endline ("-->" ^ linep) in*)
		let bufl = String.length bufferp in
		let lenp = min len bufl in
		let buffers = if bufl = lenp
			then ""
			else String.sub bufferp lenp (bufl - lenp) in
		begin
			String.blit bufferp 0 dst 0 lenp;
			h.h_line <- linep;
			h.h_buffer <- buffers;
			h.h_pos <- posp;
			h.h_lineno <- linenop;
			lenp
		end
	with End_of_file -> 0


(* init: handle -> ()
**	Initialize lexer.
*)
let init hdl =
	init_lexicon ();
	current_handle := hdl

# 1352 "clexer.ml"
